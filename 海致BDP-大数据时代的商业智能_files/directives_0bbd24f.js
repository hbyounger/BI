function bdpProportionLineDirective(e, t) {
    return {
        restrict: "EA",
        replace: !0,
        scope: {
            proportionNum: "=",
            proportionTotal: "=",
            proportionItem: "="
        },
        templateUrl: "/static/partials/directiveTemplates/bdpProportionLine.html",
        link: function (e, a, i) {
            function r() {
                var t = e.proportionNum,
                    a = e.proportionTotal,
                    i = t / a * 100;
                e.bdpProportionData.percent = i > 100 ? 100 : i.toFixed(2), e.bdpProportionData.styleWidth = {
                    width: e.bdpProportionData.percent + "%"
                }
            }
            e.init = function () {
                e.bdpProportionData = {
                    num: e.proportionNum,
                    total: e.proportionTotal,
                    percent: 0,
                    item: e.proportionItem,
                    placement: "vertical",
                    styleWidth: {
                        width: "0px"
                    },
                    hideLine: !1
                }, i.placement && (e.bdpProportionData.placement = i.placement), i.hideLine && (e.bdpProportionData.hideLine = e.$eval(i.hideLine)), r()
            }, 
            e.init(), 
            e.$on("resetAccountLimit", function (a, i) {
                i && t(function () {
                    e.init()
                }, 10)
            }),
             e.$on("translateProportionItem", function (t, a) {
                a && (e.bdpProportionData.item = a)
            })
        }
    }
}

function expressionFuncTip(e) {
    return {
        restrict: "A",
        link: function (e, t, a) {
            var i = a.funcTip ? t.closest(a.funcTip)[0] : t.parent().parent()[0];
            t.hover(function () {
                if (i) {
                    var e = t.offset(),
                        a = t.width(),
                        r = (t.height(), $(this).find(".func-tip")),
                        n = (r.offset(), r.outerHeight()),
                        o = $(window).height(),
                        l = {
                            left: e.left + a + 10
                        };
                    e.top + n / 2 - 10 < o ? l.top = e.top - r.outerHeight() / 2 - 10 : l.top = o - r.outerHeight(), r.css(l)
                }
            })
        }
    }
}

function expressionFilter(e) {
    return {
        templateUrl: "/static/partials/directiveTemplates/expression_filter.html",
        link: function (e, t) {},
        replace: !0,
        scope: {
            tbList: "=",
            expressionData: "=",
            hasBtn: "=",
            multipleTb: "="
        },
        controller: "expressionFilterCtrl"
    }
}

function expressionFilterCtrl(e, t, a, i, r, n, o) {
    function l() {
        if (0 == t.tbList.length) 
            p.curTb = void 0, 
            p.sql = "", 
            t.expressionData = {}, 
            d("");
        else {
            var e = [];
            angular.forEach(t.expressionData, function (a, i) {
                s(i) || (e.push(i), 
                delete t.expressionData[i])
            }), 
            e.indexOf(p.curTb) > -1 && (d(t.tbList[0].tb_id), t.tbList[0].open = !0)
        }
    }

    function s(e) {
        for (var a = t.tbList, i = !1, r = 0; r < a.length; r++)
            if (a[r].tb_id == e) {
                i = !0;
                break
            }
        return i
    }

    function d(e) {
        p.curTb = e, p.sql = t.expressionData[e] || "", t.updataSqlVal && t.updataSqlVal()
    }

    function c(e) {
        if (0 != t.tbList.length) return e ? void angular.forEach(t.tbList, function (t) {
            t.open = !1, t.tb_id == e && (t.open = !0)
        }) : void(t.tbList[0].open = !0)
    }

    var u;
    t.viewData = {
        tab: 1,
        funcList: [],
        sql: "",
        curTb: u || ""
    }, 
    e.$watch("global.funcList", function (e) {
        e && (t.viewData.funcList = e.base)
    }), 
    t.expressionData = t.expressionData || {}, t.$on("initTbList", function (e, a) {
        if (0 != t.tbList.length) {
            var i = a;
            a || (i = t.tbList[0].tb_id), d(i), c(i), t.$broadcast("updateTbList")
        }
    }), 
    t.$on("updateTbList", function (e, a) {
        l(), t.tbList && t.tbList.length > 0 && t.tbList.forEach(function (e, t) {
            e.fields = bdp.utils.addSpecParamsToFields(e.fields)
        })
    });
    var f = t.$watch("tbList", function (e) {
            e && (t.$broadcast("initTbList"), f())
        }),
        p = t.viewData;
    p.tbList = t.tbList, t.tbList && t.tbList.length > 0 && (u = t.tbList[0].tb_id, t.tbList[0].open = !0, p.curTb = t.tbList[0].tb_id), p.curTb && (p.sql = t.expressionData[u]), t.$on("initSql", function (e, t) {
        var a = t || p.curTb;
        d(a), c(a)
    }), 
    t.tabTable = function (e, a) {
        e.open = !e.open, angular.forEach(t.tbList, function (t) {
            e.tb_id != t.tb_id && (t.open = !1)
        }), e.open && (p.curTb = e.tb_id, p.sql = t.expressionData[e.tb_id] || "", t.updataSqlVal())
    }, 
    t.insertFieldName = function (e) {
        t.insert("[" + e + "]")
    }, 
    t.insertFunc = function (e) {
        e = "COUNT_DISTINCT" === e ? "COUNT(DISTINCT())" : e + "()", t.insert(e), t.setCursor("COUNT(DISTINCT())" == e ? 2 : 1)
    }, 
    t.previewFilterAction = function () {
        t.$emit("toFilter", "parent")
    }, 
    t.sqlTrans = function () {
        if (0 != t.tbList.length && (1 != t.tbList.length || 0 != t.tbList[0].fields.length) && p.curTb) {
            if (!p.sql) return void o(t.tips["where.sqlScriptNull"]);
            if ("common" == p.curTb) return void t.$emit("toSqlTrans", p.sql);
            var e = p.curTb;
            r.tb.sqlTrans({
                tb_id: e,
                sql: p.sql
            }).then(function (e) {
                0 == e.status && o(t.tips["filter.checkSuccess"])
            })
        }
    }, n(["filter.checkSuccess", "where.sqlScriptNull"], t)
}

function formulaExpression(e) {
    function t(e, t, a) {
        function i() {
            r = CodeMirror.fromTextArea(t[0], {
                mode: "text/x-bdp-sql",
                indentWithTabs: !0,
                smartIndent: !0,
                lineWrapping: !0,
                matchBrackets: !0,
                readOnly: !!n && "nocursor",
                theme: "paraiso-light",
                fields: e.fields,
                placeholder: a.p ? a.p : "SUM([A]) + SUM([B])"
            }), e.viewData.sql && r.setValue(e.viewData.sql), n || (r.on("change", function () {
                e.expressionData[e.viewData.curTb] = e.viewData.sql = r.getValue().replace(/0xa0/, "")
            }), e.insert = function (e) {
                r.replaceSelection(e), r.focus()
            }, e.setCursor = function (e) {
                var t = r.getCursor(),
                    a = t.ch - e;
                r.setCursor(t.line, a)
            }), e.updataSqlVal = function () {
                r.setValue(e.viewData.sql || "")
            }, e.updataSqlVal()
        }
        var r, n = !!a.readonly,
            o = {
                funcQueue: [],
                loadLibInProgress: !1
            };
        thirdPluginLoader({
            initFun: i,
            libSrc: "https://s1.bdp.cn/static/js/lib/bdpFormula/bdp-codemirror_1fb68f2.js",
            otherSrc: "",
            libId: window.CodeMirror && window.CM_bdpFormulaPlugin
        }, o)
    }
    return {
        restrict: "A",
        link: t
    }
}

function formulaExpressionReadonly() {
    function e(e, t, a) {
        function i() {
            r = CodeMirror.fromTextArea(t[0], {
                mode: "text/x-bdp-sql",
                indentWithTabs: !0,
                smartIndent: !0,
                lineWrapping: !0,
                matchBrackets: !0,
                readOnly: !!n && "nocursor",
                theme: "paraiso-light",
                fields: e.fields,
                placeholder: a.p ? a.p : "SUM([A]) + SUM([B])"
            }), r.setValue(e.formulaData)
        }
        var r, n = !!a.readonly,
            o = {
                funcQueue: [],
                loadLibInProgress: !1
            };
        thirdPluginLoader({
            initFun: i,
            libSrc: "https://s1.bdp.cn/static/js/lib/bdpFormula/bdp-codemirror_1fb68f2.js",
            otherSrc: "",
            libId: window.CodeMirror && window.CM_bdpFormulaPlugin
        }, o)
    }
    return {
        restrict: "A",
        link: e,
        scope: {
            formulaData: "="
        }
    }
}

function pageCtrl(e, t) {
    function a() {
        var t, a, r = e.total,
            n = e.curPage;
        r <= 5 ? (t = 1, a = r) : r - n < 3 ? (t = r - 4, a = r) : (t = n < 4 ? 1 : n - 2, a = 1 == t ? 5 : n + 2), e.pageList = i(t, a), e.pageShow = !0
    }

    function i(e, t) {
        for (var a = [], i = e; i < t + 1; i++) a.push(i);
        return a
    }
    e.pageShow = !1, 
    e.goPage = function (t) {
        var a = t.target,
            i = a.getAttribute("page");
        if ("prev" == i) {
            if (1 == e.curPage) return;
            i = e.curPage - 1
        }
        if ("next" == i) {
            if (e.curPage == e.total) return;
            i = e.curPage + 1
        }
        i != e.curPage && (e.curPage = i, e.$emit("goPage", i))
    }, 
    e.$on("initPage", function () {
        t(function () {
            a()
        }, 10)
    })
}
! function () {
    function e(e) {
        return {
            restrict: "EA",
            templateUrl: "/static/js/chart-config/tpl/line-style-select.html",
            replace: !0,
            scope: {
                valSelected: "=",
                valChange: "&",
                clickDisabled: "="
            },
            link: function (t, a, i) {
                function r() {
                    t.viewData.lineStyleList.map(function (e) {
                        e.value == t.valSelected && (t.viewData.selectedLineStyle = e.map)
                    })
                }

                function n(a) {
                    t.valSelected != a.value && (t.viewData.selectedLineStyle = a.map, t.valSelected = a.value, e(function () {
                        t.valChange()
                    }, 0)), t.viewData.showList = !1
                }

                function o() {
                    t.clickDisabled || (t.viewData.showList = !t.viewData.showList)
                }! function () {
                    t.viewData = {
                        lineStyleList: [{
                            name: "Solid",
                            value: "Solid",
                            map: "solid"
                        }, {
                            name: "ShortDash",
                            value: "ShortDash",
                            map: "short-dash"
                        }, {
                            name: "ShortDot",
                            value: "ShortDot",
                            map: "short-dot"
                        }, {
                            name: "ShortDashDot",
                            value: "ShortDashDot",
                            map: "short-dash-dot"
                        }, {
                            name: "ShortDashDotDot",
                            value: "ShortDashDotDot",
                            map: "short-dash-dot-dot"
                        }, {
                            name: "Dot",
                            value: "Dot",
                            map: "dot"
                        }, {
                            name: "Dash",
                            value: "Dash",
                            map: "dash"
                        }, {
                            name: "LongDash",
                            value: "LongDash",
                            map: "long-dash"
                        }, {
                            name: "DashDot",
                            value: "DashDot",
                            map: "dash-dot"
                        }, {
                            name: "LongDashDot",
                            value: "LongDashDot",
                            map: "long-dash-dot"
                        }, {
                            name: "LongDashDotDot",
                            value: "LongDashDotDot",
                            map: "long-dash-dot-dot"
                        }],
                        selectedLineStyle: "",
                        showList: !1,
                        selectLineStyle: n,
                        toggleStyleList: o
                    }
                }(), t.$watch(function () {
                    return t.valSelected
                }, function (e) {
                    r()
                })
            }
        }
    }
    ! function () {
        function e(e) {
            return {
                restrict: "EA",
                templateUrl: "/static/js/chart-config/tpl/chart-config.html",
                replace: !0,
                link: function (t, a, i) {
                    function r(e) {
                        var t = angular.element(e.target);
                        if (t) {
                            t.next(".block-body").animate({
                                height: "toggle"
                            }, 200), t.hasClass("is-toggle") ? t.removeClass("is-toggle") : t.addClass("is-toggle")
                        }
                    }

                    function n(e) {
                        e && bdpChart.configurable && (t.chartConfig.canEditSankeySpec = bdpChart.configurable.canEditSankeySpec(t.selected_type), t.chartConfig.canEditGaugeSpec = bdpChart.configurable.canEditGaugeSpec(t.selected_type), t.chartConfig.canEditMapSpec = bdpChart.configurable.canEditMapSpec(t.selected_type), t.chartConfig.canEditWordcloudSpec = bdpChart.configurable.canEditWordcloudSpec(t.selected_type), t.chartConfig.canEditTableSpec = bdpChart.configurable.canEditTableSpec(t.selected_type), t.chartConfig.canEditWarnLine = bdpChart.configurable.canEditWarnLine(t.selected_type, e), t.chartConfig.canEditPlotLine = bdpChart.configurable.canEditPlotLine(t.selected_type), t.chartConfig.canEditConditionFormat = bdpChart.configurable.canEditConditionFormat(t.selected_type), t.chartConfig.canEditTopChart = bdpChart.configurable.canEditTopChart(t.selected_type, e), t.chartConfig.canEditMarkPoint = bdpChart.configurable.canEditMarkPoint(t.selected_type, e), t.chartConfig.canEditTrendLine = bdpChart.configurable.canEditTrendLine(t.selected_type), t.chartConfig.canEditCumulative = bdpChart.configurable.canEditCumulative(t.selected_type), t.chartConfig.canEditChartSummary = bdpChart.configurable.canEditChartSummary(t.selected_type, e), t.chartConfig.canEditXAxis = bdpChart.configurable.canEditXAxis(t.selected_type, bdpChart), t.chartConfig.canEditZeroAligneds = bdpChart.configurable.canEditZeroAligneds(t.selected_type, e), t.chartConfig.canEditLeftAxis = bdpChart.configurable.canEditLeftAxis(t.selected_type, e), t.chartConfig.canEditRightAxis = bdpChart.configurable.canEditRightAxis(t.selected_type, e), t.chartConfig.canEditNavigator = bdpChart.configurable.canEditNavigator(t.selected_type, e), t.chartConfig.canEditGranularity = o(t.selected_type), t.chartConfig.canEditSplitCompare = bdpChart.configurable.canEditSplitCompare(t.selected_type, e), t.chartConfig.canEditLineStyle = bdpChart.configurable.canEditLineStyle(t.selected_type, e), t.chartConfig.canEditPieStyle = bdpChart.configurable.canEditPieStyle(t.selected_type), t.chartConfig.canEditFunnelLayout = bdpChart.configurable.canEditFunnelLayout(t.selected_type), t.chartConfig.canEditWordcloud3D = bdpChart.configurable.canEditWordcloud3D(t.selected_type), t.chartConfig.canEditComparisonBarAxis = bdpChart.configurable.canEditComparisonBarAxis(t.selected_type), t.chartConfig.canEditChartDataLabels = bdpChart.configurable.canEditChartDataLabels(t.selected_type), t.chartConfig.canEditSunburstLabels = l(t.selected_type, e), t.chartConfig.canEditTreeMapLabels = s(t.selected_type, e), t.chartConfig.canEditChartFeature = d(t.selected_type, e), t.chartConfig.canEditChartNumercial = c(t.selected_type, e), t.chartConfig.canEditChartStyleSetting = u(t.selected_type, e), t.chartConfig.canEditChartInteractive = f(t.selected_type, e), t.chartConfig.canSetSelectionAnalysis = bdpChart.configurable.canSetSelectionAnalysis(t.selected_type, e), t.chartConfig.canSetHoverMode = bdpChart.configurable.canSetHoverMode(t.selected_type, e))
                    }

                    function o() {
                        return 1 === t.isGranularity
                    }

                    function l(e, a) {
                        return t.viewMeta.show_datalabels && "C360" === e
                    }

                    function s(e, a) {
                        return t.viewMeta.show_datalabels && "C370" === e
                    }

                    function d(e, t) {
                        return bdpChart.configurable.canEditWarnLine(e, t) || bdpChart.configurable.canEditPlotLine(e, t) || bdpChart.configurable.canEditConditionFormat(e, t) || bdpChart.configurable.canEditTopChart(e, t) || bdpChart.configurable.canEditMarkPoint(e, t) || bdpChart.configurable.canEditSplitCompare(e, t)
                    }

                    function c(e, t) {
                        return bdpChart.configurable.canEditTrendLine(e, t) || bdpChart.configurable.canEditCumulative(e, t) || bdpChart.configurable.canEditChartSummary(e, t)
                    }

                    function u(e, t) {
                        return bdpChart.configurable.canEditLineStyle(e, t) || bdpChart.configurable.canEditPieStyle(e, t) || bdpChart.configurable.canEditFunnelLayout(e, t) || bdpChart.configurable.canEditWordcloud3D(e, t) || bdpChart.configurable.canEditComparisonBarAxis(e, t) || bdpChart.configurable.canEditChartDataLabels(e, t) || bdpChart.configurable.canEditGridPlotLine(e, t) || bdpChart.configurable.canEditChartLegend(e, t)
                    }

                    function f(e, t) {
                        return bdpChart.configurable.canEditNavigator(e, t) || o() || bdpChart.configurable.canSetHoverMode(e, t) || bdpChart.configurable.canSetSelectionAnalysis(e, t)
                    }
                    t.init = function () {
                        t.chartConfig = {
                            toggleNextBlock: r,
                            canEditChartTitle: !0,
                            canEditChartType: !0,
                            canEditInnerFilter: !0,
                            canEditDescription: !0,
                            canEditSankeySpec: !1,
                            canEditGaugeSpec: !1,
                            canEditMapSpec: !1,
                            canEditWordcloudSpec: !1,
                            canEditTableSpec: !1,
                            canEditWarnLine: !1,
                            canEditPlotLine: !1,
                            canEditConditionFormat: !1,
                            canEditTopChart: !1,
                            canEditMarkPoint: !1,
                            canEditTrendLine: !1,
                            canEditCumulative: !1,
                            canEditChartSummary: !1,
                            canEditXAxis: !1,
                            canEditZeroAligneds: !1,
                            canEditLeftAxis: !1,
                            canEditRightAxis: !1,
                            canEditNavigator: !1,
                            canEditGranularity: !1,
                            canEditSplitCompare: !1,
                            canEditLineStyle: !1,
                            canEditPieStyle: !1,
                            canEditFunnelLayout: !1,
                            canEditWordcloud3D: !1,
                            canEditComparisonBarAxis: !1,
                            canEditChartDataLabels: !1,
                            canEditSunburstLabels: !1,
                            canEditTreeMapLabels: !1,
                            canEditChartFeature: !1,
                            canEditChartNumercial: !1,
                            canEditChartStyleSetting: !1,
                            canEditChartInteractive: !1,
                            canSetSelectionAnalysis: !1,
                            canSetHoverMode: !1
                        }
                    }, 
                    t.init(), 
                    t.$on("emitChartConfiguration", function (a, i) {
                        i && (i.isOnlyRedraw || t.$broadcast("broadcastReloadStyle", "broadcastReloadStyle"), e(function () {
                            n(i.chart)
                        }, 0))
                    })
                }
            }
        }

        angular
        .module("BC.directives")
        .directive("chartConfig", e), e.$inject = ["$timeout"]
    }(window),
    function () {
        function e(e, t, a, i, r, n, o) {
            return {
                restrict: "EA",
                scope: {
                    chartInfo: "=?",
                    saveFunc: "&?",
                    type: "=?"
                },
                templateUrl: "/static/js/chart-config/tpl/chart-set-axis-style.html",
                replace: !0,
                link: function (l, s, d) {
                    l.init = function () {
                        var t = l.type,
                            s = o.getDefaultStyle(),
                            d = angular.copy(s.axis[t]),
                            c = l.chartInfo.style,
                            u = {};
                        if (c && c.axis && c.axis.hasOwnProperty(t)) u = $.extend(!0, d, c.axis[t]), bdpChart.helper.transferAxisOldStyle(c.axis);
                        else {
                            var f = {};
                            f[t] = angular.copy(d), u = $.extend(!0, f[t], {})
                        }
                        "en" == e.language && (n[0].name = "Default"), l.axisStyle = {
                            chartLineDashStyle: a,
                            chartLineWidth: i,
                            chartFontFamily: n,
                            chartFontSize: r,
                            chartType: l.chartInfo.chart_type,
                            type: t,
                            data: u,
                            originalData: angular.copy(u),
                            colorPickerOpt: {
                                showAlpha: !bdp.bdpPageStatus.isUnderNormalChartEdit(),
                                clickoutFiresChange: !1
                            },
                            configAxisStyle: function (e) {
                                var a = {};
                                l.chartInfo.style && l.chartInfo.style.axis ? l.chartInfo.style.axis[t] = $.extend(!0, l.chartInfo.style.axis[t], l.axisStyle.data) : l.chartInfo.style && !l.chartInfo.style.axis ? (a[t] = l.axisStyle.data, l.chartInfo.style.axis = a) : (a = {
                                    axis: {}
                                }, a.axis[t] = l.axisStyle.data, l.chartInfo.style = a), l.saveFunc()
                            },
                            changeColor: function (e) {},
                            modifyColor: function (e, t) {
                                l.axisStyle.configAxisStyle(t)
                            }
                        }
                    }, t(function () {
                        l.init()
                    }, 0), l.$on("broadcastReloadStyle", function (e, t) {
                        l.init()
                    })
                }
            }
        }

        function t(e, t, a, i, r, n, o, l, s, d) {
            return {
                restrict: "EA",
                scope: {
                    chartInfo: "=?",
                    saveFunc: "&?"
                },
                templateUrl: "/static/js/chart-config/tpl/chart-set-extend-style.html",
                replace: !0,
                link: function (c, u, f) {
                    c.init = function () {
                        if (!c.chartInfo) return !1;
                        var d = c.chartInfo.style;
                        "en" == e.language && (o[0].name = "Default"), c.chartLineDashStyle = i, c.chartLineWidth = r, c.chartFontFamily = o, c.chartFontSize = n;
                        var u = l.getDefaultStyle();
                        defaultStyle = angular.copy(u);
                        var f = {};
                        if (d && d.gridPlotLine) f = $.extend(!0, defaultStyle.gridPlotLine, d.gridPlotLine);
                        else {
                            var p = angular.copy(defaultStyle.gridPlotLine);
                            f = $.extend(!0, p, {})
                        }
                        c.gridPlotLineStyle = {
                            colorPickerOpt: {
                                showAlpha: !bdp.bdpPageStatus.isUnderNormalChartEdit(),
                                clickoutFiresChange: !1
                            },
                            data: f,
                            originalData: angular.copy(f),
                            canEditGridPlotLine: function () {
                                return bdpChart.configurable.canEditGridPlotLine(c.chartInfo.chart_type, {
                                    info: c.chartInfo
                                })
                            },
                            compareStyleChanged: function (e) {
                                var t = c.gridPlotLineStyle.data[e],
                                    a = c.gridPlotLineStyle.originalData[e],
                                    i = !1;
                                if (!a) return i = !0;
                                for (var r in t) t[r] != a[r] && (i = !0);
                                return i
                            },
                            changeSplitNum: function (e, t) {
                                13 == (e || window.event).keyCode && c.gridPlotLineStyle.compareStyleChanged(t) && c.gridPlotLineStyle.configGridPlotLine(t)
                            },
                            configGridPlotLine: function (e) {
                                if (!e || !c.gridPlotLineStyle.compareStyleChanged(e)) return !1;
                                var i = c.gridPlotLineStyle.data,
                                    r = /^(0|[1-9]|10)$/;
                                if (!r.test(i.xAxis.splitNum) || !r.test(i.yAxis.splitNum)) return a(c.tips["dash.advDash.inputPositiveNumberBetween0and10"]), t(function () {
                                    i.xAxis.splitNum = r.test(i.xAxis.splitNum) ? i.xAxis.splitNum : 10, i.yAxis.splitNum = r.test(i.yAxis.splitNum) ? i.yAxis.splitNum : 10
                                }, 300), !1;
                                c.chartInfo.style && c.chartInfo.style.gridPlotLine ? c.chartInfo.style.gridPlotLine[e] = $.extend(!0, c.chartInfo.style.gridPlotLine[e], i[e]) : c.chartInfo.style && !c.chartInfo.style.gridPlotLine ? (c.chartInfo.style.gridPlotLine = {}, c.chartInfo.style.gridPlotLine[e] = i[e]) : (c.chartInfo.style = {
                                    gridPlotLine: {}
                                }, c.chartInfo.style.gridPlotLine[e] = i[e]), c.gridPlotLineStyle.originalData = angular.copy(i), c.saveFunc()
                            },
                            changeColor: function (e) {},
                            modifyColor: function (e, t) {
                                c.gridPlotLineStyle.configGridPlotLine(t)
                            }
                        };
                        var g = {};
                        if (d && d.legend) g = $.extend(!0, defaultStyle.legend, d.legend);
                        else {
                            var h = angular.copy(defaultStyle.legend);
                            g = $.extend(!0, h, {})
                        }
                        c.chartLegendStyle = {
                            colorPickerOpt: {
                                showAlpha: !bdp.bdpPageStatus.isUnderNormalChartEdit(),
                                clickoutFiresChange: !1
                            },
                            data: g,
                            originalData: angular.copy(g),
                            canEditChartLegend: function () {
                                return bdpChart.configurable.canEditChartLegend(c.chartInfo.chart_type, {
                                    info: c.chartInfo
                                })
                            },
                            configChartLegend: function (e) {
                                var t = c.chartLegendStyle.data,
                                    a = parseInt(t.itemStyle.fontSize);
                                if (t.itemStyle.lineHeight = a < 18 ? "18px" : a + 2 + "px", e && e.pos) {
                                    t.pos = e.pos, t.enabled = "null" != e.pos;
                                    var i = s[e.pos];
                                    t.enabled && (t.layout = i.layout, t.align = i.align, t.verticalAlign = i.verticalAlign)
                                }
                                c.chartInfo.style ? c.chartInfo.style.legend = $.extend(!0, c.chartInfo.style.legend, t) : c.chartInfo.style = {
                                    legend: t
                                }, c.saveFunc()
                            },
                            changeColor: function (e) {},
                            modifyColor: function (e, t) {
                                c.chartLegendStyle.configChartLegend(t)
                            }
                        }
                    }, t(function () {
                        c.init()
                    }, 0), c.$on("broadcastReloadStyle", function (e, t) {
                        c.init()
                    }), d(["dash.advDash.inputPositiveNumberBetween0and10"], c)
                }
            }
        }

        function a(e, t, a, i, r, n, o) {
            return {
                restrict: "EA",
                scope: {
                    chartInfo: "=?",
                    saveFunc: "&?",
                    textType: "=?"
                },
                templateUrl: "/static/js/chart-config/tpl/chart-normal-text-style.html",
                replace: !0,
                link: function (a, o, l) {
                    a.init = function () {
                        if (!a.chartInfo) return !1;
                        var t = a.chartInfo.style,
                            o = a.textType,
                            l = n.getDefaultStyle(a.chartInfo.chart_type),
                            s = angular.copy(l[o]),
                            d = {};
                        if (t && t[o]) d = $.extend(!0, s, t[o]);
                        else {
                            var c = angular.copy(s);
                            d = $.extend(!0, c, {})
                        }
                        "en" == e.language && (r[0].name = "Default"), a.chartNormalTextStyle = {
                            chartFontFamily: r,
                            chartFontSize: i,
                            type: o,
                            data: d,
                            originalData: angular.copy(d),
                            colorPickerOpt: {
                                showAlpha: !bdp.bdpPageStatus.isUnderNormalChartEdit(),
                                clickoutFiresChange: !1
                            },
                            configTextStyle: function () {
                                var e = {};
                                a.chartInfo.style ? a.chartInfo.style[o] = $.extend(!0, a.chartInfo.style[o], a.chartNormalTextStyle.data) : (e = {}, e[o] = a.chartNormalTextStyle.data, a.chartInfo.style = e), a.saveFunc()
                            },
                            changeColor: function (e) {},
                            modifyColor: function (e, t) {
                                a.chartNormalTextStyle.configTextStyle(t)
                            }
                        }
                    }, t(function () {
                        a.init()
                    }, 0), a.$on("broadcastReloadStyle", function (e, t) {
                        a.init()
                    })
                }
            }
        }
        angular.module("BC.directives")
        .constant("chartLineDashStyle", [{
            name: "Solid",
            value: "Solid"
        }, {
            name: "ShortDash",
            value: "ShortDash"
        }, {
            name: "ShortDot",
            value: "ShortDot"
        }, {
            name: "ShortDashDot",
            value: "ShortDashDot"
        }, {
            name: "ShortDashDotDot",
            value: "ShortDashDotDot"
        }, {
            name: "Dot",
            value: "Dot"
        }, {
            name: "Dash",
            value: "Dash"
        }, {
            name: "LongDash",
            value: "LongDash"
        }, {
            name: "DashDot",
            value: "DashDot"
        }, {
            name: "LongDashDot",
            value: "LongDashDot"
        }, {
            name: "LongDashDotDot",
            value: "LongDashDotDot"
        }]).constant("chartLineWidth", [{
            name: "1",
            value: 1
        }, {
            name: "2",
            value: 2
        }, {
            name: "3",
            value: 3
        }, {
            name: "4",
            value: 4
        }, {
            name: "5",
            value: 5
        }, {
            name: "6",
            value: 6
        }, {
            name: "7",
            value: 7
        }, {
            name: "8",
            value: 8
        }, {
            name: "9",
            value: 9
        }]).constant("chartFontSize", [{
            name: "10px",
            value: "10px"
        }, {
            name: "11px",
            value: "11px"
        }, {
            name: "12px",
            value: "12px"
        }, {
            name: "13px",
            value: "13px"
        }, {
            name: "14px",
            value: "14px"
        }, {
            name: "15px",
            value: "15px"
        }, {
            name: "16px",
            value: "16px"
        }, {
            name: "18px",
            value: "18px"
        }, {
            name: "20px",
            value: "20px"
        }, {
            name: "24px",
            value: "24px"
        }, {
            name: "32px",
            value: "32px"
        }, {
            name: "36px",
            value: "36px"
        }, {
            name: "48px",
            value: "48px"
        }, {
            name: "64px",
            value: "64px"
        }]).constant("chartFontFamily", [{
            name: "默认",
            value: "inherit"
        }, {
            name: "微软雅黑",
            value: "Microsoft YaHei"
        }, {
            name: "宋体",
            value: "SimSun"
        }, {
            name: "黑体",
            value: "Heiti"
        }, {
            name: "华文细黑",
            value: "STXihei"
        }, {
            name: "Verdana",
            value: "Verdana"
        }, {
            name: "Arial",
            value: "Arial"
        }, {
            name: "Times New Roman",
            value: "Times New Roman"
        }, {
            name: "Times",
            value: "Times"
        }, {
            name: "MS Sans Serif",
            value: "MS Sans Serif"
        }, {
            name: "Microsoft Yahei",
            value: "Microsoft Yahei"
        }])
        .factory("defaultChartStyleFactory", ["$rootScope", function (e) {
            function t(e) {
                var t = i.super_color,
                    a = i.super_color;
                return e && (["C230", "C360", "C370"].indexOf(e) > -1 && (t = "#FFF"), ["C230"].indexOf(e) > -1 && (a = "#FFF")), {
                    gridPlotLine: {
                        xAxis: {
                            enabled: !1,
                            color: i.stroke,
                            dashStyle: "Solid",
                            width: 1,
                            splitNum: 10
                        },
                        yAxis: {
                            enabled: !1,
                            color: i.stroke,
                            dashStyle: "Solid",
                            width: 1,
                            splitNum: 10
                        }
                    },
                    legend: {
                        enabled: !0,
                        layout: "vertical",
                        align: "right",
                        verticalAlign: "top",
                        pos: "",
                        itemStyle: {
                            color: i.legend_color,
                            fontSize: "12px",
                            fontFamily: "inherit"
                        }
                    },
                    title: {
                        enabled: !1,
                        style: {
                            color: i.super_color,
                            fontSize: "36px",
                            fontFamily: "inherit"
                        }
                    },
                    labels: {
                        style: {
                            color: t,
                            fontSize: "12px",
                            fontFamily: "inherit"
                        }
                    },
                    labelsForPieValue: {
                        style: {
                            color: a,
                            fontSize: "12px",
                            fontFamily: "inherit"
                        }
                    },
                    labelsForPieConnector: {
                        style: {
                            color: i.super_color,
                            fontSize: "12px",
                            fontFamily: "inherit"
                        }
                    },
                    axis: {
                        xAxis: {
                            enabled: !0,
                            lineWidth: 1,
                            lineColor: i.stroke,
                            lineStyle: "Solid",
                            labels: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            },
                            title: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            }
                        },
                        yAxis: {
                            enabled: !1,
                            lineWidth: 1,
                            lineColor: i.stroke,
                            lineStyle: "Solid",
                            labels: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            },
                            title: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            }
                        },
                        yOptionalAxis: {
                            enabled: !1,
                            lineWidth: 1,
                            lineColor: i.stroke,
                            lineStyle: "Solid",
                            labels: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            },
                            title: {
                                enabled: !0,
                                color: i.color,
                                fontSize: "12px",
                                fontFamily: "inherit"
                            }
                        }
                    }
                }
            }
            var a = {
                    dark: {
                        color: "rgba(255, 255, 255, 0.5)",
                        super_color: "rgba(255, 255, 255, 0.6)",
                        legend_color: "rgb(255, 255, 255)",
                        stroke: "rgba(255, 255, 255, 0.1)"
                    },
                    light: {
                        color: "#666666",
                        super_color: "rgba(0, 0, 0, 0.6)",
                        legend_color: "rgb(165, 165, 165)",
                        stroke: "#cccccc"
                    }
                },
                i = 2 == e.usedThemeId ? a.light : a.dark;
            return e.$watch("themeChangeFlag", function (t, r) {
                t != r && t && (i = 2 == e.usedThemeId ? a.light : a.dark)
            }), {
                getDefaultStyle: t
            }
        }])
        .factory("chartLegendPos", ["$rootScope", function (e) {
            return {
                top: {
                    layout: "horizontal",
                    align: "center",
                    verticalAlign: "top"
                },
                bottom: {
                    layout: "horizontal",
                    align: "center",
                    verticalAlign: "bottom"
                },
                right: {
                    layout: "vertical",
                    align: "right",
                    verticalAlign: "top"
                }
            }
        }])
        .factory("toggleNextBlock", ["$rootScope", function (e) {
            return function (e, t) {
                var a = angular.element(e.target);
                if (a)
                    if (a.hasClass("is-toggle") ? a.removeClass("is-toggle") : a.addClass("is-toggle"), "multi" == t) {
                        var i = a.siblings(".J-style-block");
                        i.each(function (e, t) {
                            $(t).animate({
                                height: "toggle"
                            }, 200)
                        })
                    } else {
                        var r = a.next(".J-style-block");
                        r.animate({
                            height: "toggle"
                        }, 200)
                    }
            }
        }])
        .directive("chartSetAxisStyle", e).directive("chartSetExtendStyle", t)
        .directive("chartNormalTextStyle", a), e.$inject = ["$rootScope", "$timeout", "chartLineDashStyle", "chartLineWidth", "chartFontSize", "chartFontFamily", "defaultChartStyleFactory"], t.$inject = ["$rootScope", "$timeout", "errHint", "chartLineDashStyle", "chartLineWidth", "chartFontSize", "chartFontFamily", "defaultChartStyleFactory", "chartLegendPos", "$jsTipTranslate"], a.$inject = ["$rootScope", "$timeout", "errHint", "chartFontSize", "chartFontFamily", "defaultChartStyleFactory", "chartLegendPos"]
    }(), 
    angular.module("BC.directives").directive("lineStyleSelect", e), e.$inject = ["$timeout"]
}(), 

angular
.module("BC.directives")
.directive("bdpProportionLine", bdpProportionLineDirective), bdpProportionLineDirective.$inject = ["$rootScope", "$timeout"],
    function () {
        angular
        .module("monospaced.elastic", []).constant("msdElasticConfig", {
            append: ""
        })
        .directive("msdElastic", ["$timeout", "$window", "msdElasticConfig", function (e, t, a) {
            "use strict";
            return {
                require: "ngModel",
                restrict: "A, C",
                link: function (i, r, n, o) {
                    function l() {
                        var e = _;
                        p = c, y = getComputedStyle(c), angular.forEach(k, function (t) {
                            e += t + ":" + y.getPropertyValue(t) + ";"
                        }), v.setAttribute("style", e)
                    }

                    function s() {
                        var t, a, r, n, o;
                        p !== c && l(), g || (g = !0, v.value = c.value + h, v.style.overflowY = c.style.overflowY, t = "" === c.style.height ? "auto" : parseInt(c.style.height, 10), a = getComputedStyle(c).getPropertyValue("width"), "px" === a.substr(a.length - 2, 2) && (n = parseInt(a, 10) - F.width, v.style.width = n + "px"), r = v.scrollHeight, r > L ? (r = L, o = "scroll") : r < C && (r = C), r += F.height, c.style.overflowY = o || "hidden", t !== r && (c.style.height = r + "px", i.$emit("elastic:resize", u)), e(function () {
                            g = !1
                        }, 1))
                    }

                    function d() {
                        g = !1, s()
                    }
                    var c = r[0],
                        u = r;
                    if ("TEXTAREA" === c.nodeName && t.getComputedStyle) {
                        u.css({
                            overflow: "hidden",
                            "overflow-y": "hidden",
                            "word-wrap": "break-word"
                        });
                        var f = c.value;
                        c.value = "", c.value = f;
                        var p, g, h = n.msdElastic ? n.msdElastic.replace(/\\n/g, "\n") : a.append,
                            m = angular.element(t),
                            _ = "position: absolute; top: -999px; right: auto; bottom: auto;left: 0; overflow: hidden; -webkit-box-sizing: content-box;-moz-box-sizing: content-box; box-sizing: content-box;min-height: 0 !important; height: 0 !important; padding: 0;word-wrap: break-word; border: 0;",
                            b = angular.element('<textarea aria-hidden="true" tabindex="-1" style="' + _ + '"/>').data("elastic", !0),
                            v = b[0],
                            y = getComputedStyle(c),
                            w = y.getPropertyValue("resize"),
                            D = "border-box" === y.getPropertyValue("box-sizing") || "border-box" === y.getPropertyValue("-moz-box-sizing") || "border-box" === y.getPropertyValue("-webkit-box-sizing"),
                            F = D ? {
                                width: parseInt(y.getPropertyValue("border-right-width"), 10) + parseInt(y.getPropertyValue("padding-right"), 10) + parseInt(y.getPropertyValue("padding-left"), 10) + parseInt(y.getPropertyValue("border-left-width"), 10),
                                height: parseInt(y.getPropertyValue("border-top-width"), 10) + parseInt(y.getPropertyValue("padding-top"), 10) + parseInt(y.getPropertyValue("padding-bottom"), 10) + parseInt(y.getPropertyValue("border-bottom-width"), 10)
                            } : {
                                width: 0,
                                height: 0
                            },
                            T = parseInt(y.getPropertyValue("min-height"), 10),
                            S = parseInt(y.getPropertyValue("height"), 10),
                            C = Math.max(T, S) - F.height,
                            L = parseInt(y.getPropertyValue("max-height"), 10),
                            k = ["font-family", "font-size", "font-weight", "font-style", "letter-spacing", "line-height", "text-transform", "word-spacing", "text-indent"];
                        u.data("elastic") || (L = L && L > 0 ? L : 9e4, v.parentNode !== document.body && angular.element(document.body).append(v), u.css({
                            resize: "none" === w || "vertical" === w ? "none" : "horizontal"
                        }).data("elastic", !0), c.oninput = "onpropertychange" in c && "oninput" in c ? c.onkeyup = s : s, m.bind("resize", d), i.$watch(function () {
                            return o.$modelValue
                        }, function (e) {
                            d()
                        }), i.$on("elastic:adjust", function () {
                            l(), d()
                        }), e(s), i.$on("$destroy", function () {
                            b.remove(), m.unbind("resize", d)
                        }))
                    }
                }
            }
        }])
    }(), 
    angular
    .module("BC.directives")
    .directive("projectList", ["$window", "$location", "$rootScope", "$stateParams", "commonService", "commonHttp", "$timeout", "ngDialog", "errHint", "$jsTipTranslate", "multipleProService", "$location", function (e, t, a, i, r, n, o, l, s, d, c, t) {
        return {
            restrict: "A",
            transclude: !0,
            templateUrl: "/static/js/common/tpl/nav_project_list.html",
            link: function (e, i) {
                function u() {
                    var i = t.path().split("proj")[0].replace(/\/$/, "");
                    if (0 === e.all_project_list.length) return t.path(i), a.last_dash_path = i || "/dash_edit", void localStorage.setItem("mc_location_path", i);
                    for (var r = "", n = "", o = "", l = 0, s = e.all_project_list.length; l < s; l++)
                        if (r = e.all_project_list[l].proj_id, !e.all_project_list[l].hidden && e.all_project_list[l].subs.length > 0 && (e.all_project_list[l].subs.map(function (e) {
                                n || e.hidden || (n = e.dsh_id)
                            }), n)) {
                            o = e.all_project_list[l].rule_id;
                            break
                        }
                    o ? (e.selected.dsh_id_type = n + o, i += "/" + r + "/" + n + "/" + o) : n ? (e.selected.dsh_id_type = n, i += "/" + r + "/" + n) : (e.selected.dsh_id_type = "", i += "/" + r + "/", e.noDashes = !0), e.selected.proj_id = r || "", e.selected.dsh_id = n || "", t.path(i), a.last_dash_path = i || "/dash_edit", localStorage.setItem("mc_location_path", i)
                }
                var f = t.path(),
                    p = f.indexOf("data_screen") > -1,
                    g = p ? 1 : null,
                    h = $('<div class="tooltip right tooltip-bg-white bdp-tips label-comment-tooltip J_file_tooltip"></div>'),
                    m = $('<div class="tooltip-inner"></div>'),
                    _ = $('<div class="box"></div>').appendTo(m);
                h.append(m), 
                e.showTooltip = function (e, t) {
                    var a = "zh" == bdpChart.language ? {
                        name: "名称",
                        originName: "原名",
                        label: "标签",
                        comment: "备注",
                        sharedFrom: "分享自",
                        allocatedFrom: "分配自"
                    } : {
                        name: "Name",
                        originName: "Original",
                        label: "Label",
                        comment: "Remark",
                        sharedFrom: "Shared from",
                        allocatedFrom: "Allocated by"
                    };
                    if (t.stopPropagation(), e.over_handler_more = !0, _.empty(), e.name) {
                        var i = '<div class="tooltip-block"><span>' + a.name + "</span><span>" + e.name + "</span></div>";
                        _.append(i)
                    }
                    if (e.origin_name && e.origin_name != e.name) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.originName + "</span><span>" + e.origin_name + "</span></div>";
                        _.append(i)
                    }
                    if (e.label) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.label + "</span><span>" + e.label + "</span></div>";
                        _.append(i)
                    }
                    if (e.comment) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.comment + "</span><span>" + e.comment + "</span></div>";
                        _.append(i)
                    }
                    if (e.share_name) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.sharedFrom + "</span><span>" + e.share_name + "</span></div>";
                        _.append(i)
                    }
                    if (e.rule_user) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.allocatedFrom + "</span><span>" + e.rule_user + "</span></div>";
                        _.append(i)
                    }
                    if (e.owner_name) {
                        var i = '<div class="tooltip-block mt4"><span>' + a.sharedFrom + "</span><span>" + e.owner_name + "</span></div>";
                        _.append(i)
                    }
                    $("body").append(h);
                    var r = $(".J_file_tooltip"),
                        n = r.height(),
                        o = (t.currentTarget.getBoundingClientRect(), $(t.currentTarget)),
                        l = t.currentTarget.offsetWidth,
                        s = t.currentTarget.offsetHeight,
                        d = o.offset();
                    r.css({
                        top: d.top - Math.round((n + 16 - s) / 2),
                        left: l,
                        display: "block",
                        opacity: 1
                    })
                }, 
                e.hideTooltip = function (e, t) {
                    e.over_handler_more = !1, $(".J_file_tooltip").remove()
                }, 
                e.getProName = function (t, a) {
                    l.open({
                        template: "/static/partials/dialogTemplates/edit-project.html",
                        className: "ngdialog-theme-default ngDialog-width-360",
                        scope: e,
                        controller: ["$scope", function (e) {
                            e.editData = {
                                name: t.name
                            }, e.editProject = function (i) {
                                var n = t.proj_id,
                                    o = angular.copy(a);
                                if (!i) return void s(e.tips["dash.projectNameRequired"]);
                                for (var l = 0, d = o.length; l < d; l++) {
                                    var c = o[l];
                                    if ("project" == c.attribute && c.name == i && c.proj_id != n) return void s(e.tips["dash.duplicateProjectName"])
                                }
                                r.project.modify(n, i).success(function (a) {
                                    0 == a.status && (t.name = i, e.closeThisDialog())
                                })
                            }
                        }]
                    })
                }, 
                e.dashboard = {
                    edit: function (t, a, i) {
                        c.findItem(a.dsh_id, e.project_list);
                        e.editDashData = {
                            saveEdit: e.dashboard.save,
                            dsh_id: a.dsh_id,
                            proj_id: a.parent.proj_id,
                            name: a.name,
                            label: a.label,
                            comment: a.comment,
                            extra_data: {
                                project: a.parent
                            },
                            type: "edit"
                        }, l.open({
                            templateUrl: "/static/partials/dialogTemplates/create-dashboard.html",
                            scope: e,
                            className: "ngdialog-theme-default ngdialog-small",
                            controller: "createDashboardController",
                            preCloseCallback: function () {
                                e.editDashData = null
                            }
                        })
                    },
                    save: function (t, a) {
                        if (t.name.length > 100) return void s(e.tips["dash.dashNameLessThan100"]);
                        var i = t.name,
                            n = t.dsh_id,
                            o = t.label || "",
                            l = t.comment || "",
                            d = t.extra_data.project;
                        if (!i) return void s(e.tips["dash.dashNameRequired"]);
                        for (var c = 0, u = d.subs.length; c < u; c++)
                            if ("dashboard" === d.subs[c].attribute && d.subs[c].name == i && d.subs[c].dsh_id != n) return void s(e.tips["dash.duplicateDashName"]);
                        var f = {
                            dsh_id: n,
                            data: angular.toJson({
                                name: i,
                                label: o,
                                comment: l,
                                meta: {}
                            })
                        };
                        r.dashboard.modify(f).success(function () {
                            for (var t = 0, r = d.subs.length; t < r; t++)
                                if (d.subs[t].dsh_id === n) {
                                    d.subs[t].name = i, d.subs[t].label = o, d.subs[t].comment = l;
                                    break
                                }
                            e.project_dsh_label_list = [], angular.forEach(e.all_project_list, function (t) {
                                angular.forEach(t.subs, function (t) {
                                    t.label && e.project_dsh_label_list.indexOf(t.label) < 0 && e.project_dsh_label_list.push(t.label)
                                })
                            }), e.selected.dsh_id === n && $(".dash-title").find("h2").text(i), a && a()
                        })
                    }
                }, 
                e.hitLabelList = {
                    show: !1,
                    list: []
                }, 
                e.hitExistDashLabel = function (t) {
                    e.hitLabelList.list = [], e.hitLabelList.show = !0, t ? angular.forEach(e.project_dsh_label_list, function (a) {
                        a.toLowerCase().indexOf(t.toLowerCase()) >= 0 && e.hitLabelList.list.push(a)
                    }) : e.hitLabelList.list = angular.copy(e.project_dsh_label_list)
                }, 
                e.delProject = function (t, a, i) {
                    i && i.stopPropagation();
                    var n = a.proj_id,
                        d = a.name;
                    l.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: e.tips["dash.confirmDelProject"] + ": " + d + " ?"
                        }
                    }).then(function () {
                        r.project.del(n).then(function (t) {
                            "0" == t.status ? (e.project_list.forEach(function (e, t, a) {
                                c.deleteItem(e, n, a, t)
                            }), e.all_project_list.forEach(function (e, t, a) {
                                c.deleteItem(e, n, a, t)
                            }), n == e.selected.proj_id && (e.selected.proj_id = "", e.selected.dsh_id = "", o(function () {
                                0 === e.all_project_list.length ? (e.all_project_list.length = 0, e.noDashes = !1, e.noFolders = !0, u()) : (e.noDashes = !1, u())
                            }, 0))) : s(Number(t.status))
                        })
                    })
                }, 
                e.delDashboard = function (t, a, i) {
                    var n = a.dsh_id,
                        o = a.name;
                    l.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: e.tips["dash.confirmDelDash"] + ": " + o + " ?"
                        }
                    }).then(function () {
                        r.dashboard.del(n).success(function (a) {
                            "0" == a.status ? (i.splice(t, 1),
                                n === e.selected.dsh_id && (e.selected.dsh_id = "", u()), e.project_dsh_label_list = [], angular.forEach(e.all_project_list, function (t) {
                                    angular.forEach(t.subs, function (t) {
                                        t.label && e.project_dsh_label_list.indexOf(t.label) < 0 && e.project_dsh_label_list.push(t.label)
                                    })
                                })) : s(Number(a.status))
                        })
                    })
                }, 
                e.moveDashboard = {
                    open: function (t) {
                        l.open({
                            template: "/static/partials/dialogTemplates/move-project-dashboard.html",
                            className: "ngdialog-theme-default ngDialog-width-360",
                            scope: e,
                            data: {
                                attribute: "dashboard",
                                move_item: t,
                                dash_name: t.name,
                                proj_list: e.project_list,
                                cur_proj_id: t.parentId,
                                save: e.moveDashboard.save
                            }
                        })
                    },
                    save: function (t) {
                        if (e.global.clickComplete = !1, !t.cur_proj_id) return e.global.clickComplete = !0, s(e.tips["dash.canNotMoveToRoot"]), !1;
                        for (var a = t.proj_list, i = 0; i < a.length; i++)
                            if (a[i].dsh_id == t.dsh_id)
                                for (var r = 0; r < a[i].subs.length; r++)
                                    if (a[i].subs[r].name === t.dash_new_name) return s(e.tips["dash.duplicateDashName"]), e.global.clickComplete = !0, !1;
                        if (!t.select_item) return e.global.clickComplete = !0, l.closeAll(), !1;
                        var o = angular.copy(t.select_item),
                            d = angular.copy(t.move_item);
                        delete d.parent, o.subs.map(function (e) {
                            delete e.parent
                        });
                        var c = angular.toJson(o.subs.map(function (e) {
                            return e.dsh_id || e.proj_id
                        }).concat(d.dsh_id));
                        n.post("/api/dashboard/move", {
                            dsh_id: d.dsh_id,
                            sort: c,
                            parent_id: o.proj_id,
                            type: o.type,
                            rule_id: d.rule_id || ""
                        }).then(function (t) {
                            e.global.clickComplete = !0, 0 == t.status && (l.closeAll(), e.getTree())
                        })
                    }
                }, 
                e.moveProject = {
                    open: function (t) {
                        var a = t.proj_id,
                            i = angular.copy(e.project_list),
                            r = function (e) {
                                for (var t = 0, i = e.length; t < i; t++) {
                                    var n = e[t];
                                    if (a === n.proj_id) {
                                        e.splice(t, 1);
                                        break
                                    }
                                    n.subs && n.subs.length > 0 && r(n.subs)
                                }
                            };
                        r(i), l.open({
                            template: "/static/partials/dialogTemplates/move-project-dashboard.html",
                            className: "ngdialog-theme-default ngDialog-width-360",
                            scope: e,
                            data: {
                                attribute: "project",
                                proj_list: i,
                                dash_name: t.name,
                                dash_new_name: t.name,
                                dash_id: t.dsh_id,
                                source_proj_id: t.proj_id,
                                cur_proj_id: t.parent_id,
                                save: e.moveProject.save
                            }
                        })
                    },
                    save: function (t) {
                        e.global.clickComplete = !1;
                        for (var a = t.proj_list, i = 0; i < a.length; i++)
                            if (a[i].proj_id == t.cur_proj_id)
                                for (var r = 0; r < a[i].subs.length; r++)
                                    if (a[i].subs[r].name === t.dash_new_name) return s(e.tips["dash.duplicateDashName"]), e.global.clickComplete = !0, !1;
                        if (t.cur_proj_id) {
                            if (!t.select_item) return e.global.clickComplete = !0, l.closeAll(), !1
                        } else t.select_item = {
                            subs: t.proj_list
                        };
                        var o = angular.copy(t.select_item),
                            d = c.findItem(t.source_proj_id, e.project_list);
                        d && delete d.parent, c.delPar(o.subs), c.delPar(d.subs);
                        var u = o.subs.concat(d).map(function (e) {
                            var t = {};
                            return t.proj_id = e.proj_id || e.dsh_id, t.type = e.type || 0, t
                        });
                        n.post("/api/project/move", {
                            proj_id: t.source_proj_id,
                            sort: angular.toJson(u),
                            parent_id: o.proj_id,
                            type: o.type
                        }).then(function (t) {
                            e.global.clickComplete = !0, 0 == t.status && (l.closeAll(), e.getTree())
                        })
                    }
                }, 
                e.copyDashboard = {
                    originProjId: "",
                    open: function (t) {
                        l.open({
                            template: "/static/partials/dialogTemplates/copy-dashboard.html",
                            className: "ngdialog-theme-default ngDialog-width-360",
                            scope: e,
                            data: {
                                proj_list: e.project_list,
                                dash_name: t.name,
                                dash_new_name: t.name,
                                dash_id: t.dsh_id,
                                cur_proj_id: t.parentId,
                                save: e.copyDashboard.save
                            }
                        })
                    },
                    save: function (t) {
                        if (e.global.clickComplete = !1, !t.cur_proj_id) return e.global.clickComplete = !0, s(e.tips["dash.canNotCopyToRoot"]), !1;
                        for (var i = t.proj_list, r = 0; r < i.length; r++)
                            if (i[r].proj_id == t.cur_proj_id)
                                for (var o = 0; o < i[r].subs.length; o++)
                                    if (i[r].subs[o].name === t.dash_new_name) return s(e.tips["dash.duplicateDashName"]), e.global.clickComplete = !0, !1;
                        n.post("/api/dashboard/copy", {
                            to_proj_id: t.cur_proj_id,
                            dsh_id: t.dash_id,
                            dsh_name: t.dash_new_name,
                            ws_id: a.wsId || "",
                            category: g
                        }).then(function (t) {
                            e.global.clickComplete = !0, 0 == t.status && (l.closeAll(), e.getTree())
                        })
                    },
                    handlerMorePos: function (t) {
                        var a = $(t.target).offset(),
                            i = angular.element("body").height(),
                            r = a.left - 60,
                            n = {};
                        n = i - t.clientY > 176 ? {
                            top: a.top + 20,
                            left: r,
                            bottom: "inherit"
                        } : {
                            bottom: i - t.clientY,
                            left: r,
                            top: "inherit"
                        }, e.moreListPosStyle = n, angular.element(".label-comment-tooltip").css({
                            display: "none"
                        })
                    }
                }, 
                e.shareCtrl = {
                    open: function (t, a) {
                        l.open({
                            template: "/static/partials/share-dashboard.html",
                            className: "ngdialog-theme-default share-dashboard",
                            scope: e,
                            data: {
                                type: t,
                                fileId: a
                            },
                            controller: "shareProjDashController"
                        })
                    }
                }, d(["dash.projectNameRequired", "dash.duplicateProjectName", "dash.dashNameLessThan100", "dash.dashNameRequired", "dash.duplicateDashName", "dash.confirmDelProject", "dash.confirmDelDash", "dash.copyDashFolderErr", "dash.dashboardLabelLimit", "dash.dashboardCommentLimit", "dash.folderLevelExceeded", "dash.noDragToRuleFolder", "dash.noDragRuleFolderToOthers", "dash.canNotMoveToRoot", "dash.canNotCopyToRoot"], e)
            },
            controller: ["$scope", "$rootScope", "$location", "multipleProService", function (e, t, a, i) {
                var n = a.path(),
                    o = n.indexOf("data_screen") > -1,
                    l = o ? 1 : null;
                e.nodeCollapseHandle = function (e, t) {
                    e && e.stopPropagation(), t.nodeCollapse = !t.nodeCollapse
                }, e.checkSortWithHidden = function (e, t, a) {
                    for (var i = -1, r = -1, n = !1, o = a - 1; o >= 0; o--)
                        if (!e[o].hidden) {
                            i = o;
                            break
                        }
                    for (var l = a + 1; l < e.length; l++)
                        if (!e[l].hidden) {
                            r = l;
                            break
                        }
                    if (i >= 0 && t > i && a > i) {
                        for (var s = i + 1; s < t; s++)
                            if (!e[s].hidden) {
                                n = !0;
                                break
                            }
                        if (!n) return !1
                    }
                    if (t < r && a < r) {
                        for (var d = t + 1; d < r; d++)
                            if (!e[d].hidden) {
                                n = !0;
                                break
                            }
                        if (!n) return !1
                    }
                    return !0
                }, e.resetSortPosWithHidden = function (e, t, a, i) {
                    var r = -1,
                        n = -1,
                        o = !1;
                    if (a == i) return t;
                    for (var l = i - 1; l >= 0; l--)
                        if (!t[l].hidden) {
                            r = l;
                            break
                        }
                    for (var s = i + 1; s < t.length; s++)
                        if (!t[s].hidden) {
                            n = s;
                            break
                        }
                    return r >= 0 && r + 1 != i && (t.splice(i, 1), t.splice(r + 1, 0, e), o = !0), r < 0 && (t.splice(i, 1), t.splice(0, 0, e), o = !0), !o && n < 0 && (t.splice(i, 1), t.push(e)), t
                }, e.$watchCollection("all_project_list", function (t) {
                    t && (e.project_list = [], t.forEach(function (t, a) {
                        0 == t.type && 1 !== t.property && (t.hidden = 0, e.project_list.push(t))
                    }))
                }), e.navListOption = {
                    maxDeep: 5,
                    accept: function (t, a, i) {
                        var r = t.$modelValue,
                            n = (a.$modelValue, r.attribute),
                            o = "project" == n,
                            l = o ? "proj_id" : "dsh_id";
                        return e.acceptParam = {
                            type: r.type || 0
                        }, e.acceptParam[l] = r[l], o || (e.acceptParam.rule_id = r.parent.rule_id), !0
                    },
                    dragStop: function (t) {
                        if (!e.acceptParam) return !1;
                        var a = t.dest.nodesScope.$parent.$modelValue,
                            n = a ? a.proj_id : "",
                            o = t.source.nodeScope.$modelValue,
                            d = "project" == o.attribute,
                            c = d ? Math.max(1, t.source.nodeScope.maxSubDepth()) : 0,
                            u = t.dest.nodesScope,
                            f = u.$modelValue,
                            d = "project" == o.attribute,
                            p = d ? "proj_id" : "dsh_id",
                            g = !o.parent && !n || o.parent && n && n == o.parent.proj_id;
                        if (0 !== o.type && !g) return s(e.tips["dash.noDragRuleFolderToOthers"]), !1;
                        if (!d && !n) return !1;
                        if (a && 0 !== a.type && o.parent && o.parent.proj_id !== a.proj_id) return s(e.tips["dash.noDragToRuleFolder"]), !1;
                        if (a) {
                            var h = a.proj_id;
                            if (1 == t.dest.nodesScope.projFolding[h + a.type]) return !1
                        }
                        if (!g && a && a.deep + c > 4) return s(e.tips["dash.folderLevelExceeded"]), !1;
                        if (!g)
                            if (d)
                                for (var m = f.length - 1; m >= 0; m--) {
                                    var _ = f[m];
                                    if ("project" === _.attribute && 0 == _.type && 1 != _.property && o.proj_id !== _.proj_id && o.name === _.name) return s(e.tips["dash.duplicateProjectName"]), !1
                                } else
                                    for (var m = f.length - 1; m >= 0; m--)
                                        if ("dashboard" === f[m].attribute && o.dsh_id !== f[m].dsh_id && o.name === f[m].name) return s(e.tips["dash.duplicateDashName"]), !1;
                        e.acceptParam.parent_id = n;
                        var b = f.map(function (e) {
                            var t = e.proj_id || e.dsh_id;
                            if (d) {
                                var a = {};
                                a[p] = t, a.type = e.type || 0
                            } else var a = t;
                            return a
                        });
                        e.acceptParam.sort = b, e.acceptParam.category = l, r[o.attribute].move(e.acceptParam).then(function (t) {
                            if ("0" != t.status) return void s(t.errstr);
                            i.initDeep([].concat(o), u.depth()), d || e.selected.dsh_id && o.dsh_id !== e.selected.dsh_id || n === o.parent.proj_id || (o.proj_id = e.selected.proj_id = n, o.parent = a)
                        })
                    },
                    beforeDrop: function (t) {
                        var a = t.dest.nodesScope.$parent.$modelValue,
                            i = a ? a.proj_id : "",
                            r = t.source.nodeScope.$modelValue,
                            n = "project" == r.attribute,
                            o = n ? Math.max(1, t.source.nodeScope.maxSubDepth()) : 0,
                            l = t.dest.nodesScope,
                            d = l.$modelValue,
                            c = !r.parent && !i || r.parent && i && i == r.parent.proj_id;
                        if (0 !== r.type && !c) return s(e.tips["dash.noDragRuleFolderToOthers"]), !1;
                        if (a && 0 !== a.type && r.parent && r.parent.proj_id !== a.proj_id) return s(e.tips["dash.noDragToRuleFolder"]), !1;
                        if (!n && !i) return !1;
                        if (a) {
                            var u = a.proj_id;
                            if (1 == t.dest.nodesScope.projFolding[u + a.type]) return !1
                        }
                        if (!c && a && a.deep + o > 4) return s(e.tips["dash.folderLevelExceeded"]), !1;
                        if (!c)
                            if (n)
                                for (var f = d.length - 1; f >= 0; f--) {
                                    var p = d[f];
                                    if ("project" === p.attribute && 0 == p.type && 1 != p.property && r.proj_id !== p.proj_id && r.name === p.name) return s(e.tips["dash.duplicateProjectName"]), !1
                                } else
                                    for (var f = d.length - 1; f >= 0; f--)
                                        if ("dashboard" === d[f].attribute && r.dsh_id !== d[f].dsh_id && r.name === d[f].name) return s(e.tips["dash.duplicateDashName"]), !1
                    }
                }
            }]
        }
    }])
    .controller("shareProjDashController", ["$scope", "ngDialog", "$rootScope", "commonService", "errHint", "$jsTipTranslate", function (e, t, a, i, r, n) {
        function o(t) {
            function a(e) {
                angular.forEach(e, function (e) {
                    e.shared ? (e.checked = !0, g.push(e.group_id)) : h.push(e.group_id), e.group_list && e.group_list.length > 0 && a(e.group_list)
                })
            }
            g = [], h = [], a(t), e.shareGroupNum = g.length
        }

        function l() {
            y = {}, e.commitData = {
                share_user: [],
                cancel_user: [],
                share_group: [],
                cancel_group: []
            }, f = [], p = [], g = [], h = [], "dashboard" == w ? (y.type = 0, y.dsh_id = D) : (y.type = 1, y.proj_id = D), i.share.getList(y).success(function (t) {
                0 == t.status && (e.userList = t.result, angular.forEach(e.userList.share_user, function (e, t) {
                    e.checked = !0, f.push(e.user_id)
                }), angular.forEach(e.userList.other_user, function (e, t) {
                    e.checked = !1, p.push(e.user_id)
                }), 0 == e.userList.other_user.length ? (e.shareView.select.all_user = !0, e.shareView.select.user_check = "all") : 0 == e.userList.share_user.length ? (e.shareView.select.all_user = !1, e.shareView.select.user_check = "uncheck") : (e.shareView.select.all_user = !1, e.shareView.select.user_check = "uncheckall"), o(e.userList.group_tree), e.shareUserNum = f.length)
            })
        }

        function s(t) {
            "user" == t && (e.shareView.select.all_user ? (angular.forEach(e.userList.share_user, function (e) {
                e.checked = !0
            }), angular.forEach(e.userList.other_user, function (e) {
                e.checked = !0
            })) : (angular.forEach(e.userList.share_user, function (e) {
                e.checked = !1
            }), angular.forEach(e.userList.other_user, function (e) {
                e.checked = !1
            })), c())
        }

        function d() {
            a.pageLoading || (a.pageLoading = !0, y.share_user = m.join(","), y.cancel_user = _.join(","), y.share_group = b.join(","), y.cancel_group = v.join(","), i.share.share(y).success(function (i) {
                a.pageLoading = !1, r(e.tips["chart.saveSuccess"]), 0 == i.status && (l(), e.commitData = {
                    share_user: [],
                    cancel_user: [],
                    share_group: [],
                    cancel_group: []
                }, m = [], _ = [], b = [], v = []), t.closeAll()
            }))
        }

        function c() {
            m = [], _ = [];
            var t = e.userList.share_user,
                a = e.userList.other_user,
                i = 0;
            angular.forEach(t, function (e) {
                e.checked ? i += 1 : _.push(e.user_id)
            }), angular.forEach(a, function (e) {
                e.checked && (m.push(e.user_id), i += 1)
            }), e.shareUserNum = i;
            var r = e.shareView.select;
            0 == _.length && m.length == a.length ? (r.user_check = "all", e.shareView.select.all_user = !0) : 0 == m.length && _.length == t.length ? (r.user_check = "uncheck", e.shareView.select.all_user = !1) : (r.user_check = "uncheckall", e.shareView.select.all_user = !1), e.commitData.share_user = m, e.commitData.cancel_user = _
        }

        function u(t) {
            function a(e) {
                angular.forEach(e, function (e) {
                    t.group_id == e.group_id && (e.checked = t.checked), e.checked ? (i++, g.indexOf(e.group_id) < 0 && b.push(e.group_id)) : h.indexOf(e.group_id) < 0 && v.push(e.group_id), e.group_list && e.group_list.length > 0 && a(e.group_list)
                })
            }
            var i = 0;
            b = [], v = [], a(e.userList.group_tree), e.commitData.share_group = b, e.commitData.cancel_group = v, e.shareGroupNum = i
        }
        var f = [],
            p = [],
            g = [],
            h = [],
            m = [],
            _ = [],
            b = [],
            v = [],
            y = {},
            w = e.ngDialogData.type,
            D = e.ngDialogData.fileId;
        e.shareView = {
            select: {
                all_user: !1
            },
            sharetab: "user"
        }, 
        e.commitData = {}, 
        e.shareUserNum = 0, 
        e.shareGroupNum = 0, 
        a.pageLoading = !1, 
        e.checkUserFun = c, 
        e.checkGroupFun = u, 
        e.checkAllFun = s, 
        e.commitShare = d, 
        e.closeDialog = function () {
            t.closeAll()
        }, 
        l(), 
        n(["chart.saveSuccess"], e)
    }])
    .directive("navProjectList", ["", function () {
        return {
            restrict: "A",
            templateUrl: "/static/partials/chart_innerfilter_level.html",
            scope: {},
            link: function () {
                $scope.listOption = {}
            }
        }
    }])
    .directive("navProjectDropDown", ["$timeout", function (e) {
        return {
            restrict: "A",
            scope: {
                dropDownFlag: "="
            },
            link: function (t) {
                t.$watch("dropDownFlag", function (a, i) {
                    if (a !== i && 1 == a) {
                        var r = angular.element(".J-scroll-project").scrollTop();
                        e(function () {
                            angular.element(".J-scroll-project").on("scroll.projectfolder", function (a) {
                                Math.abs(r - $(a.target).scrollTop()) > 8 && (t.dropDownFlag = !1, e(function () {
                                    t.$digest()
                                }, 0))
                            })
                        }, 0)
                    } else a !== i && 0 == a && angular.element(".J-scroll-project").off("scroll.projectfolder")
                }), t.$on("project-move-fire", function () {
                    t.dropDownFlag = !1
                })
            }
        }
    }]), 
    angular.module("BC.directives")
    .directive("searchChart", ["commonService", "$rootScope", "$timeout", "pendingRequests", "multipleProService", function (e, t, a, i, r) {
        return {
            link: function (r, n, o) {
                function l() {
                    r.search_chart_list = [], r.search_dashboard_list = [], r.search_project_list = [], r.old_search_chart_list = [], r.old_search_dashboard_list = [], r.old_search_project_list = []
                }

                function s(e, t, a) {
                    var i = 0,
                        n = r.all_project_list,
                        o = (n.length, 0),
                        l = function (t, a) {
                            for (var r = 0; r < t.length; r++) {
                                var n = t[r];
                                if ("project" === n.attribute) {
                                    if (n.proj_id === e) {
                                        i = null === a ? r : a;
                                        break
                                    }
                                    n.subs && n.subs.length > 0 && l(n.subs, null !== a ? a : r)
                                }
                            }
                        };
                    l(n, null), $(".own-project-list > .project-item").each(function (e, t) {
                        e < i && (o += $(t).height())
                    }), o += 0, scrollToTargetPos($(".project-list"), o)
                }

                function d(e, t) {
                    e.parent_id && (r.projFolding[e.parent_id + t] = 0, d(e.parent, t))
                }
                var c = [];
                c = bdp.bdpPageStatus.isUnderDataScreen() ? [1] : [0, 2],
                l(), 
                r.setItemFullPath = function () {
                    function e(e, t) {
                        angular.forEach(e, function (e, a) {
                            var i = [];
                            e.parents.forEach(function (e) {
                                e.name && i.push(e.name)
                            }), "chart" === t ? (i.push(e.proj_name), i.push(e.dsh_name)) : "dashboard" === t && i.push(e.proj_name), e.path = i.join("/")
                        })
                    }
                    e(r.search_chart_list, "chart"), e(r.search_dashboard_list, "dashboard"), e(r.search_project_list, "project"), e(r.old_search_chart_list, "chart"), e(r.old_search_dashboard_list, "dashboard"), e(r.old_search_project_list, "project")
                }, 
                r.getFirstThreeSearchList = function () {
                    r.search_chart_list = r.old_search_chart_list.slice(0, 3), r.search_dashboard_list = r.old_search_dashboard_list.slice(0, 3), r.search_project_list = r.old_search_project_list.slice(0, 3)
                }, 
                r.getMoreSearchList = function (e, t) {
                    switch (t) {
                        case "chart":
                            r.search_chart_list = r.old_search_chart_list.slice(0);
                            break;
                        case "dashboard":
                            r.search_dashboard_list = r.old_search_dashboard_list.slice(0);
                            break;
                        case "project":
                            r.search_project_list = r.old_search_project_list.slice(0)
                    }
                }, 
                r.getFoldUpSearchList = function (e, t) {
                    switch (t) {
                        case "chart":
                            r.search_chart_list = r.old_search_chart_list.slice(0, 3);
                            break;
                        case "dashboard":
                            r.search_dashboard_list = r.old_search_dashboard_list.slice(0, 3);
                            break;
                        case "project":
                            r.search_project_list = r.old_search_project_list.slice(0, 3)
                    }
                }, 
                r.showSearchBoxLoading = !1, 
                r.showSearchBar = function () {
                    r.showSearchBox = !r.showSearchBox, 
                    r.showSearchBox && (a(function () {
                        angular.element(".dash-search-input").focus()
                    }, 0), 
                    r.search_name = "",
                    l(), 
                    $(document).on("click.showSearchBox", function (e) {
                        if ($(e.target).closest(n).length > 0) return !1;
                        r.showSearchBox = !1, r.$$phase || r.$apply(), $(document).off("click.showSearchBox")
                    }))
                };
                var u = null;
                r.onSearchKeyUp = function (e) {
                    13 == e.keyCode ? r.search() : (clearTimeout(u), r.search_name ? u = setTimeout(function () {
                        r.search()
                    }, 200) : r.search_chart_list = [])
                };
                var f = 0;
                r.search = function () {
                    if (r.search_name) {
                        var a = f = +new Date;
                        ! function (a) {
                            i.cancelOne("/api/chart/search"), r.showSearchBoxLoading = !0, l(), e.chart.search({
                                ct_name: r.search_name,
                                is_tpl: "dash_tpl" === t.view ? 1 : 0,
                                categories: angular.toJson(c)
                            }).then(function (e) {
                                r.showSearchBoxLoading = !1, a < f || e && (r.old_search_chart_list = e.chart, r.old_search_dashboard_list = e.dsh, r.old_search_project_list = e.proj, r.search_result_empty = 0 === r.old_search_project_list.length && 0 === r.old_search_dashboard_list.length && 0 === r.old_search_chart_list.length, r.getFirstThreeSearchList(), r.setItemFullPath())
                            })
                        }(a)
                    }
                }, 
                r.jumpToSearchChart = function (e) {
                    if (e) {
                        var a = e.proj_id,
                            i = e.dsh_id,
                            n = e.rule_id || "",
                            o = e.ct_id,
                            l = e.share_user_id || "",
                            c = e.type,
                            u = a == r.selected.proj_id && r.selected.dsh_id == i && t.global.rule_id == n,
                            f = r.getProjectById(a, n, l);
                        f && (! function () {
                            if (u) r.$broadcast("scrollToChart", o);
                            else {
                                r.tapDashboard({
                                    dsh_id: i,
                                    parent: f
                                }), r.$emit("onSearch", o);
                                var e = a + c;
                                r.projFolding[e] = 0, d(f, c), localStorage.setItem("project_folding", angular.toJson(r.projFolding))
                            }
                        }(), s(a, c, i), r.showSearchBox = !1)
                    }
                }, 
                r.jumpToSearchDashboard = function (e) {
                    if (e) {
                        var a = e.proj_id,
                            i = e.dsh_id,
                            n = e.rule_id || "",
                            o = e.share_user_id || "",
                            l = e.type,
                            c = a == r.selected.proj_id && r.selected.dsh_id == i && t.global.rule_id == n,
                            u = r.getProjectById(a, n, o);
                        u && (! function () {
                            if (!c) {
                                r.tapDashboard({
                                    dsh_id: i,
                                    parent: u
                                });
                                var e = a + l;
                                r.projFolding[e] = 0, d(u, l), localStorage.setItem("project_folding", angular.toJson(r.projFolding))
                            }
                        }(), s(a, l, i), r.showSearchBox = !1)
                    }
                }, 
                r.jumpToSearchProject = function (e) {
                    if (e) {
                        var t = e.proj_id,
                            a = "",
                            i = e.rule_id || "",
                            n = e.share_user_id || "",
                            o = e.type,
                            l = t == r.selected.proj_id,
                            c = r.getProjectById(t, i, n);
                        c && (c.subs.length > 0 && (a = c.subs[0].dsh_id), function () {
                            if (!l) {
                                a && r.tapDashboard({
                                    dsh_id: a,
                                    parent: c
                                });
                                var e = t + o;
                                r.projFolding[e] = 0, d(c, o), localStorage.setItem("project_folding", angular.toJson(r.projFolding))
                            }
                        }(), s(t, o, a), r.showSearchBox = !1)
                    }
                }
            }
        }
    }]),
    function () {
        angular.module("BC.directives")
        .directive("dashFilter", ["$timeout", "commonService", "$rootScope", "commonHttp", "$filter", "ngDialog", "errHint", "$stateParams", "AdvfilterOperatorMap", "AdvfilterOperatorList", "numberInnerFilterMap", "operatorHelpLink", "formulaKeyMap", "setAdvanceAggregatorName", "$jsTipTranslate", "dateTimeByHalfHour", function (e, t, a, i, r, n, o, l, s, d, c, u, f, p, g, h) {
            return {
                restrict: "A",
                templateUrl: "/static/js/dashboard/tpl/dash-filter.html",
                replace: !0,
                scope: {
                    chartOptions: "=",
                    opts: "=",
                    advDateList: "="
                },
                link: function (t, r, f) {
                    function m() {
                        t.isActive = !1, angular.forEach(t.filter_list_inner, function (e) {
                            void 0 != e.range && e.range.length > 0 && (t.isActive = !0)
                        })
                    }

                    function _(e, a) {
                        var i = e.fid,
                            r = {
                                right: 0,
                                top: 26
                            },
                            n = bdp.utils.getArrayTextWidth(a, e);
                        r.width = n, t.adjustWidth[i] = r
                    }
                    t.dateTimeByHalfHour = h, 
                    t.$on("fire-mouseleave-item-event", 
                    function () {
                        t.show_dash_filter = !1
                    }), 
                    t.adjustWidth = {}, 
                    t.fullscreen = !!f.fullscreen, 
                    t.goHelp = function (e) {
                        u(e)
                    };
                    var b = function (e) {
                            if (t.chartOptions.read_cache = !1, "C500" == t.opts.meta.type) {
                                var a = {};
                                t.filter_list_inner.forEach(function (e) {
                                    a[e.ct_id] || (a[e.ct_id] = []), a[e.ct_id].push(e)
                                }), t.chartOptions.optional.filter_list_map = a
                            } else t.chartOptions.optional.filter_list = t.filter_list_inner;
                            t.chartOptions.optional.filter_last_mod = e
                        },
                        v = !1,
                        y = 0,
                        w = 0,
                        D = 0;
                    t.handleFilterPos = function (e) {
                        t.show_dash_filter = !t.show_dash_filter;
                        var a = $(e.target),
                            i = a.parent(),
                            r = i.find(".J_filterLayer");
                        r.removeClass("ng-hide");
                        var n = i.width(),
                            o = $(".J_dash_sidebar").width(),
                            l = document.getElementById(t.opts.meta.ct_id),
                            s = r.offset().left;
                        D = l.style.left, D != w && (v = !1), v || (y = s <= o ? n - r.width() : -11, v = !0), r.css({
                            right: y
                        }), w = D
                    }, 
                    t.conditionList = [], t.operatorMap = {
                        1: "等于",
                        2: "不等于",
                        3: "包含",
                        4: "不包含",
                        5: "开头包含",
                        6: "结尾包含"
                    }, 
                    t.operatorMap = s, t.AdvfilterOperatorList = d, t.numberInnerFilterMap = c, t.new_condition = {
                        operator: "",
                        content: ""
                    };
                    var F;
                    t.toggleCmpDropdown = function (e, a) {
                        t.show_options[a.uniq_id] = !t.show_options[a.uniq_id]
                    }, 
                    t.compareDateChange = function (e, a) {
                        if (t.dateRangShow = !t.dateRangShow, "default" == e) a.compareType = "default", a.customName = void 0, t.chartOptions.optional.filter_cmp_date_range = [], t.show_options[a.uniq_id] = !1;
                        else if ("custom" == e) {
                            t.show_options[a.uniq_id] = !1;
                            var i, r, o, l = [];
                            t.chartOptions.optional && (o = t.chartOptions.optional.filter_cmp_date_range), o && o[0] ? (i = o[0].compare_date_range.st, r = o[0].compare_date_range.et) : (i = (new Date).getTime(), r = (new Date).getTime());
                            var s, d;
                            s = isNaN(i) ? i.split(" ")[1] : "00:00:00", d = isNaN(r) ? r.split(" ")[1] : "23:59:59", l.push(i, r, s, d), F = n.open({
                                template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                data: {
                                    range: l,
                                    uniq_id: parseInt(a.uniq_id)
                                },
                                scope: t
                            })
                        }
                    }, 
                    t.getCmpDefaultName = function (e) {
                        return t.tips["chart.compareDate"] + "(" + e.name + " - " + e.aggregatorName + ")"
                    }, 
                    t.addNewCondition = function (e, a) {
                        if (void 0 == a || !a.hasOwnProperty("operator") || "" == a.content) return void o(t.tips["filter.inputCompleteCondition"]);
                        t.strFilter.conditionList.push({
                            name: e,
                            operator: a.operator,
                            content: a.content
                        }), angular.element(".new-condition").val(""), angular.element(".condition-select").val(""), t.new_condition = {
                            operator: "",
                            content: ""
                        }
                    }, 
                    t.removeCondition = function (e) {
                        t.strFilter.conditionList.splice(e, 1)
                    }, 
                    t.saveDateRange = function (e, a) {
                        var i = e.sDate ? e.sDate + " " + e.sDateHour : null,
                            r = e.eDate ? e.eDate + " " + e.eDateHour : null;
                        if (!i && !r) return o(t.tips["chart.dateRangeRequired"]), !1;
                        if (i && r) {
                            if (!e.sDateHour) return o(t.tips["filter.startDateErr2"]), !1;
                            if (!e.eDateHour) return o(t.tips["filter.endDateErr2"]), !1;
                            if (new Date(i) - new Date(r) > 0) return o(t.tips["filter.dateRangeInvalid"]), !1
                        } else {
                            if (i && !r && !e.sDateHour) return o(t.tips["filter.startDateErr2"]), !1;
                            if (!i && r && !e.eDateHour) return o(t.tips["filter.endDateErr2"]), !1
                        }
                        if (a) {
                            t.chartOptions.optional.filter_cmp_date_range = [{
                                uniq_id: parseInt(a),
                                compare_date_range: {
                                    st: i,
                                    et: r
                                }
                            }];
                            var l = "zh" === bdpChart.language ? "不限" : "Unbounded",
                                s = /00\:00\:00$/,
                                d = /23\:59\:59$/;
                            t.opts.meta.compareDateFilter.forEach(function (e) {
                                e.uniq_id == a && (i && r && s.test(i) && d.test(r) ? (i = i.replace("00:00:00", ""), r = r.replace("23:59:59", "")) : (i = i ? i.replace("00:00:00", "") : l, r = r ? r.replace("23:59:59", "") : l), e.compareType = "custom", t.fullscreen ? e.customName = t.tips["chart.compareDate"] + "(" + e.name + " - " + i + "~" + r + ")" : e.customName = t.tips["filter.compare"] + " " + i + "~" + r)
                            }), n.close(F.id)
                        } else t.innerFilterModule.setInnerFilter({
                            range: [i, r],
                            index: e.data.index,
                            fid: e.data.fid,
                            type: "custom_date"
                        })
                    }, 
                    t.isQuery = !1, 
                    t.strFilter = {}, 
                    t.queryKwd = {}, 
                    t.filterQueryModule = {
                        enterToQuery: function (e) {
                            13 == e.e.keyCode && (e.is_advance ? t.strFilter.filterKwd = t.strFilter.keyword : t.innerFilterItems[e.filter.fid].keyword = t.queryKwd[e.filter.fid], e.real_search && this.query(e.filter, e.is_advance))
                        },
                        delQueryField: function (e) {
                            t.tempQueryList && (t.innerFilterItems[e].list = t.tempQueryList || []), t.queryKwd[e] = ""
                        },
                        query: function (e, r) {
                            t.showLoading = !0;
                            var n = "",
                                s = e.fid;
                            if (n = t.queryKwd[s] ? t.queryKwd[s] : t.strFilter.keyword, r ? t.strFilter.filterKwd = n : t.innerFilterItems[s].keyword = n, !n) return t.showLoading = !1, t.isQuery = !1, void(t.strFilter.searchList = angular.copy(t.strFilter.originalSearchList));
                            var d = t.opts.meta;
                            t.$parent.drillOption ? t.tempDrillOption = angular.copy(t.$parent.drillOption) : t.tempDrillOption = {
                                drill_field: "",
                                drill_level: "",
                                drill_value: []
                            };
                            var c = {
                                ct_id: e.ct_id || d.ct_id,
                                tb_id: e.tb_id || d.tb_id,
                                fid: s,
                                keyword: n,
                                rule_id: a.global.rule_id,
                                filter_list: angular.toJson(t.chartOptions.optional.filter_list ? t.chartOptions.optional.filter_list : []),
                                granularity: e.granularity || "",
                                dsh_id: l.dashId,
                                dsh_filter: angular.toJson(t.chartOptions.optional.dsh_filter ? t.chartOptions.optional.dsh_filter : []),
                                drill_field: t.tempDrillOption.drill_field,
                                drill_level: t.tempDrillOption.drill_level,
                                drill_value: angular.toJson(t.tempDrillOption.drill_value)
                            };
                            r && (t.strFilter.loading = !0), i.post("/api/adv_enum/search", c).then(function (e) {
                                if (t.strFilter.loading = !1, t.showLoading = !1, 0 == e.status)
                                    if (t.tempQueryList = angular.copy(t.innerFilterItems[s].list), r) {
                                        t.isQuery = !0;
                                        var a = [];
                                        angular.forEach(e.result, function (e) {
                                            a.push({
                                                name: e,
                                                select: !1
                                            })
                                        }), t.strFilter.searchList = a
                                    } else t.innerFilterItems[s].list = e.result;
                                else o(Number(e.status))
                            })
                        }
                    }, 
                    t.defaultRange = {},
                    t.nullRange = {};
                    var T;
                    t.innerFilterModule = {
                        showDatePicker: function (e, a, i) {
                            if (navigator.userAgent.indexOf("Firefox") >= 0 && a[0] && a[0].indexOf("opt_") >= 0);
                            else if (navigator.userAgent.indexOf("Firefox") >= 0 && a && a.length > 0) {
                                var r = null,
                                    o = null;
                                a[0] && (r = a[0].split("-"), r[1] < 10 && (r[1] = "0" + parseInt(r[1])), r[2] < 10 && (r[2] = "0" + parseInt(r[2])), r = r[0] + "-" + r[1] + "-" + r[2]), a[1] && (o = a[1].split("-"), o[1] < 10 && (o[1] = "0" + parseInt(o[1])), o[2] < 10 && (o[2] = "0" + parseInt(o[2])), o = o[0] + "-" + o[1] + "-" + o[2]), a = [r, o]
                            }
                            if (a.length > 1) {
                                var l = a[0] ? a[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                    s = a[1] ? a[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                a = a.concat([l, s])
                            } else 0 === a.length && (a = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                            T = n.open({
                                template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                data: {
                                    fid: i,
                                    index: e,
                                    range: a
                                },
                                scope: t
                            })
                        },
                        numberInnerFilterMap: c,
                        getItemList: function (e, r, n) {
                            var o = r.fid,
                                s = r.granularity || "";
                            return r.hasOwnProperty("uniq_id") || (r.uniq_id = ""), 
                            t.show_options[o + r.uniq_id] = !n && !t.show_options[o + r.uniq_id], 
                            t.queryKwd[o] = "", !t.show_options[o + r.uniq_id] && !n || r.disabled ? void(t.adjustWidth[r.fid] = {
                                top: 26
                            }) : (t.showLoading = !0, t.currentChartId = e.ct_id, t.$parent.drillOption ? t.tempDrillOption = angular.copy(t.$parent.drillOption) : t.tempDrillOption = {
                                drill_field: "",
                                drill_level: "",
                                drill_value: []
                            }, "date" != r.data_type || "" != r.granularity || r.hasOwnProperty("aggregator") ? void i.post("/api/field/inner_range", {
                                dsh_id: l.dashId,
                                ct_id: r.ct_id || e.ct_id,
                                tb_id: r.tb_id || e.tb_id,
                                fid: o,
                                granularity: s,
                                rule_id: a.global.rule_id,
                                filter_list: angular.toJson(t.chartOptions.optional.filter_list ? t.chartOptions.optional.filter_list : []),
                                dsh_filter: angular.toJson(t.chartOptions.optional.dsh_filter ? t.chartOptions.optional.dsh_filter : []),
                                drill_field: t.tempDrillOption.drill_field,
                                drill_level: t.tempDrillOption.drill_level,
                                drill_value: angular.toJson(t.tempDrillOption.drill_value)
                            }).then(function (e) {
                                if (t.showLoading = !1, 0 == e.status) {
                                    var a = e.result;
                                    t.innerFilterItems[o] = {
                                        list: a.range,
                                        total: a.total,
                                        keyword: ""
                                    }, n ? n(r, a.range, a.total) : _(r, a.range)
                                } else errorHandle(e)
                            }) : (t.showLoading = !1, t.innerFilterItems[o] = {
                                list: [],
                                total: 0,
                                keyword: ""
                            }, n ? n(r, []) : _(r, []), !1))
                        },
                        getItemListForNumber: function (e, r) {
                            if (t.currentChartId = e.ct_id, t.$parent.drillOption ? t.tempDrillOption = angular.copy(t.$parent.drillOption) : t.tempDrillOption = {
                                    drill_field: "",
                                    drill_level: "",
                                    drill_value: []
                                }, t.show_options[r.fid + r.uniq_id] = !t.show_options[r.fid + r.uniq_id], t.show_options[r.fid + r.uniq_id]) {
                                t.nullRange[r.fid + r.uniq_id] = !1;
                                var n = t.filter_list_inner;
                                angular.forEach(n, function (n) {
                                    if (n.fid == r.fid && n.uniq_id == r.uniq_id)
                                        if (0 == n.range.length) t.showLoading = !0, i.get("/api/field/inner_range", {
                                            dsh_id: l.dashId,
                                            ct_id: r.ct_id || e.ct_id,
                                            tb_id: r.tb_id || e.tb_id,
                                            fid: r.fid,
                                            uniq_id: r.uniq_id,
                                            granularity: "",
                                            rule_id: a.global.rule_id,
                                            filter_list: angular.toJson(t.chartOptions.optional.filter_list ? t.chartOptions.optional.filter_list : []),
                                            dsh_filter: angular.toJson(t.chartOptions.optional.dsh_filter ? t.chartOptions.optional.dsh_filter : []),
                                            drill_field: t.tempDrillOption.drill_field,
                                            drill_level: t.tempDrillOption.drill_level,
                                            drill_value: angular.toJson(t.tempDrillOption.drill_value)
                                        }).then(function (e) {
                                            0 == e.status && (t.showLoading = !1, t.innerFilterItems[r.fid + r.uniq_id].numOpt = -1, t.innerFilterItems[r.fid + r.uniq_id].numRange = [], t.defaultRange[r.fid + r.uniq_id] = e.result.range, 0 == t.defaultRange[r.fid + r.uniq_id].length ? t.nullRange[r.fid + r.uniq_id] = !0 : t.defaultRange[r.fid + r.uniq_id] = t.handleNumberByFormatter(e.result.range, r.formatter, r.aggregator))
                                        });
                                        else {
                                            var o = n.range,
                                                s = angular.fromJson(o[0]).conditions;
                                            1 == s.length ? (t.innerFilterItems[r.fid + r.uniq_id].numOpt = s[0].calc_type, t.innerFilterItems[r.fid + r.uniq_id].numRange = [s[0].value]) : s.length > 1 && (t.innerFilterItems[r.fid + r.uniq_id].numOpt = 12, t.innerFilterItems[r.fid + r.uniq_id].numRange = [s[0].value, s[1].value]), t.nullRange[r.fid + r.uniq_id] = !1, t.defaultRange[r.fid + r.uniq_id] = []
                                        }
                                })
                            }
                        },
                        setInnerFilter: function (i) {
                            var r = [];
                            if ("dashboard" === a.view && (r = t.opts.meta.allMetricFields), "date" == i.type) {
                                var l = !1;
                                if (1 === i.range.length && t.adv_date_list.forEach(function (e, t) {
                                        if (e.opt_id === i.range[0])
                                            for (var a = angular.fromJson(e.config), n = 0, o = r.length; n < o; n++) {
                                                var s = r[n];
                                                if (s.yoyQoqSetting && "filter" === s.yoyQoqSetting.type && s.yoyQoqSetting.date_field_fid === i.fid) {
                                                    a.expression && "" != a.expression && (l = !0);
                                                    break
                                                }
                                            }
                                    }), l && !confirm(t.tips["filter.switchExpTip"])) return
                            }
                            if (0 === i.range.length || "custom_date" == i.type && (!i.range[0] || !i.range[1])) {
                                for (var s = r.some(function (e, t) {
                                        return e.yoyQoqSetting && "filter" === e.yoyQoqSetting.type && e.yoyQoqSetting.date_field_fid === i.fid
                                    }), 
                                    d = [], 
                                    c = 0, 
                                    u = r.length; c < u; c++) {

                                    var f = r[c];
                                    !f.yoyQoqSetting || "filter" !== f.yoyQoqSetting.type || f.yoyQoqSetting.date_field_fid !== i.fid || 0 !== i.range.length && "1" != f.yoyQoqSetting.compare_method || d.push(f.nick_name || f.name)
                                }
                                s && d.length > 0 && o(t.tips["filter.addItemTip"] + d.join("/"))
                            }
                            "custom_date" !== i.type ? t.filter_list_inner[i.index].range = i.range || [] : ("" == t.filter_list_inner[i.index].range && (t.filter_list_inner[i.index].range = []), t.filter_list_inner[i.index].range = i.range), i.type && (i.hasOwnProperty("uniq_id") || (i.uniq_id = ""), "string" === i.type ? e(function () {
                                t.innerFilterItems[i.fid].list = [], t.innerFilterItems[i.fid].keyword = ""
                            }, 10) : "date" === i.type && (t.filter_list_inner[i.index].range = i.range || [])), t.filter_list_inner[i.index].inner_adv_type = "", t.filter_list_inner[i.index].is_defined = !1, t.filter_list_inner[i.index].range_type = 1, t["show_custom_" + i.fid + i.uniq_id] = !1, t.show_options[i.fid + i.uniq_id] = !1, t.showLoading = !1, b(i.fid), m(), T && n.close(T.id), T = null
                        },
                        setInnerFilterForNumber: function (e) {
                            var a = "",
                                i = {
                                    condition_type: 2,
                                    conditions: []
                                },
                                r = t.innerFilterItems[e.fid + e.uniq_id];
                            if (r.numOpt == -1) a = [];
                            else if (12 == r.numOpt) {
                                if ("number" != typeof r.numRange[0] || "number" != typeof r.numRange[1]) return void o(t.tips["filter.pleaseInputCondition"]);
                                i.conditions.push({
                                    calc_type: 4,
                                    value: r.numRange[0]
                                }), i.conditions.push({
                                    calc_type: 5,
                                    value: r.numRange[1]
                                }), a = [angular.toJson(i)]
                            } else {
                                if ("number" != typeof r.numRange[0]) return void o(t.tips["filter.pleaseInputCondition"]);
                                i.conditions.push({
                                    calc_type: r.numOpt,
                                    value: r.numRange[0]
                                }), a = [angular.toJson(i)]
                            }
                            t.numberConditionFormat(e.fid + e.uniq_id, r.numOpt, r.numRange), t.filter_list_inner[e.index].range = a, t.filter_list_inner[e.index].inner_adv_type = "condition", t.filter_list_inner[e.index].is_defined = !1, t["show_custom_" + e.fid + e.uniq_id] = !1, e.hasOwnProperty("uniq_id") || (e.uniq_id = ""), t.show_options[e.fid + e.uniq_id] = !1, b(e.fid), m()
                        },
                        openAdvanceModal: function (e, a, i) {
                            t.isQuery = !1, t.strFilter = {
                                fid: e.fid,
                                uniq_id: e.uniq_id || "",
                                name: e.name,
                                granularity: e.granularity || "",
                                keyword: "",
                                filterKwd: "",
                                total: i,
                                data_type: e.data_type,
                                is_compare: !!e.is_compare,
                                searchList: [],
                                originalSearchList: [],
                                addList: [],
                                inner_adv_type: e.inner_adv_type || "exact",
                                range_type: "",
                                condition_type: 1,
                                conditions: [],
                                conditionList: [],
                                expression_str: ""
                            }, e.hasOwnProperty("range_type") ? t.strFilter.range_type = e.range_type : t.strFilter.range_type = 1, t.conditionList = [], t.expressionChangedFlag = !1, t.checkFormulaGrammarFlag = !1, "C330" == t.opts.meta.type ? t.disabled_compare = !0 : t.disabled_compare = !1;
                            var r = function () {
                                var i = void 0 == e.range ? [] : e.range;
                                angular.forEach(a, function (e) {
                                    $.inArray(e, i) > -1 ? t.strFilter.searchList.push({
                                        name: e,
                                        select: !0
                                    }) : t.strFilter.searchList.push({
                                        name: e,
                                        select: !1
                                    })
                                }), t.strFilter.originalSearchList = angular.copy(t.strFilter.searchList)
                            };
                            if (e.inner_adv_type) {
                                if ("exact" == e.inner_adv_type) t.strFilter.addList = angular.fromJson(e.range[0]) || [], r();
                                else if ("condition" == e.inner_adv_type) {
                                    t.strFilter.inner_adv_type = "condition", r();
                                    var o = angular.fromJson(e.range[0]);
                                    t.strFilter.condition_type = o.condition_type, t.strFilter.conditions = o.conditions, angular.forEach(t.strFilter.conditions, function (a) {
                                        t.strFilter.conditionList.push({
                                            name: e.name,
                                            operator: a.calc_type,
                                            content: a.value
                                        })
                                    })
                                } else if ("expression" == e.inner_adv_type) {
                                    t.strFilter.inner_adv_type = "expression", r(), t.strFilter.expression_str = e.range[0];
                                    var l = new RegExp("\\[_field_id_\\]", "g");
                                    t.strFilter.expression_str = t.strFilter.expression_str.replace(l, "[" + e.name + "]")
                                }
                            } else r(), angular.forEach(t.filter_list_inner, function (a) {
                                a.hasOwnProperty("uniq_id") || (a.uniq_id = ""), a.fid == e.fid && a.uniq_id == e.uniq_id && (t.strFilter.addList = angular.copy(a.range))
                            });
                            t.originalFilter = angular.copy(t.strFilter), t.strInnerFilterDialog = n.open({
                                template: "/static/partials/dash-filter-multiple.html",
                                className: "ngdialog-theme-default str-filter-model dash-filter-adv-model",
                                scope: t,
                                preCloseCallback: function () {}
                            })
                        },
                        addAdvanceItem: function (a, i) {
                            i && i.stopPropagation();
                            var r = !1;
                            if ($.inArray(a.name, t.strFilter.addList) > -1 && (r = !0), r) return void o(t.tips["filter.itemExist"]);
                            t.strFilter.addList.push(a.name), e(function () {
                                var e = $(".add-list").find("ul"),
                                    t = e[0].scrollHeight;
                                e.animate({
                                    scrollTop: t
                                })
                            }, 300)
                        },
                        delAdvanceItem: function (e, a) {
                            a && a.stopPropagation();
                            for (var i = t.strFilter.searchList, r = 0, n = i.length; r < n; r++)
                                if (i[r].name == t.strFilter.addList[e]) {
                                    i[r].select = !1;
                                    break
                                }
                            t.strFilter.addList.splice(e, 1)
                        },
                        addAll: function () {
                            if (0 == t.strFilter.addList.length) return void angular.forEach(t.strFilter.searchList, function (e) {
                                t.strFilter.addList.push(e.name)
                            });
                            angular.forEach(t.strFilter.searchList, function (e) {
                                $.inArray(e.name, t.strFilter.addList) < 0 && t.strFilter.addList.push(e.name)
                            })
                        },
                        delAll: function () {
                            t.strFilter.addList = []
                        },
                        saveAdvance: function () {
                            for (var e = t.filter_list_inner, a = function (t, a, i) {
                                    var r = [];
                                    "exact" == a || "condition" == a ? (e[t].rangeNumber = i.length, e[t].rangeFirstField = i[0], r.push(angular.toJson(i)), e[t].range = r) : (e[t].rangeNumber = 0, e[t].rangeFirstField = "", r.push(i), e[t].range = r)
                                }, i = function (a, i) {
                                    1 == i ? (t["show_custom_" + t.strFilter.fid + t.strFilter.uniq_id] = !0, e[a].is_defined = !0, t.is_defined = !0) : 0 == i && (e[a].inner_adv_type = "", t["show_custom_" + t.strFilter.fid + t.strFilter.uniq_id] = !1, e[a].is_defined = !1)
                                }, r = 0, n = e.length; r < n; r++) {
                                if (t.strFilter.hasOwnProperty("uniq_id") || (t.strFilter.uniq_id = ""), e[r].fid == t.strFilter.fid && e[r].uniq_id == t.strFilter.uniq_id) {
                                    if (e[r].range_type = t.strFilter.range_type, e[r].range = t.strFilter.addList, e[r].is_compare = 1 & !!t.strFilter.is_compare, e[r].inner_adv_type = t.strFilter.inner_adv_type, "exact" == t.strFilter.inner_adv_type) {
                                        if (0 == t.strFilter.addList.length) return i(r, 0), b(t.strFilter.fid), m(), void t.strInnerFilterDialog.close();
                                        a(r, "exact", t.strFilter.addList)
                                    } else if ("condition" == t.strFilter.inner_adv_type) {
                                        if (0 == t.strFilter.conditionList.length) return i(r, 0), b(t.strFilter.fid), m(), void t.strInnerFilterDialog.close();
                                        var l = {
                                            condition_type: 1,
                                            conditions: []
                                        };
                                        l.condition_type = t.strFilter.condition_type, angular.forEach(t.strFilter.conditionList, function (e) {
                                            l.conditions.push({
                                                calc_type: e.operator,
                                                value: e.content
                                            })
                                        }), a(r, "condition", l)
                                    } else if ("expression" == t.strFilter.inner_adv_type) {
                                        var s = t.checkFormulaGrammar(t.strFilter.name, t.strFilter.fid, "string");
                                        if (s) return s.then(function (e) {
                                            e ? (a(r, "expression", t.strFilter.expression_str), i(r, 1), b(t.strFilter.fid), m(), t.strInnerFilterDialog.close()) : o(t.tips["filter.checkFailed"])
                                        });
                                        return
                                    }
                                    return i(r, 1), b(t.strFilter.fid), m(), void t.strInnerFilterDialog.close()
                                }
                            }
                        },
                        isShowFilter: function (e, a) {
                            return !!t["show_custom_" + e + a]
                        },
                        restoreFilter: function () {
                            t.strFilter = t.originalFilter
                        }
                    }, t.numberConditionFormatString = {}, t.numberConditionFormat = function (e, a, i) {
                        var r = "",
                            n = "";
                        switch (angular.forEach(c, function (e) {
                            e.value == Number(a) && (n = e.text)
                        }), a) {
                            case -1:
                                r = "en" == $.cookie("locale") ? "All" : "全部";
                                break;
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                                r = n + " " + i[0];
                                break;
                            case 12:
                                r = n + " " + i[0] + "~" + i[1];
                                break;
                            default:
                                r = ""
                        }
                        t.numberConditionFormatString[e] = r
                    }, t.is_defined = !1, t.checkFormulaGrammarFlag = !1, t.checkFormulaGrammar = function (e, a, r) {
                        if ("string" == r) {
                            var n = t.strFilter.expression_str;
                            if ("" == n) return void o(t.tips["filter.pleaseInputExpression"]);
                            if (n.indexOf(e) < 0 && n.indexOf("[_field_id_]") < 0) return void o(t.tips["filter.pleaseInputFieldName"] + ": [" + e + "]");
                            e = bdp.utils.requote(e);
                            var l = new RegExp("\\[" + e + "\\]", "g");
                            t.strFilter.expression_str = n.replace(l, "[_field_id_]");
                            var s = {
                                ct_id: t.opts.meta.ct_id,
                                tb_id: t.opts.meta.tb_id,
                                fid: a,
                                expression: t.strFilter.expression_str
                            }
                        }
                        return t.expressionChangedFlag = !1, i.post("/api/expression/syntax_verify", s).then(function (e) {
                            return 0 == e.status ? (o(t.tips["filter.checkSuccess"]), t.checkFormulaGrammarFlag = !0, !0) : (o(t.tips["filter.checkFailed"]), t.checkFormulaGrammarFlag = !1, !1)
                        })
                    }, t.setExpression = function (e) {
                        t.strFilter.expression_str = e
                    }, t.expressionChanged = function (e) {
                        t.expressionChangedFlag = e
                    }, t.insertFieldNameToExpression = function (e) {
                        t.expressionChangedFlag = !0, t.$broadcast("insertFieldNameToExpression", e)
                    }, t.changeNumberOpt = function (e, r, n) {
                        if (t.$parent.drillOption ? t.tempDrillOption = angular.copy(t.$parent.drillOption) : t.tempDrillOption = {
                                drill_field: "",
                                drill_level: "",
                                drill_value: []
                            }, t.nullRange[r.fid + r.uniq_id] = !1, t.defaultRange[r.fid + r.uniq_id] = [], n == -1) {
                            t.rangeLoading = !0, t.chartOptions.optional.filter_list;
                            var o = angular.copy(t.chartOptions.optional.filter_list) || [];
                            if (o)
                                for (var s = 0; s < o.length; s++) o[s].fid == r.fid && o[s].uniq_id == r.uniq_id && (o[s].range = []);
                            i.get("/api/field/inner_range", {
                                dsh_id: l.dashId,
                                ct_id: r.ct_id || e.ct_id,
                                tb_id: r.tb_id || e.tb_id,
                                fid: r.fid,
                                uniq_id: r.uniq_id,
                                granularity: "",
                                rule_id: a.global.rule_id,
                                filter_list: angular.toJson(o),
                                dsh_filter: angular.toJson(t.chartOptions.optional.dsh_filter ? t.chartOptions.optional.dsh_filter : []),
                                drill_field: t.tempDrillOption.drill_field,
                                drill_level: t.tempDrillOption.drill_level,
                                drill_value: angular.toJson(t.tempDrillOption.drill_value)
                            }).then(function (e) {
                                t.rangeLoading = !1, 0 == e.status && (0 == e.result.range.length && (t.nullRange[r.fid + r.uniq_id] = !0), t.defaultRange[r.fid + r.uniq_id] = t.handleNumberByFormatter(e.result.range, r.formatter, r.aggregator))
                            })
                        }
                    }, t.handleNumberByFormatter = function (e, t, a) {
                        for (var i = 2, r = 0; r < e.length; r++) t ? ("" !== t[t.check].digit && (i = t[t.check].digit), "num" == t.check && t.num.millesimal ? e[r] = Highcharts.numberFormat(e[r], i, ".", ",") : "num" == t.check ? e[r] = Highcharts.numberFormat(e[r], i, ".", "") : e[r] = Highcharts.numberFormat(100 * e[r], i, ".", "") + "%") : ("COUNT" != a && "COUNT_DISTINCT" != a || (i = 0), e[r] = Highcharts.numberFormat(e[r], i));
                        return e
                    }, t.setAdvanceAggregatorName = p, g(["filter.itemExist", "filter.pleaseCheckGrammar", "filter.checkSuccess", "filter.checkFailed", "filter.inputCompleteCondition", "filter.pleaseInputCondition", "default", "filter.pleaseInputExpression", "filter.pleaseInputFieldName", "filter.pleaseSelectItem", "filter.pleaseAddCondition", "filter.hasChecked", "chart.dateRangeRequired", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2", "filter.switchExpTip", "filter.addItemTip", "chart.compareDate", "filter.compare"], t)
                },
                controller: ["$scope", function (e) {
                    e.show_options = {}, e.isActive = !1, e.innerFilterItems = {}, e.$watch("opts", function (t) {
                        if (t && e.opts.meta.filter_list_inner) {
                            if ($("body").hasClass("fs-chart-mode") && !e.fullscreen) return !1;
                            e.filter_list_inner = angular.copy(e.opts.meta.filter_list_inner), 0 == e.filter_list_inner.length && e.opts.meta.compareDateFilter && 0 == e.opts.meta.compareDateFilter.length && (e.show_filter = !1), e.isActive = !1, angular.forEach(e.filter_list_inner, function (t) {
                                if (e.show_filter = !0, void 0 === t.range ? t.range = [] : t.range.length > 0 && (e.isActive = !0), "number" == t.data_type || "number" != t.data_type && t.hasOwnProperty("aggregator"))
                                    if (0 == t.range.length) e.numberConditionFormatString[t.fid + t.uniq_id] = "en" == $.cookie("locale") ? "All" : "全部";
                                    else {
                                        var a = angular.fromJson(t.range[0]),
                                            i = a.conditions;
                                        1 == i.length ? e.numberConditionFormat(t.fid + t.uniq_id, Number(i[0].calc_type), [i[0].value]) : i.length > 1 && e.numberConditionFormat(t.fid + t.uniq_id, 12, [i[0].value, i[1].value])
                                    }
                                "number" == t.data_type || "number" != t.data_type && t.hasOwnProperty("aggregator") ? (t.hasOwnProperty("uniq_id") || (t.uniq_id = ""), e.innerFilterItems[t.fid + t.uniq_id] = {}) : e.innerFilterItems[t.fid] = {}
                            }), e.opts.meta.compareDateFilter.length > 0 && (e.show_filter = !0)
                        }
                    }, !0), e.$watch("advDateList", function (t) {
                        t && (e.adv_date_list = t)
                    })
                }]
            }
        }])
    }(),
    function () {
        function t(t, i, r, n, o, l, s, d, c, u, f, p, g, h) {
            function m(m, _, b) {
                function v() {
                    return m.is_gis ? m.viewData.currentLayer : m.currentView ? m.viewMeta : m.chart_ops.meta.level[m.drill_level]
                }

                function y(e, t) {
                    var a = e[0],
                        i = e[1],
                        r = (t.week_start_day_of_week, new Date(a, 0, 1)),
                        n = 0 == r.getDay() ? 7 : r.getDay(),
                        o = 0;
                    return o = 1 === n ? 7 * (i - 1) : 7 * i - n, new Date(r.getTime() + 864e5 * o)
                }

                function w(e, t, a) {
                    var i = m.chart_ops.meta.level[m.drill_level][m.yAxis][t],
                        r = null;
                    r = "num" === e ? {
                        check: "num",
                        num: {
                            digit: void 0 !== a ? a : 2
                        },
                        percent: {
                            digit: 2
                        }
                    } : {
                        check: "percent",
                        num: {
                            digit: 0
                        },
                        percent: {
                            digit: 2
                        }
                    }, i.formatter = angular.copy(r)
                }

                function D(e, t) {
                    return g.field.getFilteredRange(m.ct_id, t, e).then(function (e) {
                        var t = e;
                        return 0 == t.status ? t.result : null
                    })
                }

                function F(e) {
                    for (var t, a = m.dateFilters.length - 1; a >= 0; a--) {
                        var i = m.dateFilters[a];
                        if (i.fid === e) {
                            t = i;
                            break
                        }
                    }
                    return t
                }

                function T(e) {
                    var t = m.chart_ops.meta.level[m.drill_level];
                    e || (m.preCloseDialog = !0, m.preCloseDialogSure = !1), m.current_formula.yoyQoqSetting = {
                        type: "qoq",
                        aggregator: "1",
                        date_field_fid: "",
                        date_field_type: "day",
                        compare_type: "1",
                        granularity_name: "",
                        start: {
                            offset_to_end: "1"
                        },
                        end: {
                            type: "0",
                            offset: "0"
                        },
                        select_date_range: {
                            start: "",
                            end: ""
                        },
                        compare_date_range: {
                            start: "",
                            end: ""
                        },
                        checked: "1"
                    };
                    for (var a = 0, i = m.field_list.length; a < i; a++)
                        if ("date" === m.field_list[a].data_type) {
                            m.current_formula.yoyQoqSetting.date_field_fid = m.field_list[a].fid;
                            break
                        }
                    angular.forEach(t.y, function (e, t) {
                        if (e.yoyQoqSetting) {
                            var a = m.current_formula.yoyQoqSetting;
                            return a.date_field_fid = e.yoyQoqSetting.date_field_fid, a.date_field_type = e.yoyQoqSetting.date_field_type, void(a.granularity_name = e.yoyQoqSetting.granularity_name)
                        }
                    }), angular.forEach(t.y_optional, function (e, t) {
                        if (e.yoyQoqSetting) {
                            var a = m.current_formula.yoyQoqSetting;
                            return a.date_field_fid = e.yoyQoqSetting.date_field_fid, a.date_field_type = e.yoyQoqSetting.date_field_type, void(a.granularity_name = e.yoyQoqSetting.granularity_name)
                        }
                    })
                }

                function S(e) {
                    e || (m.preCloseDialog = !0, m.preCloseDialogSure = !1), m.yoyQoqDateSetting = {
                        date_field_fid: m.dateFilters.length ? m.dateFilters[0].fid : "",
                        compare_method: "0",
                        relative_type: 0,
                        filter_type: "filter_yoy_year",
                        relative_value: 1,
                        date_field_type: "day",
                        aggregator: 1,
                        allow_dash: !1,
                        checked: "1"
                    }
                }

                function C(e) {
                    var t = e.date_field_type;
                    if (defined(e.end)) {
                        var a, i, r, n, o, l = "2" == e.end.type ? e.end.offset : e.end.type,
                            s = new Date;
                        switch (t) {
                            case "day":
                                s.setDate(s.getDate() - l);
                                break;
                            case "week":
                                r = 0 === s.getDay() ? 7 : s.getDay(), s.setDate(s.getDate() - (r - 1) - 7 * l);
                                break;
                            case "month":
                                a = s.getFullYear(), i = s.getMonth() + 1, n = 0 == l ? 0 : Math.ceil((l - i) / 12), o = (i - l) % 12, o > 0 ? i -= l : o < 0 ? (n = Math.ceil((l - i) / 12), a -= n, i = i + 12 * n - l) : (a -= Math.ceil(l / 12), i = 12), s.setYear(a), s.setMonth(i - 1);
                                break;
                            case "quarter":
                                a = s.getFullYear(), i = s.getMonth() + 1, l *= 3, n = Math.ceil((l - i) / 12), n = n || 1, o = (i - l) % 12, o > 0 ? i -= l : o < 0 ? (n = Math.ceil((l - i) / 12), a -= n, i = i + 12 * n - l) : (a -= n, i = 12), s.setYear(a), s.setMonth(i - 1);
                                break;
                            case "year":
                                a = s.getFullYear(), n = l, a -= n, s.setYear(a)
                        }
                        var d = new Date(s.getFullYear(), s.getMonth(), s.getDate()).getTime();
                        return bdpChart.helper.checkGranularity(t, d, "", 1)
                    }
                }
                var L = m.$eval(b.fieldFormula);
                "number" === L.data_type ? m.dataType = "number" : m.dataType = "!number", L.yAxis ? m.yAxis = L.yAxis : m.yAxis = "y", m.formula_list = r, m.show_advance = !0, m.$watch(function () {
                    return m.chart_ops.meta.chart_type || m.chart_ops.meta.level[m.drill_level].chart_type
                }, function (e, t) {
                    if (!e) return !1;
                    m.is_gis = "C400" === e, m.is_custom_chart = "C500" === e, m.show_advance = "C280" !== e && !m.is_gis
                }), m.canSetAdvanceAggr = function () {
                    var e = m.selected_type;
                    return m.show_advance && "C300" !== e && "C330" !== e
                }, m.setFormulaToField = function (e, t, a) {
                    if ("more" !== t.type && "PERCENTILE" !== t.type) {
                        var i = $(e.target).parents(".data-tag").parent().index(),
                            r = t.type,
                            n = t.name,
                            o = (m.chart_ops, v()),
                            l = o[m.yAxis][i],
                            d = o.bubble_setting,
                            u = o.color_setting;
                        if ("" !== t.name && m.is_gis && o.type.indexOf("trajectory") >= 0) return c(h.instant("chart.noAggregatorForTrajectory"));
                        if (!r && ("C280" === o.chart_type || m.is_gis) && d && (d.fid && 1 == +d.field.is_build_aggregated || "number" !== d.field.data_type)) return c("数值字段计数方式为“无”时，只能使用非聚合数值作为尺寸"), void(a.show_formula = !1);
                        if (!r && ("C280" === o.chart_type || m.is_gis) && u && u.field && (u.field[0] && u.field[0].fid && 1 == +u.field[0].is_build_aggregated || "number" !== u.field[0].data_type)) return c("数值字段计数方式为“无”时，只能使用非聚合数值作为颜色"), void(a.show_formula = !1);
                        if (l.aggregator = r, l.aggregator_name = n, l.percent = "", "MED" === r && (l.percent = "0.5"), r.indexOf("PERCENT") >= 0 && (l.percent = t.percent), a.show_formula = !1, a.drill_fields && a.drill_fields.length && (a.drill_fields[0].show_formula = !1), "COUNT" === l.aggregator || "COUNT_DISTINCT" === l.aggregator) {
                            l.YoY || l.QoQ || l.yoyQoqSetting || l.advance_aggregator && "cancel" !== l.advance_aggregator.type || l.formatter && (l.formatter = {
                                check: "num",
                                num: {
                                    digit: 0
                                },
                                percent: {
                                    digit: 0
                                }
                            })
                        }
                        if (m.is_gis && o.y.length > 0 && (t.type ? (o.y.forEach(function (e) {
                                e === a || e.aggregator || 1 == +e.is_build_aggregated || ("number" === e.data_type ? e.aggregator = "SUM" : e.aggregator = "COUNT"), e.aggregator_name = s[e.aggregator]
                            }), d && d.fid && !d.aggregator && 1 != +d.field.is_build_aggregated && (d.aggregator = "number" === d.field.data_type ? "SUM" : "COUNT")) : (o.y.forEach(function (e) {
                                e !== a && e.aggregator && 1 != +e.is_build_aggregated && (e.aggregator = "", e.aggregator_name = "")
                            }), d && d.fid && (d.aggregator = ""))), "C280" === o.chart_type && o.y.length + o.y_scatter.length === 2) {
                            for (var f, p = a, g = o.y.concat(o.y_scatter), _ = 0, b = g.length; _ < b; _++)
                                if (g[_] != p) {
                                    f = g[_];
                                    break
                                }
                            t.type ? (f.aggregator || 1 == +f.is_build_aggregated || ("number" === f.data_type ? f.aggregator = "SUM" : f.aggregator = "COUNT", f.aggregator_name = s[f.aggregator]), f.aggregator_name = s[f.aggregator], d && d.fid && !d.aggregator && 1 != +d.field.is_build_aggregated && (d.aggregator = "number" === d.field.data_type ? "SUM" : "COUNT")) : f.aggregator && 1 != +f.is_build_aggregated && (f.aggregator = "", f.aggregator_name = "", d && d.fid && (d.aggregator = ""))
                        }
                        if (!(1 !== o.y.length || "C280" === o.chart_type || o.y_optional && o.y_optional.length)) {
                            t.type;
                            "COUNT" !== t.type && "COUNT_DISTINCT" !== t.type || "SUM"
                        }
                        var y = o[m.yAxis][i];
                        !m.is_gis && m.changeAggragatorForNumberFilter(y), m.$emit("emitChangeTableFormatting", !0), m.saveChartImmediate()
                    }
                }, m.setContrastField = function (e, t, a, i, r) {
                    var n = $(e.target).parents(".data-tag").parent().index(),
                        o = m.chart_ops,
                        l = o.meta.level[m.drill_level][m.yAxis][n];
                    delete l.formatter, delete l.percentage, delete l.advance_aggregator;
                    var s = {
                        check: "value" === r ? "num" : "percent",
                        percent: {
                            digit: 2
                        },
                        num: {
                            digit: 2
                        }
                    };
                    if (m.current_formula = {}, m.current_formula.formatter = s, l.formatter = s, "YoY" === a) {
                        if (t.YoY && i === t.YoY && (!t.yoyQoqType || r === t.yoyQoqType)) return;
                        delete l.QoQ, l.YoY = i, l.yoyQoqType = r
                    }
                    if ("QoQ" === a) {
                        if (t.QoQ && (!t.yoyQoqType || r === t.yoyQoqType)) return;
                        delete l.YoY, l.QoQ = o.meta.level[m.drill_level].x[0].granularity || "day", l.yoyQoqType = r
                    }
                    delete l.yoyQoqSetting, m.changeAggragatorForNumberFilter(l), m.saveChartImmediate()
                };
                var k = {
                    year: 31536e6,
                    quarter: 7776e6,
                    month: 26784e5,
                    week: 6048e5,
                    day: 864e5,
                    hour: 36e5,
                    minute: 6e4,
                    second: 1e3
                };
                m.customYoYQoQ = {
                    updateSteppyItem: function (e, t, a) {
                        var i, r;
                        "start" === e ? (i = m.steppyStartDates = [], r = $("#steppyStart").find(".steppy-inner")) : (i = m.steppyEndDates = [], r = $("#steppyEnd").find(".steppy-inner"));
                        var n = a.granularity || "day",
                            t = (a.granularity_name, new Date(t.getFullYear(), t.getMonth(), t.getDate())),
                            o = t.getTime(),
                            l = {
                                year: t.getFullYear(),
                                month: t.getMonth(),
                                dayInMonth: t.getDate(),
                                dayInWeek: 0 === t.getDay() ? 7 : t.getDay()
                            };
                        "week" === n && (a.week_start_day_of_week || (a.week_start_day_of_week = 1), l.dayInWeek >= a.week_start_day_of_week ? o -= 864e5 * (l.dayInWeek - a.week_start_day_of_week) : o += 864e5 * (a.week_start_day_of_week - l.dayInWeek));
                        for (var s = -10; s < 11; s++)
                            if ("year" === n && s > -10) {
                                var d = i[i.length - 1];
                                bdp.utils.isLeapYear(d) ? i.push(d + 316224e5) : i.push(d + k[n])
                            } else i.push(o + k[n] * s);
                        r.css({
                            width: 1995,
                            left: "-665px"
                        })
                    },
                    addItems: function (e, t, a, i) {
                        u(function () {
                            var r = "start" === e ? m.steppyStartDates : m.steppyEndDates;
                            if (0 === t) {
                                for (var n = 0; n < 7; n++) r.splice(0, 0, r[0] - k[i]);
                                a.css({
                                    width: a.width() + 665,
                                    left: -665
                                })
                            } else {
                                for (var n = 0; n < 7; n++) r.push(r[r.length - 1] + k[i]);
                                a.css({
                                    width: a.width() + 665
                                })
                            }
                        }, 10)
                    },
                    open: function (a, i) {
                        var a = a || e,
                            r = $(a.target).parents(".data-tag").parent().index(),
                            o = m.chart_ops,
                            l = o.meta.level[m.drill_level],
                            s = l.x[0].granularity || "day",
                            d = l[m.yAxis][r];
                        if (m.steppyStartDates = [], m.steppyEndDates = [], m.preCloseDialog = !1, delete d.show_formula, d.yoyQoqSetting) {
                            var c, u, f = d.yoyQoqSetting;
                            "year" === s ? (c = new Date(f.select_date[0], 0, 1), u = new Date(f.compare_date[0], 0, 1)) : "quarter" === s ? (c = new Date(f.select_date[0], 3 * f.select_date[1] - 1), u = new Date(f.compare_date[0], 3 * f.compare_date[1] - 1)) : "month" === s ? (c = new Date(f.select_date[0], f.select_date[1] - 1), u = new Date(f.compare_date[0], f.compare_date[1] - 1)) : "week" === s ? (c = y(f.select_date, l.x[0]), u = y(f.compare_date, l.x[0])) : "day" === s && (c = new Date(f.select_date[0], f.select_date[1] - 1, f.select_date[2]), u = new Date(f.compare_date[0], f.compare_date[1] - 1, f.compare_date[2])), m.customYoYQoQ.updateSteppyItem("start", c, l.x[0]), m.customYoYQoQ.updateSteppyItem("end", u, l.x[0])
                        } else {
                            m.preCloseDialog = !0, m.preCloseDialogSure = !1, d.yoyQoqSetting = {
                                checked: 1,
                                type: "custom",
                                aggregator: 1,
                                compare_type: 1,
                                date_field_fid: l.x[0].fid,
                                date_field_type: s
                            }, angular.forEach(l.y, function (e, t) {
                                if (e.yoyQoqSetting) return d.yoyQoqSetting.date_field_fid = e.yoyQoqSetting.date_field_fid, void(d.yoyQoqSetting.date_field_type = e.yoyQoqSetting.date_field_type)
                            }), angular.forEach(l.y_optional, function (e, t) {
                                if (e.yoyQoqSetting) return d.yoyQoqSetting.date_field_fid = e.yoyQoqSetting.date_field_fid, void(d.yoyQoqSetting.date_field_type = e.yoyQoqSetting.date_field_type)
                            });
                            var p = new Date;
                            m.customYoYQoQ.updateSteppyItem("start", p, l.x[0]), m.customYoYQoQ.updateSteppyItem("end", p, l.x[0])
                        }
                        var g = angular.copy(d);
                        m.currentField = d, n.open({
                            template: "/static/partials/set_custom_yoy.html",
                            className: "ngdialog-theme-default custom-yoy-modal",
                            data: {
                                granularity: s
                            },
                            scope: m,
                            preCloseCallback: function () {
                                return delete d.show_formula, m.preCloseDialog ? (m.preCloseDialogSure || delete l[m.yAxis][r].yoyQoqSetting, !0) : angular.toJson(g) !== angular.toJson(d) ? !!confirm(m.tips["chart.confirmCancelEdit"]) && (l[m.yAxis][r] = angular.copy(g), !0) : void 0
                            }
                        }), t.$on("ngDialog.opened", function (e, t) {
                            m.customYoYQoQ.loadScriptAsync(l)
                        })
                    },
                    getSlideGrids: function (e) {
                        var t = "start" === e ? "#steppyStart" : "#steppyEnd",
                            a = $(t).find(".steppy-inner"),
                            i = a.position(),
                            r = i.left,
                            n = Math.abs(r) / 95 + 3;
                        return Math.round(n)
                    },
                    getCompareRange: function () {
                        var e, t, a = m.chart_ops.meta.level[m.drill_level],
                            i = a.x[0].granularity || "day",
                            r = (a.x[0].granularity_name, a.x[0].month_start_day || 0),
                            n = m.customYoYQoQ.getSlideGrids("start"),
                            o = m.customYoYQoQ.getSlideGrids("end"),
                            l = new Date(m.steppyStartDates[n]),
                            s = new Date(m.steppyEndDates[o]),
                            d = {
                                year: l.getFullYear(),
                                month: l.getMonth() + 1,
                                dayInMonth: l.getDate(),
                                dayInWeek: 0 === l.getDay() ? 7 : l.getDay()
                            },
                            c = {
                                year: s.getFullYear(),
                                month: s.getMonth() + 1,
                                dayInMonth: s.getDate(),
                                dayInWeek: 0 === s.getDay() ? 7 : s.getDay()
                            };
                        return "year" === i ? (e = [d.year], t = [c.year]) : "quarter" === i ? (e = [d.year, Math.ceil(d.month / 3)], t = [c.year, Math.ceil(c.month / 3)]) : "month" === i ? (e = [d.year, d.month], t = [c.year, c.month]) : "week" === i ? (r = a.x[0].week_start_day_of_week || 1, e = [d.year, bdpChart.helper.getWeekNumber(l.getTime(), r).week], t = [c.year, bdpChart.helper.getWeekNumber(s.getTime(), r).week]) : "day" === i && (e = [d.year, d.month, d.dayInMonth], t = [c.year, c.month, c.dayInMonth]), {
                            select_date: e,
                            compare_date: t
                        }
                    },
                    save: function () {
                        m.preCloseDialog = !0, m.preCloseDialogSure = !0;
                        var e = m.currentField;
                        2 == +e.yoyQoqSetting.aggregator ? e.formatter = {
                            check: "percent",
                            percent: {
                                digit: 2
                            },
                            num: {
                                digit: 0
                            }
                        } : e.formatter = {
                            check: "num",
                            num: {
                                digit: 2
                            },
                            percent: {
                                digit: 0
                            }
                        }, delete e.percentage, delete e.advance_aggregator;
                        var t = m.customYoYQoQ.getCompareRange();
                        e.yoyQoqSetting.select_date = t.select_date, e.yoyQoqSetting.compare_date = t.compare_date, delete e.YoY, delete e.QoQ, delete e.yoyQoqType, m.saveChartImmediate()
                    },
                    loadScriptAsync: function (e) {
                        function t() {
                            m.date = {
                                start: m.steppyStartDates[8],
                                end: m.steppyEndDates[8]
                            };
                            var t = {
                                    inner: ".steppy-inner",
                                    item: ".steppy-item",
                                    startindex: 7,
                                    stepwidth: 95,
                                    widthbetween: 0
                                },
                                i = function (e) {
                                    var r = $.extend({}, e);
                                    $("#steppyStart").touchdraghsteppy($.extend(t, r, {
                                        events: {
                                            dragstop: function (e) {
                                                var t = $("#steppyStart").find(".steppy-inner"),
                                                    r = t.position(),
                                                    n = r.left,
                                                    o = Math.abs(n) / 95,
                                                    l = m.steppyStartDates.length;
                                                (0 === o || o >= l - 7) && (m.customYoYQoQ.addItems("start", o, t, a), u(function () {
                                                    i({
                                                        startindex: 0 === o ? 7 : m.steppyStartDates.length - 14
                                                    })
                                                }, 20))
                                            }
                                        }
                                    }))
                                },
                                r = function (e) {
                                    var i = $.extend({}, e);
                                    $("#steppyEnd").touchdraghsteppy($.extend(t, i, {
                                        dragger: "#steppyStart",
                                        events: {
                                            dragstop: function (e) {
                                                var t = $("#steppyEnd").find(".steppy-inner"),
                                                    i = t.position(),
                                                    n = i.left,
                                                    o = Math.abs(n) / 95,
                                                    l = m.steppyEndDates.length;
                                                (0 === o || o >= l - 7) && (m.customYoYQoQ.addItems("end", o, t, a), u(function () {
                                                    r({
                                                        startindex: 0 === o ? 7 : m.steppyEndDates.length - 14
                                                    })
                                                }, 20)), m.compareDate = m.steppyStartDates[o]
                                            }
                                        }
                                    }))
                                },
                                n = setInterval(function () {
                                    $("#steppyStart").length && (clearInterval(n), i(), r())
                                }, 300);
                            m.$watch("date.start", function (t, a) {
                                t && t !== m.steppyStartDates[8] && m.customYoYQoQ.updateSteppyItem("start", t, e.x[0])
                            }), m.$watch("date.end", function (t, a) {
                                t && t !== m.steppyEndDates[8] && m.customYoYQoQ.updateSteppyItem("end", t, e.x[0])
                            }), window.TouchdragH = "TouchdragH"
                        }
                        var a = e.x[0].granularity || "day",
                            i = {
                                funcQueue: [],
                                loadLibInProgress: !1
                            };
                        thirdPluginLoader({
                            initFun: t,
                            libSrc: "https://s1.bdp.cn/static/js/chart/jquery.touchdragh_416bff9.js",
                            libId: window.TouchdragH
                        }, i)
                    }
                }, m.retentionEvents = {
                    addExceptField: function (e, t) {
                        if (t) return !(e.indexOf(t) > -1) && void e.push(t)
                    },
                    delExceptField: function (e, t) {
                        e.splice(t, 1)
                    }
                }, m.repetitionEvents = {
                    insertFieldNameToExpression: function (e) {
                        m.$broadcast("insertFieldNameToExpression", e)
                    },
                    setExpression: function (e) {
                        m.expression = e
                    },
                    checkFormulaGrammar: function (e, t) {
                        var a = e.setting.date_field_fid,
                            r = m.fidToName[a],
                            n = m.expression;
                        if (!n) return c(m.tips["filter.pleaseInputExpression"]), !1;
                        if (n.indexOf(r) < 0 && n.indexOf("[_field_id_]") < 0) return c(m.tips["filter.pleaseInputFieldName"] + ": [" + r + "]"), !1;
                        r = bdp.utils.requote(r);
                        var o = new RegExp("\\[" + r + "\\]", "g"),
                            l = {
                                ct_id: i.chartId,
                                tb_id: m.currentView ? m.currentView.tb_id : m.chart_ops.tb_id,
                                fid: a,
                                expression: n.replace(o, "[_field_id_]")
                            };
                        return d.post("/api/expression/syntax_verify", l).then(function (t) {
                            return 0 == t.status ? (e.setting.calc_period.expression = l.expression, c(m.tips["filter.checkSuccess"]), !0) : (c(m.tips["filter.checkFailed"]), !1)
                        })
                    }
                }, m.formulaList = o(["sum", "avg", "min", "max"]), m.setAdvanceAggregator = function (e, t, a) {
                    if (!$(e.target).hasClass("disabled")) {
                        var i, r, o = $(e.target).parents(".data-tag").parent().index(),
                            l = m.chart_ops,
                            s = l.meta.level[m.drill_level][m.yAxis][o];
                        switch (s.advance_aggregator ? i = s.advance_aggregator.type : s.advance_aggregator = {}, m.preCloseDialog = !1, delete s.show_formula, a) {
                            case "retention":
                            case "activity":
                                ;
                                if ("activity" === a && (n.closeAll(), !localStorage.getItem("BDP_active_rate"))) {
                                    localStorage.setItem("BDP_active_rate", !0);
                                    n.open({
                                        template: "/static/partials/dialogTemplates/first_active_rate.html",
                                        className: "ngdialog-theme-default",
                                        data: {
                                            e: e,
                                            field: t,
                                            type: a,
                                            know: m.setAdvanceAggregator
                                        }
                                    });
                                    return !1
                                }
                                if (i != a) {
                                    m.preCloseDialog = !0, m.preCloseDialogSure = !1, s.advance_aggregator.setting = {
                                        aggregator: "2",
                                        date_field_fid: "",
                                        date_field_type: "day",
                                        start: {
                                            range_type: "0",
                                            granularity: "day",
                                            range: [],
                                            date_range: []
                                        },
                                        end: {
                                            type: "0",
                                            offset: "1",
                                            range_type: "0",
                                            date_range: []
                                        },
                                        except_fields: [],
                                        checked: "1"
                                    };
                                    var d = l.meta.level[m.drill_level].x,
                                        c = s.advance_aggregator.setting;
                                    l.meta.level[0].x.length && "date" === d[0].data_type && (c.date_field_fid = d[0].fid, c.date_field_type = d[0].granularity, c.start.granularity = d[0].granularity), angular.forEach(l.meta.level[m.drill_level].y, function (e, t) {
                                        e.advance_aggregator && e.advance_aggregator.type === a && (c.date_field_fid = e.advance_aggregator.setting.date_field_fid, c.date_field_type = e.advance_aggregator.setting.date_field_type)
                                    }), angular.forEach(l.meta.level[m.drill_level].y_optional, function (e, t) {
                                        e.advance_aggregator && e.advance_aggregator.type === a && (c.date_field_fid = e.advance_aggregator.setting.date_field_fid, c.date_field_type = e.advance_aggregator.setting.date_field_type)
                                    })
                                }
                                r = angular.copy(s), n.open({
                                    template: "/static/partials/dialogTemplates/set_retention.html",
                                    className: "ngdialog-theme-default retention-modal activity-modal ngDialog-width-650",
                                    data: {
                                        type: a,
                                        field_index: o,
                                        meta: l.meta,
                                        setting: s.advance_aggregator.setting,
                                        text: "retention" === a ? {
                                            title: m.tips["chart.retentionRateSetting"],
                                            rate: m.tips["chart.retentionRate"],
                                            num: m.tips["chart.retentionNumber"],
                                            typeText: m.tips["chart.retention"],
                                            period: m.tips["chart.retentionPeriod"]
                                        } : {
                                            title: m.tips["chart.activeRateSetting"],
                                            rate: m.tips["chart.activityRate"],
                                            num: m.tips["chart.activityNumber"],
                                            typeText: m.tips["chart.activity"],
                                            period: m.tips["chart.activePeriod"]
                                        }
                                    },
                                    scope: m,
                                    preCloseCallback: function () {
                                        return delete s.show_formula, !!m.preCloseDialog || (angular.toJson(r) !== angular.toJson(s) ? !!confirm(m.tips["chart.notSave"]) && (m.chart_ops.meta.level[m.drill_level][m.yAxis][o] = angular.copy(r), !0) : void 0)
                                    }
                                });
                                break;
                            case "repetition":
                                var u;
                                i != a ? (m.preCloseDialog = !0, m.preCloseDialogSure = !1, s.advance_aggregator.setting = {
                                    aggregator: 2,
                                    calc_type: 1,
                                    calc_condition: {
                                        type: 1,
                                        range: [1, 2]
                                    },
                                    calc_period: {
                                        type: "fixed",
                                        fixed: {
                                            start: 30,
                                            end: {
                                                type: 0,
                                                value: 1
                                            }
                                        },
                                        relative: {
                                            granularity: "week",
                                            week: {
                                                start: 0,
                                                end: 0
                                            },
                                            month: {
                                                start: 0,
                                                end: 0
                                            },
                                            quarter: {
                                                start: 0,
                                                end: 0
                                            },
                                            year: {
                                                start: 0,
                                                end: 0
                                            }
                                        },
                                        accurate: {
                                            start: "",
                                            end: ""
                                        },
                                        expression: ""
                                    }
                                }, u = s.advance_aggregator.setting, l.meta.level[0].x.length && "date" === l.meta.level[0].x[0].data_type && (u.date_field_fid = l.meta.level[0].x[0].fid, u.date_field_type = l.meta.level[0].x[0].granularity), angular.forEach(l.meta.level[m.drill_level].y, function (e, t) {
                                    e.advance_aggregator && "repetition" === e.advance_aggregator.type && (u.date_field_fid = e.advance_aggregator.setting.date_field_fid, u.date_field_type = e.advance_aggregator.setting.date_field_type)
                                }), angular.forEach(l.meta.level[m.drill_level].y_optional, function (e, t) {
                                    e.advance_aggregator && "repetition" === e.advance_aggregator.type && (u.date_field_fid = e.advance_aggregator.setting.date_field_fid, u.date_field_type = e.advance_aggregator.setting.date_field_type)
                                })) : u = s.advance_aggregator.setting, r = angular.copy(s);
                                var f = new RegExp("\\[_field_id_\\]", "g");
                                "expression" === u.calc_period.type && (u.calc_period.expression = u.calc_period.expression.replace(f, "[" + m.fidToName[u.date_field_fid] + "]")), n.open({
                                    template: "/static/partials/dialogTemplates/set_repetition.html",
                                    className: "ngdialog-theme-default repetition-modal",
                                    data: {
                                        field_index: o,
                                        meta: l.meta,
                                        setting: u
                                    },
                                    scope: m,
                                    preCloseCallback: function () {
                                        return delete s.show_formula, !!m.preCloseDialog || (angular.toJson(r) !== angular.toJson(s) ? !!confirm(m.tips["chart.notSave"]) && (m.chart_ops.meta.level[m.drill_level][m.yAxis][o] = angular.copy(r), !0) : void 0)
                                    }
                                });
                                break;
                            case "running":
                                i != a ? (m.preCloseDialog = !0, m.preCloseDialogSure = !1, s.advance_aggregator.setting = {
                                    method: "sum",
                                    reset_period: "all",
                                    running_start_type: 0,
                                    running_start_date: new Date,
                                    checked: "1"
                                }) : void 0 === s.advance_aggregator.setting.running_start_type && (s.advance_aggregator.setting.running_start_type = 0), r = angular.copy(s), n.open({
                                    template: "/static/partials/dialogTemplates/set_running.html",
                                    className: "ngdialog-theme-default running-modal",
                                    data: {
                                        field_index: o,
                                        meta: l.meta.level[m.drill_level],
                                        setting: s.advance_aggregator.setting,
                                        canSetPeriod: !l.meta.level[0].x[0].granularity_name
                                    },
                                    scope: m,
                                    preCloseCallback: function () {
                                        return delete s.show_formula, !!m.preCloseDialog || (angular.toJson(r) !== angular.toJson(s) ? !!confirm(m.tips["chart.notSave"]) && (m.chart_ops.meta.level[m.drill_level][m.yAxis][o] = angular.copy(r), !0) : void 0)
                                    }
                                });
                                break;
                            case "moving":
                                i !== a && (m.preCloseDialog = !0, m.preCloseDialogSure = !1, s.advance_aggregator.setting = {
                                    method: "avg",
                                    prev_values: 2,
                                    next_values: 2
                                }), r = angular.copy(s), n.open({
                                    template: "/static/partials/dialogTemplates/set_moving.html",
                                    className: "ngdialog-theme-default",
                                    data: {
                                        field_index: o,
                                        meta: l.meta,
                                        setting: s.advance_aggregator.setting
                                    },
                                    scope: m,
                                    preCloseCallback: function () {
                                        return delete s.show_formula, !!m.preCloseDialog || (angular.toJson(r) !== angular.toJson(s) ? !!confirm(m.tips["chart.notSave"]) && (m.chart_ops.meta.level[m.drill_level][m.yAxis][o] = angular.copy(r), !0) : void 0)
                                    }
                                });
                                break;
                            case "percentage":
                            case "cancel":
                                m.saveAdvanceAggregator(o, a)
                        }
                    }
                }, m.saveAdvanceAggregator = function (e, t) {
                    m.preCloseDialog = !0, m.preCloseDialogSure = !0;
                    var a = m.chart_ops.meta.level[m.drill_level][m.yAxis][e],
                        i = a.advance_aggregator.setting,
                        r = function (e, t) {
                            var a;
                            if (a = ["retention", "activity"].indexOf(t) > -1 ? i[e].date_range : [i.calc_period.accurate.start, i.calc_period.accurate.end], ["retention", "activity"].indexOf(t) > -1 && [0, 1].indexOf(+i[e].range_type) > -1) {
                                var r = +i[e].range_type;
                                if (a = [], "start" === e) {
                                    if (!isPositiveInteger(i[e].range[0])) return alert(m.tips["chart.retentionMustBeNumber"]), !1;
                                    if (1 === r) {
                                        if (!isPositiveInteger(i[e].range[1])) return alert(m.tips["chart.retentionMustBeNumber"]), !1
                                    } else i[e].range.splice(1, 1)
                                } else if ("end" === e && 2 == +i[e].type && !isPositiveInteger(i[e].offset)) return alert(m.tips["chart.dateMustBePositiveNumber"]), !1
                            } else {
                                if (["retention", "activity"].indexOf(t) > -1 && (i[e].range = []), a[0] && a[1] && new Date(a[1]) - new Date(a[0]) < 0) return alert(m.tips["chart.dateRangeInvalid"]), !1;
                                if (a[0] = a[0] ? Highcharts.dateFormat("%Y-%m-%d", new Date(a[0])) : "", a[1] = a[1] ? Highcharts.dateFormat("%Y-%m-%d", new Date(a[1])) : "", "repetition" === t && (i.calc_period.accurate.start = a[0], i.calc_period.accurate.end = a[1]), !a[0] && !a[1]) return void alert(m.tips["chart.dateRangeRequired"]);
                                a[0] || (a[0] = null), a[1] || (a[1] = null)
                            }
                            return !0
                        };
                    switch (t) {
                        case "percentage":
                            w("percent", e);
                            break;
                        case "cancel":
                            delete a.formatter;
                            break;
                        case "retention":
                        case "activity":
                            if (!r("start", t) || !r("end", t)) return;
                            if (!i.date_field_fid) return alert(m.tips["chart.plzSelectDateField"]), !1;
                            2 === Number(i.aggregator) ? w("percent", e) : w("num", e, 0), angular.forEach(m.chart_ops.meta.level[m.drill_level].y, function (a, r) {
                                r !== e && a.advance_aggregator && a.advance_aggregator.type === t && (a.advance_aggregator.setting.except_fields = i.except_fields)
                            }), angular.forEach(m.chart_ops.meta.level[m.drill_level].y_optional, function (a, r) {
                                r !== e && a.advance_aggregator && a.advance_aggregator.type === t && (a.advance_aggregator.setting.except_fields = i.except_fields)
                            });
                            break;
                        case "repetition":
                            if (!("accurate" !== i.calc_period.type || r("start", "repetition") && r("end", "repetition"))) return;
                            if (!i.date_field_fid) return alert(m.tips["chart.plzSelectDateField"]), !1;
                            if (1 === Number(i.calc_type)) {
                                if (!isPositiveInteger(i.calc_condition.range[0])) return alert(m.tips["chart.positiveNumber"]), !1;
                                if (i.calc_condition.type > 2 && !isPositiveInteger(i.calc_condition.range[0])) return alert(m.tips["chart.positiveNumber"]), !1
                            }
                            if (!("fixed" !== i.calc_period.type || isPositiveInteger(i.calc_period.fixed.start) && isPositiveInteger(i.calc_period.fixed.end.value))) return alert(m.tips["chart.positiveNumber"]), !1;
                            if (2 === Number(i.aggregator) ? w("percent", e) : w("num", e, 0), "expression" === i.calc_period.type) {
                                var n = m.repetitionEvents.checkFormulaGrammar(a.advance_aggregator);
                                if (n) return n.then(function (e) {
                                    e === !0 && (delete a.percentage, delete a.QoQ, delete a.YoY, delete a.yoyQoqType, delete a.yoyQoqSetting, a.advance_aggregator.type = t, m.saveChartImmediate())
                                });
                                return
                            }
                            break;
                        case "moving":
                            if (!isNaturalNumber(i.prev_values) || !isNaturalNumber(i.next_values)) return alert(m.tips["chart.plzTypePositionInteger"]), !1;
                            break;
                        case "running":
                            delete a.formatter, 1 === i.running_start_type ? i.running_start_date = Highcharts.dateFormat("%Y-%m-%d", new Date(i.running_start_date)) : i.running_start_date = null;
                            var o = function (e) {
                                m.chart_ops.meta.level[m.drill_level][e] && angular.forEach(m.chart_ops.meta.level[m.drill_level][e], function (e, t) {
                                    e.advance_aggregator && "running" === e.advance_aggregator.type && (e.advance_aggregator.setting.running_start_date = i.running_start_date, e.advance_aggregator.setting.running_start_type = i.running_start_type)
                                })
                            };
                            o("y"), o("y_optional")
                    }
                    delete a.percentage, delete a.QoQ, delete a.YoY, delete a.yoyQoqType, delete a.yoyQoqSetting, a.advance_aggregator.type = t;
                    var l = m.chart_ops.meta.level[m.drill_level],
                        s = l[m.yAxis][e];
                    m.changeAggragatorForNumberFilter(s), "cancel" === t && delete a.advance_aggregator, m.saveChartImmediate()
                }, m.changeAggragatorForNumberFilter = function (e) {
                    function t(i) {
                        for (var r = 0, n = i.length; r < n; r++) i[r].uniq_id == e.uniq_id && (angular.forEach(a, function (t) {
                            e.hasOwnProperty(t) ? i[r][t] = e[t] : i[r].hasOwnProperty(t) && delete i[r][t]
                        }), i[r].inner_show_name = e.name + m.setAdvanceAggregatorName(e)), i[r].items && i[r].items.length > 0 && t(i[r].items);
                        return i
                    }
                    var a = ["aggregator", "aggregator_name", "is_build_aggregated", "advance_aggregator", "yoyQoqType", "yoyQoqSetting", "YoY", "QoQ", "percentage"],
                        i = m.chart_ops.meta.filter_list_inner;
                    if (i instanceof Array) i = t(i);
                    else
                        for (var r = m.drill_level || 0, n = 0, o = i[r].length; n < o; n++) i[r] = t(i[r]);
                    m.$emit("emitChangeTableFormatting", !0)
                }, m.setNickName = function (t, a) {
                    t = t || e;
                    var i = $(t.target).parents(".data-tag").parent().index(),
                        r = a,
                        o = v();
                    if (i >= 0) var l = angular.copy(o[m.yAxis][i]);
                    else if (r >= 0) var l = angular.copy(o[m.yAxis][r]);
                    n.open({
                        template: "/static/partials/dialogTemplates/nick_name.html",
                        className: "ngdialog-theme-default nick-model",
                        data: {
                            origin_name: l.nick_name,
                            field_index: i >= 0 ? i : r,
                            field: l,
                            save: m.saveNickName
                        }
                    })
                }, t.setNickName = m.setNickName, m.saveNickName = function (e, a, i) {
                    function r(t) {
                        for (var a = 0, i = t.length; a < i; a++) t[a].uniq_id == e.uniq_id && (t[a].nick_name = e.nick_name, t[a].unit_adv = e.unit_adv), t[a].items && t[a].items.length > 0 && r(t[a].items);
                        return t
                    }
                    var n = v(),
                        o = n.tb_statistic && n.tb_statistic.row_setting,
                        l = n[m.yAxis],
                        s = l.length,
                        d = l[a],
                        c = (d.fid, d.uniq_id);
                    m.yAxis;
                    if (d.nick_name = e.nick_name, d.unit_adv = e.unit_adv, d.description = e.description, "virtual" === e.data_type)
                        if (e.parent_uniq_id) {
                            for (var u = 0; u < s; u++)
                                if (l[u].uniq_id === d.parent_uniq_id) {
                                    l[u].row_setting.nick_name = d.nick_name, l[u].row_setting.unit_adv = d.unit_adv, l[u].row_setting.description = d.description;
                                    break
                                }
                        } else o.nick_name = d.nick_name, o.unit_adv = d.unit_adv, o.description = d.description;
                    if ("C310" === n.chart_type && 0 === a && (m.chart_ops.name = e.nick_name ? e.nick_name : e.name), !m.is_gis) {
                        var f = m.chart_ops.meta.filter_list_inner;
                        if (f instanceof Array) f = r(f);
                        else
                            for (var p = m.drill_level || 0, u = 0, g = f[p].length; u < g; u++) f[p] = r(f[p]);
                        if (n.color_setting && 0 == +n.color_setting.mode && n.color_setting.field.length > 0) return void D(n.color_setting.field, m.tb_id).then(function (e) {
                            e.total <= 100 && t.$emit("triggerBuildEnumColorMap", e.result)
                        }).then(function () {
                            m.$emit("emitChangeTableFormatting", !0), m.saveChartImmediate()
                        })
                    }
                    if (n.advanced_sort && n.advanced_sort.length > 0)
                        for (var u = 0, g = n.advanced_sort.length; u < g; u++) {
                            var h = n.advanced_sort[u],
                                _ = h.fid,
                                b = h.uniq_id;
                            h.axis;
                            if (c) {
                                if (b === c) {
                                    !0, h.name = d.nick_name || h.originName;
                                    break
                                }
                            } else if (_) {
                                !0, h.name = d.nick_name || h.originName;
                                break
                            }
                        }
                    m.$emit("emitChangeTableFormatting", !0), m.saveChartImmediate()
                }, m.setNumDigit = function (a) {
                    a = a || e;
                    var i = $(a.target).parents(".data-tag").parent().index(),
                        r = m.chart_ops,
                        o = v(),
                        l = 2,
                        s = angular.copy(o[m.yAxis][i]);
                    if ("COUNT" == s.aggregator || "COUNT_DISTINCT" == s.aggregator) l = 0;
                    else if (m.global.chartData && m.global.chartData.y) {
                        var d;
                        if ("y_scatter" == m.yAxis) {
                            var c = i + r.meta.level[m.drill_level].y.length;
                            d = m.global.chartData.y[c].formatter
                        } else d = m.global.chartData[m.yAxis][i].formatter;
                        l = d ? d[d.check].digit : 2
                    } else l = s.formatter ? s.formatter.num.digit : 2;
                    if (s.formatter || (s.formatter = {
                            check: "num",
                            num: {
                                digit: l || 0,
                                millesimal: !0,
                                unit: 1
                            },
                            percent: {
                                digit: l || 0
                            }
                        }), s.formatter.num.unit) {
                        if (s.formatter.num.unit && "en" == t.language) switch (console.log(s.formatter.num.unit), s.formatter.num.unit) {
                            case "10000":
                                s.formatter.num.unit = "1000";
                                break;
                            case "100000000":
                                s.formatter.num.unit = "1000000"
                        }
                    } else s.formatter.num.unit = 1;
                    n.open({
                        template: "/static/partials/dialogTemplates/set_numdigit.html",
                        className: "ngdialog-theme-default numdigit-model",
                        data: {
                            field: s,
                            field_index: i
                        },
                        scope: m
                    })
                }, m.saveNumdigit = function (e, t) {
                    var a = e.formatter.check,
                        i = e.formatter[a].digit,
                        r = function (e) {
                            c("num" === e ? m.tips["chart.numDigitInvalid"] : m.tips["chart.percentDigitInvalid"])
                        };
                    if (!defined(i) || !isInteger(i)) return void r(a);
                    if ("num" === a && (i > 6 || i < 0) || "percent" === a && (i > 4 || i < 0)) return void r(a);
                    var n = v(),
                        o = n[m.yAxis],
                        l = n.tb_statistic && n.tb_statistic.row_setting;
                    ["C230", "C320", "C330", "C360", "C370"].indexOf(n.chart_type) > -1 ? o.map(function (t) {
                        t.formatter = e.formatter
                    }) : o[t] = e;
                    if ("virtual" === e.data_type)
                        if (!e.parent_uniq_id && l) l.formatter = e.formatter;
                        else
                            for (var s = 0, d = o.length; s < d; s++)
                                if (o[s].uniq_id === e.parent_uniq_id) {
                                    o[s].row_setting.formatter = e.formatter;
                                    break
                                }
                    m.saveChartImmediate()
                }, m.setPostFilter = function (e) {
                    var t = $(e.target).parents(".data-tag").parent().index(),
                        i = v(),
                        r = angular.copy(i[m.yAxis][t]);
                    n.open({
                        template: "/static/partials/dialogTemplates/post_filter.html",
                        className: "ngdialog-theme-default aggr-filter-model",
                        data: {
                            conditions: r.post_filter ? r.post_filter.conditions : [],
                            enabled: r.post_filter && 0 != r.post_filter.enabled,
                            onSave: function (e, a) {
                                var i = v();
                                e && e.length ? i[m.yAxis][t].post_filter = {
                                    enabled: a ? void 0 : 0,
                                    condition_type: 2,
                                    conditions: e
                                } : delete i[m.yAxis][t].post_filter, m.saveChartImmediate()
                            }
                        },
                        scope: m,
                        controller: a
                    })
                }, m.canSetSort = function () {
                    var e = ["C200", "C210", "C211", "C212", "C220", "C240", "C241", "C242", "C243", "C250", "C290", "C330", "C350", "C351", "C352"],
                        t = m.chart_ops.meta.chart_type || (m.chart_ops.meta.level[m.drill_level] ? m.chart_ops.meta.level[m.drill_level].chart_type : "");
                    return e.indexOf(t) > -1
                }, m.setAxisSort = function (e, t, a) {
                    var i = $(event.target).parents(".data-tag").parent().index(),
                        r = m.chart_ops.meta.level[m.drill_level],
                        n = r[m.yAxis][i],
                        o = (r.tb_statistic && r.tb_statistic.row_setting, {
                            fid: n.fid,
                            axis: "y",
                            uniq_id: n.uniq_id,
                            type: t
                        });
                    a.show_formula = !1, m.chart_ops.meta.level[m.drill_level].sort = o, r.is_advanced_sort = 0, m.saveChartImmediate()
                }, m.isCustomFixed = function () {
                    var e = m.current_formula.yoyQoqSetting;
                    return e && !("2" === e.compare_type && "nodate_custom" === e.type)
                }, m.changeYoyModalIndex = function (e) {
                    if (m.yoyModalBodyIndex = e, 1 == e && m.dateFilters.length > 0) {
                        var t = m.yoyQoqDateSetting.date_field_fid || m.current_formula.yoyQoqSetting.date_field_fid;
                        m.getCmpDateRange(t)
                    }
                }, m.removeHour = function (e, t) {
                    var a = "zh" === bdpChart.language ? "不限" : "Unbounded",
                        i = m.yoyQoqDateSetting[e],
                        r = m.yoyQoqDateSetting.select_date_range,
                        n = m.yoyQoqDateSetting.compare_date_range;
                    if (i && t && void 0 !== i[t]) {
                        var o = /00\:00\:00$/,
                            l = /23\:59\:59$/;
                        return n.start && !o.test(n.start) || n.end && !l.test(n.end) || r.start && !o.test(r.start) || r.end && !l.test(r.end) ? i[t] || a : i[t] ? i[t].replace("00:00:00", "").replace("23:59:59", "") : a
                    }
                }, m.getCmpDateRange = function (e) {
                    var t = F(e),
                        a = m.yoyQoqDateSetting.compare_method;
                    if ("0" == a) m.yoyQoqDateSetting.filter_type = ["filter_yoy_year", "filter_yoy_month", "filter_yoy_week"].indexOf(m.yoyQoqDateSetting.filter_type) < 0 ? "filter_yoy_year" : m.yoyQoqDateSetting.filter_type;
                    else if ("1" == a) m.yoyQoqDateSetting.filter_type = "filter_qoq";
                    else if ("2" == a) m.yoyQoqDateSetting.filter_type = "filter_relative";
                    else if ("3" == a) {
                        m.yoyQoqDateSetting.filter_type = "filter_custom", m.yoyQoqDateSetting.select_date_range || (m.yoyQoqDateSetting.select_date_range = {
                            start: null,
                            end: null
                        }), m.yoyQoqDateSetting.compare_date_range || (m.yoyQoqDateSetting.compare_date_range = {
                            start: null,
                            end: null
                        });
                        var i = m.yoyQoqDateSetting.select_date_range,
                            r = m.yoyQoqDateSetting.compare_date_range;
                        r.start || r.end || (r.start = i.start, r.end = i.end)
                    }
                    g.chart.cmpDateRange({
                        date_filter: JSON.stringify(t),
                        yoyQoqSetting: JSON.stringify(m.yoyQoqDateSetting)
                    }).then(function (e) {
                        var t = e.result;
                        if (0 == e.status && t) {
                            var a = t.select_date_range,
                                i = t.compare_date_range;
                            a.start || (a.start = null), a.end || (a.end = null), i.start || (i.start = null), i.end || (i.end = null), m.yoyQoqDateSetting.select_date_range = a, m.yoyQoqDateSetting.compare_date_range = i
                        }
                    })
                }, m.setStringFieldYoYQoQ = function (a, i) {
                    a = a || e;
                    var r = $(a.target).parents(".data-tag").parent().index(),
                        o = m.chart_ops,
                        l = o.meta.level[m.drill_level];
                    m.preCloseDialog = !1, m.current_formula = l[m.yAxis][r];
                    var s = angular.copy(m.current_formula.yoyQoqSetting),
                        c = !!s;
                    m.dateFilters = [];
                    var u = [];
                    [].concat(angular.copy(o.meta.filter_list) || [], bdp.utils.handleInnerFilterLevel(angular.copy(o.meta.filter_list_inner[m.drill_level]) || [])).forEach(function (e) {
                        if ("date" == e.data_type && u.indexOf(e.fid) < 0) {
                            e.range;
                            m.dateFilters.push(e), u.push(e.fid)
                        }
                    }), delete m.current_formula.show_formula, c ? (m.yoyModalBodyIndex = "filter" == m.current_formula.yoyQoqSetting.type ? 1 : 0, "filter" != m.current_formula.yoyQoqSetting.type ? S(c) : (m.yoyQoqDateSetting = angular.copy(m.current_formula.yoyQoqSetting), m.getCmpDateRange(m.yoyQoqDateSetting.date_field_fid), T(c))) : (m.yoyModalBodyIndex = 0, T(c), S(c)), d.post("/api/date_granularity/list", {
                        tb_id: m.currentView ? m.currentView.tb_id : o.tb_id
                    }).then(function (e) {
                        if (0 == e.status) {
                            var a = e.result;
                            m.customGranularity = {
                                year: [{
                                    day: 1,
                                    month: 1,
                                    name: "zh" == t.language ? "自然年" : "Natural Year",
                                    granularity_name: ""
                                }],
                                month: [{
                                    day: 1,
                                    name: "zh" == t.language ? "自然月" : "Natural Month",
                                    granularity_name: ""
                                }],
                                week: [{
                                    day_of_week: 1,
                                    name: "zh" == t.language ? "自然周" : "Natural Week",
                                    granularity_name: ""
                                }]
                            }, a.year.forEach(function (e, t) {
                                m.customGranularity.year.push($.extend(e, {
                                    granularity_name: e.name
                                }))
                            }), a.month.forEach(function (e, t) {
                                m.customGranularity.month.push($.extend(e, {
                                    granularity_name: e.name
                                }))
                            }), a.week.forEach(function (e, t) {
                                m.customGranularity.week.push($.extend(e, {
                                    granularity_name: e.name
                                }))
                            }), n.open({
                                template: "/static/partials/set_string_field_yoy.html",
                                className: "ngdialog-theme-default custom-string-yoy-modal",
                                data: o,
                                scope: m,
                                preCloseCallback: function () {
                                    return delete m.current_formula.show_formula, m.preCloseDialog ? (m.preCloseDialogSure || (delete l[m.yAxis][r].yoyQoqSetting, delete m.yoyQoqDateSetting), !0) : angular.toJson(s) !== angular.toJson(m.current_formula.yoyQoqSetting) ? !!confirm(m.tips["chart.confirmCancelEdit"]) && (l[m.yAxis][r].yoyQoqSetting = angular.copy(s), !0) : void 0
                                }
                            })
                        }
                    });
                    var f = m.current_formula.yoyQoqSetting;
                    f && (f.select_date_range && f.select_date_range.start && f.select_date_range.end && (f.select_date_range.start = f.select_date_range.start, f.select_date_range.end = f.select_date_range.end), f.compare_date_range && f.compare_date_range.start && f.compare_date_range.end && (f.compare_date_range.start = f.compare_date_range.start, f.compare_date_range.end = f.compare_date_range.end))
                }, m.switchYoyGranularity = function (e) {
                    m.current_formula.yoyQoqSetting.granularity_name = "default"
                }, m.switchCompareType = function (e) {
                    2 == e && (m.current_formula.yoyQoqSetting.date_field_type = "day")
                }, m.$watch("current_formula.yoyQoqSetting", function (e, t) {
                    e && (m.yoyQoqDate = C(e))
                }, !0), m.saveyoyQoqSetting = function () {
                    if (1 == m.yoyModalBodyIndex) {
                        if (0 == m.dateFilters.length) return c(m.tips["chart.addDateFilterCondition"]), !1;
                        var e = m.yoyQoqDateSetting.compare_date_range;
                        if (!e.start && !e.end && "3" != m.yoyQoqDateSetting.compare_method) return c(m.tips["chart.compareDateInvalid"]), !1;
                        m.current_formula.yoyQoqSetting = angular.copy(m.yoyQoqDateSetting), m.current_formula.yoyQoqSetting.type = "filter"
                    }
                    var t = m.current_formula.yoyQoqSetting;
                    if (!t.date_field_fid) return c(m.tips["chart.plzSelectDateField"]), !1;
                    if ("nodate_custom" === t.type && "2" == t.compare_type) {
                        if (!t.select_date_range.start || !t.select_date_range.end) return c(m.tips["chart.plzSelectTime"]), !1;
                        if (!t.compare_date_range.start || !t.compare_date_range.end) return c(m.tips["chart.plzCompareTime"]), !1
                    } else if ("nodate_custom" === t.type && "1" == t.compare_type) {
                        if (!t.end.offset) return c(m.tips["chart.plzSelectTime"]), !1;
                        if (!t.start.offset_to_end) return c(m.tips["chart.plzCompareTime"]), !1
                    }
                    m.preCloseDialog = !0, m.preCloseDialogSure = !0, "1" == t.checked ? "2" == t.aggregator ? m.current_formula.formatter = {
                        check: "percent",
                        percent: {
                            digit: 2
                        },
                        num: {
                            digit: 0
                        }
                    } : m.current_formula.formatter = {
                        check: "num",
                        num: {
                            digit: 2
                        },
                        percent: {
                            digit: 0
                        }
                    } : delete m.current_formula.formatter, delete m.current_formula.percentage, delete m.current_formula.advance_aggregator, delete m.current_formula.YoY, delete m.current_formula.QoQ, delete m.current_formula.yoyQoqType, m.changeAggragatorForNumberFilter(m.current_formula), m.saveChartImmediate()
                }, m.setCustomPercentile = function (e, t) {
                    var a = "";
                    t.aggregator.indexOf("PERCENT") >= 0 && t.percent && [5, 10, 25, 50, 75, 90, 95].indexOf(100 * t.percent) < 0 && (a = 100 * t.percent), n.open({
                        template: "/static/partials/dialogTemplates/set_custom_percentile.html",
                        className: "ngdialog-theme-default ngDialog-width-300 set-custom-percentile",
                        data: {
                            customVal: a,
                            event: e,
                            field: t
                        },
                        scope: m
                    })
                }, m.savePercentileSetting = function (e, t, a) {
                    if (!new RegExp("^(\\d|[1-9]\\d|100)$").test(a) || a < 1 || String(a).indexOf(".") >= 0) return void c(m.tips["chart.inputIntBetweenZeroToHundred"]);
                    var i = {
                        name: String(a),
                        type: "PERCENT_" + a,
                        show: "number",
                        percent: a / 100
                    };
                    m.setFormulaToField(e, i, t)
                }, m.isCustomPercentile = function (e) {
                    return "" != e.percent && e.aggregator && e.aggregator.indexOf("PERCENT") >= 0 && [.05, .1, .25, .5, .75, .9, .95].indexOf(Number(e.percent)) < 0
                }, m.goHelp = function (e) {
                    f(e)
                }, m.setAlignmentMethod = function (e, t) {
                    var a = $(e.target).parents(".data-tag").parent(),
                        i = a.index(),
                        r = m.chart_ops.meta.level[m.drill_level],
                        n = r[m.yAxis],
                        o = n[i],
                        l = n.length,
                        s = r.tb_statistic,
                        d = "alignment_method";
                    if (o[d] = t, "virtual" === o.data_type)
                        if (o.parent_uniq_id) {
                            for (var c = 0; c < l; c++)
                                if (n[c].uniq_id === o.parent_uniq_id) {
                                    n[c].row_setting[d] = t;
                                    break
                                }
                        } else s.row_setting[d] = t;
                    m.saveChartImmediate()
                }, m.setAdvanceAggregatorName = p, l(["chart.retentionMustBeNumber", "chart.dateMustBePositiveNumber", "chart.dateRangeInvalid", "chart.dateRangeRequired", "chart.plzSelectDateField", "chart.plzTypePositionInteger", "chart.digitInvalid", "chart.numDigitInvalid", "chart.percentDigitInvalid", "chart.confirmCancelEdit", "chart.topChartRange", "chart.notSave", "chart.positiveNumber", "chart.retentionRateSetting", "chart.retentionRate", "chart.retentionNumber", "chart.retention", "chart.retentionPeriod", "chart.activeRateSetting", "chart.activity", "chart.activePeriod", "chart.activityRate", "chart.activityNumber", "chart.inputIntBetweenZeroToHundred", "chart.plzCompareTime", "chart.plzSelectTime", "chart.compareDateInvalid", "chart.addDateFilterCondition"], m)
            }
            return {
                restrict: "A",
                transclude: !0,
                templateUrl: "/static/partials/formula_list.html",
                scope: !0,
                link: m,
                controller: angular.noop
            }
        }

        function a(e, t, a, i) {
            function r() {
                if (!(e.filter.number_operator >= 0)) return void i(e.tips["filter.pleaseConfigCondition"]);
                var t = [],
                    a = e.filter;
                if (12 == a.number_operator) {
                    if ("number" != typeof a.number_left || "number" != typeof a.number_right) return void i(e.tips["filter.pleaseInputCondition"]);
                    t.push({
                        calc_type: 4,
                        value: a.number_left
                    }), t.push({
                        calc_type: 5,
                        value: a.number_right
                    })
                } else {
                    if ("number" != typeof a.number_both) return void i(e.tips["filter.pleaseInputCondition"]);
                    t.push({
                        calc_type: a.number_operator,
                        value: a.number_both
                    })
                }
                return t
            }
            e.operatorNumberMap = a, e.filter_enabled = !1, e.filter = {
                    number_operator: "",
                    number_both: "",
                    number_left: "",
                    number_right: ""
                }, e.confirmModify = function () {
                    var a = r();
                    e.filter_enabled && !a || (e.filter_enabled || a || (a = [], t.global.hint = null), e.ngDialogData.onSave(a, e.filter_enabled))
                },
                function (t) {
                    1 == t.length ? (e.filter.number_operator = t[0].calc_type, e.filter.number_both = t[0].value, e.filter.number_left = "", e.filter.number_right = "") : 2 == t.length ? (e.filter.number_operator = 12, e.filter.number_both = "", 4 == t[0].calc_type ? (e.filter.number_left = t[0].value, e.filter.number_right = t[1].value) : (e.filter.number_left = t[1].value, e.filter.number_right = t[0].value)) : e.filter.number_operator = e.operatorNumberMap[e.operatorNumberMap.length - 1].value
                }(e.ngDialogData.conditions), e.filter_enabled = !!e.ngDialogData.enabled, 0 === e.ngDialogData.conditions.length && (e.filter_enabled = !0)
        }
        angular.module("BC.directives")
        .directive("fieldFormula", t), 
        t.$inject = [
            "$rootScope", 
            "$stateParams", 
            "formula", 
            "ngDialog", 
            "$getCustomFormula", 
            "$jsTipTranslate", 
            "formulaKeyMap", 
            "commonHttp", 
            "errHint", 
            "$timeout", 
            "operatorHelpLink", 
            "setAdvanceAggregatorName", 
            "commonService", 
            "$translate"], 
            a.$inject = ["$scope", "$rootScope", "AdvfilterOperatorNumberMap", "errHint"]
    }(),
    function () {
        angular.module("BC.directives")
        .directive("timePredicted", ["ngDialog", "formulaKeyMap", "$translate", "errHint", "chartEditService", "$stateParams", function (e, t, a, i, r, n) {
            return {
                scope: {
                    field: "=preField",
                    granularity: "=preGranularity",
                    saveFun: "&preSavefun"
                },
                transclude: !0,
                restrict: "EA",
                template: '\t\t\t\t<a class="cursor-pointer more" ng-click="setPredictOpen(true)">{{ \'chart.timePredicted\' | translate }}<i class="bdp-icon ico-triangle-right" ng-show="field.time_seires_setting && field.time_seires_setting.enable"></i></a>\t\t        <ul class="J-mouseover-hide more-list" ng-if="field.time_seires_setting && field.time_seires_setting.enable">\t\t            <li>\t\t                <a class="cursor-pointer" ng-click="setPredictOpt()">{{ \'settings\' | translate }}</a>\t\t                <a class="cursor-pointer" ng-click="setPredictOpen(false)">{{ \'close\' | translate }}</a>\t\t            </li>\t\t        </ul>        \t',
                replace: !1,
                link: function (o, l, s, d) {
                    function c(e) {
                        "custom" == e.selVal ? (e.showCusSet = !0, e.val = "") : (e.showCusSet = !1, e.val = e.selVal)
                    }

                    function u() {
                        if (e.open({
                                template: "/static/partials/dialogTemplates/time-predicted.html",
                                className: "ngdialog-theme-default time-predicted-dialog",
                                scope: o
                            }), g(), o.field.time_seires_setting) {
                            var t = r.data.y ? window.bdpChart.helper.timePredicted.hasYError(r.data.y) : "chartRendering",
                                a = {
                                    category: "user_interact",
                                    action: "chart_interact",
                                    opt_label: JSON.stringify({
                                        ct_id: n.chartId,
                                        result: t
                                    }),
                                    opt_value: 1
                                };
                            BDPLogger.log("forecast_setting", a)
                        }
                    }

                    function f() {
                        var e = h(),
                            t = m(e);
                        if (1 == t) {
                            if (!o.field.time_seires_setting) {
                                var a = {
                                    category: "user_interact",
                                    action: "chart_interact",
                                    opt_label: JSON.stringify({
                                        ct_id: n.chartId
                                    }),
                                    opt_value: 1
                                };
                                BDPLogger.log("forecast_on", a)
                            }
                            o.field.time_seires_setting = $.extend(!0, o.field.time_seires_setting, e), o.saveFun()
                        } else i(t)
                    }

                    function p(e) {
                        if (o.field.time_seires_setting && o.field.time_seires_setting.enable == e) return !1;
                        if (e) o.setPredictOpt();
                        else {
                            o.field.time_seires_setting.enable = e, o.saveFun();
                            var t = r.data.y ? window.bdpChart.helper.timePredicted.hasYError(r.data.y) : "chartRendering",
                                a = {
                                    category: "user_interact",
                                    action: "chart_interact",
                                    opt_label: JSON.stringify({
                                        ct_id: n.chartId,
                                        result: t
                                    }),
                                    opt_value: 1
                                };
                            BDPLogger.log("forecast_off", a)
                        }
                    }

                    function g() {
                        if (!o.field.time_seires_setting) return !1;
                        var e = o.field.time_seires_setting || {};
                        e.train_range ? (o.form.trainRange.selVal = "custom", o.form.trainRange.showCusSet = !0, o.form.trainRange.start = e.train_range[0], o.form.trainRange.end = e.train_range[1]) : (o.form.trainRange.selVal = "all", o.form.trainRange.showCusSet = !1), o.form.predictRange.val = e.predict_range, o.form.algorithm.val = o.form.algorithm.selVal = e.algorithm, o.form.section.show = e.confidence_interval > -1, o.form.section.range = e.confidence_interval > -1 ? e.confidence_interval : o.form.section.range, o.form.dataProcess = "fill_zero" == e.null_data_process, o.form.solver.val = e.solver || "simple"
                    }

                    function h() {
                        var e = o.form,
                            t = !1;
                        return "all" != e.trainRange.selVal && (e.trainRange.start || e.trainRange.end) || (t = !0), {
                            algorithm: e.algorithm.val,
                            train_range: t ? "" : [e.trainRange.start, e.trainRange.end],
                            predict_range: e.predictRange.val,
                            null_data_process: e.dataProcess ? "fill_zero" : null,
                            confidence_interval: e.section.show ? e.section.range : -1,
                            enable: !0,
                            solver: e.solver.val
                        }
                    }

                    function m(e) {
                        var t = e;
                        return _(t.predict_range) ? t.predict_range > 100 ? a.instant("chart.timePredicted.rangLimit100") : !(t.confidence_interval != -1 && !_(t.confidence_interval)) || a.instant("chart.timePredicted.interval") + a.instant("chart.timePredicted.numberError") : a.instant("chart.timePredicted.range") + a.instant("chart.timePredicted.numberError")
                    }

                    function _(e) {
                        return !(isNaN(Number(e)) || e <= 0 || e % 1 != 0)
                    }
                    var b = a.instant("auto"),
                        v = a.instant("custom"),
                        y = a.instant("chart.timePredicted.quickMode"),
                        w = a.instant("chart.timePredicted.accurateMode");
                    o.formulaKeyMap = t, o.modeTips = a.instant("chart.timePredicted.modeTips"), o.form = {
                        algorithm: "ar",
                        predictRange: {
                            val: void 0
                        },
                        trainRange: {
                            start: void 0,
                            end: void 0,
                            selVal: "all",
                            showCusSet: !1,
                            option: [{
                                key: b,
                                val: "all"
                            }, {
                                key: v,
                                val: "custom"
                            }]
                        },
                        dataProcess: null,
                        section: {
                            show: !0,
                            range: 95
                        },
                        analysis: "",
                        solver: {
                            val: "simple",
                            option: [{
                                key: y,
                                val: "simple"
                            }, {
                                key: w,
                                val: "gridsearch"
                            }]
                        }
                    }, o.changeSelect = c, o.savePredict = f, o.setPredictOpt = u, o.setPredictOpen = p
                }
            }
        }])
    }(),
    function () {
        function e(e, a, i, r, n, o, l, s, d, c) {
            function u(t, i, u) {
                function f(e, a) {
                    var i = !0;
                    return angular.forEach(t.adv_date_list, function (r, o) {
                        a === r.name && e !== r.opt_id && 1 != Number(r.is_global) && (n(t.tips["filter.duplicatedNames"]), i = !1)
                    }), i
                }

                function p(e) {
                    var a = t.adv_date_list;
                    e === t.selected_opt_id && a.length > 0 && (t.selected_opt_id = a[0].opt_id, t.advDataModule.modify(t.selected_opt_id))
                }

                function g(e) {
                    for (var t in e)
                        if (e.hasOwnProperty(t)) return !1;
                    return !0
                }
                t.dropAccept = u.dropAccept, 
                t.doNotModify = u.notModify, 
                t.onFilterChange = t.$eval(u.onFilterChange), 
                t.doNotModify && t.onFilterChange && (t.saveChartImmediate = t.onFilterChange), 
                t.specialFilterList = t.$eval(u.filterList), 
                t.specialTbId = t.$eval(u.tableId);
                var h = GlobalConstant.defaultAdvDateConfig;
                t.filter_list_require = [], 
                t.getFilterList = function () {
                    if (t.specialFilterList) return t.specialFilterList;
                    var e = t.chart_ops && t.chart_ops.meta || {};
                    return "C400" === e.chart_type ? t.viewData.currentLayer ? t.viewData.currentLayer.filter_list || [] : [] : e.filter_list || []
                }, 
                t.getTbId = function () {
                    return t.specialTbId ? t.specialTbId : "C400" === (t.chart_ops.meta || {}).chart_type ? t.viewData.currentLayer.tb_id : t.currentView ? t.currentView.tb_id : t.chart_ops.tb_id
                }, 
                t.getChartId = function () {
                    return t.currentView ? t.currentView.ct_id : r.chartId
                }, 
                t.getLayerId = function () {
                    return t.viewData && t.viewData.currentLayer ? scope.viewData.currentLayer.layer_id : ""
                }, 
                t.advDateService = {
                    list: function (a) {
                        return e.adv_date.list(a).success(function (e) {
                            0 == +e.status && (t.adv_date_list = e.result, 0 == t.adv_date_list.length ? t.advanceView.empty = !0 : t.advanceView.empty = !1)
                        })
                    },
                    modify: function (a, i, r, o) {
                        return e.adv_date.modify(a, i, r).success(function (e) {
                            if (0 != +e.status) n(Number(e.status));
                            else {
                                if (t.advDateService.list(a), n(i ? t.tips.saveSuccess : t.tips.addSuccess), !i) return void(t.selected_opt_id = e.result.opt_id);
                                i === t.getFilterList()[o].range[0] && t.saveChartImmediate({
                                    closeDialog: !1
                                })
                            }
                        })
                    },
                    info: function (a) {
                        0 != t.adv_date_list.length && e.adv_date.info(a).success(function (e) {
                            if ("0" == e.status) {
                                if (t.date = angular.fromJson(e.result), g(t.date)) return;
                                if ("accurate" !== t.date.type ? (t.date.accurate.start = "", t.date.accurate.end = "") : (t.date.accurate.start = e.result.accurate.start, t.date.accurate.end = e.result.accurate.end), t.date.fixed.hasOwnProperty("granularity") || (t.date.fixed.granularity = "day"), "expression" === t.date.type) {
                                    var a = new RegExp("\\[_field_id_\\]", "g");
                                    t.date.expression = t.date.expression.replace(a, "[" + t.current_config_field_name + "]"), l(function () {
                                        t.$broadcast("changeDateExpression", t.date.expression)
                                    }, 50)
                                } else t.$broadcast("changeDateExpression", "");
                                t.original_is_global = t.date.is_global
                            } else errorHandle(e)
                        })
                    },
                    del: function (a, i, r, n, o) {
                        e.adv_date.del(i).success(function (e) {
                            0 != +e.status ? errorHandle(e) : (t.advDateService.list(a), r.range[0] === i && (t.chart_ops.meta.filter_list[n].range = [], t.filterHandler.save({
                                index: n,
                                type: "date",
                                range: [],
                                closeDialog: !1
                            })), o(i))
                        })
                    },
                    order: function (t, a) {
                        e.adv_date.order(t, a).then(function (e) {})
                    }
                }, 
                t.advDataModule = {
                    sort: {
                        start: function (e, t) {},
                        stop: function (e, a) {
                            var i = [];
                            angular.forEach(t.adv_date_list, function (e) {
                                i.push(e.opt_id)
                            }), t.advDateService.order(t.getChartId(), angular.toJson(i))
                        }
                    },
                    switchTab: function (e) {
                        t.date.type = e
                    },
                    modify: function (e) {
                        if ("create" === e) return t.date = angular.copy(h), t.selected_opt_id = void 0, t.advanceView.empty = !1, t.original_is_global = 0, void t.$broadcast("changeDateExpression", t.date.expression);
                        t.advDateService.info(e), t.selected_opt_id = e
                    },
                    save: function () {
                        var e = t.date.accurate.start,
                            a = t.date.accurate.end,
                            i = t.selected_opt_id || "",
                            r = t.getChartId(),
                            o = t.date.name,
                            l = t.date.type,
                            s = t.date.is_global;
                        if ((0 != Number(s) || f(i, o)) && (1 !== t.original_is_global || 0 !== Number(s) || confirm(t.tips["filter.changeScopeTip"]))) {
                            if ("fixed" === l) {
                                if ("0" === t.date.fixed.start) return n(t.tips["filter.inputPositiveNumber"]), !1;
                                if (!isNaturalNumber(t.date.fixed.start) || !isNaturalNumber(t.date.fixed.end.value)) return n(t.tips["chart.plzTypePositionInteger"]), !1
                            } else if ("accurate" === l) {
                                if ("string" == typeof e && (e = new Date(e)), "string" == typeof a && (a = new Date(a)), !e && !a) return alert(t.tips["filter.nullDate"]), !1;
                                if (e.getTime() - a.getTime() > 0) return alert(t.tips["chart.dateRangeInvalid"]), !1
                            } else if ("relative" === l);
                            else if ("expression" === l) {
                                var d = t.checkFormulaGrammar(t.current_config_field_name, t.date.fid, "date");
                                if (d) return d.then(function (o) {
                                    if (!o) return n(t.tips["filter.checkFailed"]), t.checkFormulaGrammarFlag = !1, !1;
                                    t.date.accurate.start = Highcharts.dateFormat("%Y-%m-%d", e), t.date.accurate.end = Highcharts.dateFormat("%Y-%m-%d", a);
                                    var l = angular.toJson(t.date);
                                    t.advDateService.modify(r, i, l, t.current_filter_index)
                                });
                                return
                            }
                            t.date.accurate.start = Highcharts.dateFormat("%Y-%m-%d", e), t.date.accurate.end = Highcharts.dateFormat("%Y-%m-%d", a);
                            var c = angular.toJson(t.date);
                            t.advDateService.modify(r, i, c, t.current_filter_index)
                        }
                    },
                    del: function (e, a) {
                        var i = 1 == a.is_global ? t.tips["filter.delTip"] : t.tips["filter.delTip2"];
                        if (confirm(i)) {
                            var r = t.current_filter_index,
                                n = t.getFilterList()[r];
                            t.advDateService.del(t.getChartId(), e, n, r, p)
                        }
                    }
                }, 
                t.conditionList = [], 
                t.operatorMap = {
                    0: "等于",
                    1: "不等于",
                    6: "包含",
                    7: "不包含",
                    10: "开头包含",
                    11: "结尾包含"
                }, 
                t.operatorMap = s, 
                t.operatorNumberMap = {
                    0: "等于",
                    1: "不等于",
                    2: "大于",
                    3: "小于",
                    4: "大于等于",
                    5: "小于等于",
                    12: "区间"
                }, 
                t.operatorNumberMap = d, 
                t.AdvfilterOperatorList = c, 
                t.new_condition = {
                    operator: "",
                    content: ""
                }, 
                t.addNewCondition = function (e, a) {
                    if (void 0 == a || !a.hasOwnProperty("operator") || "" === a.operator || !a.hasOwnProperty("content") || "" == a.content) return void n(t.tips["filter.inputCompleteCondition"]);
                    t.conditionList.push({
                        name: e,
                        operator: a.operator,
                        content: a.content
                    }), angular.element(".new-condition").val(""), angular.element(".condition-select").val(""), t.new_condition = {
                        operator: "",
                        content: ""
                    }, t.$$phase || t.$digest()
                }, 
                t.removeCondition = function (e) {
                    t.conditionList.splice(e, 1)
                }, 
                t.addStrOpts = function (e, a) {
                    a && a.stopPropagation();
                    var i = !1;
                    if ($.inArray(e.name, t.strFilter.addList) > -1 && (i = !0), i) return void n(t.tips["filter.hasTheFilter"]);
                    t.strFilter.addList.push(e.name), l(function () {
                        var e = $(".add-list").find("ul"),
                            t = e[0].scrollHeight;
                        e.animate({
                            scrollTop: t
                        })
                    }, 300)
                }, 
                t.delStrOpts = function (e, a) {
                    a && a.stopPropagation();
                    for (var i = t.strFilter.searchList, r = 0, n = i.length; r < n; r++)
                        if (i[r].name == t.strFilter.addList[e]) {
                            i[r].select = !1;
                            break
                        }
                    t.strFilter.addList.splice(e, 1)
                }, 
                t.delAll = function () {
                    t.strFilter.addList = []
                }, 
                t.addAll = function () {
                    var e = [],
                        a = t.strFilter.keyword;
                    if (a ? angular.forEach(t.strFilter.searchList, function (t) {
                            t.name.toLowerCase().indexOf(a.toLowerCase()) > -1 && e.push(t)
                        }) : e = angular.copy(t.strFilter.searchList), 0 == t.strFilter.addList.length) return void angular.forEach(e, function (e) {
                        t.strFilter.addList.push(e.name)
                    });
                    angular.forEach(e, function (e) {
                        $.inArray(e.name, t.strFilter.addList) < 0 && t.strFilter.addList.push(e.name)
                    })
                }, 
                t.checkFormulaGrammarFlag = !1, 
                t.checkFormulaGrammar = function (e, i, r) {
                    if ("" == e && (e = t.current_config_field_name), "string" == r || "sub_date" == r) {
                        var o = t.strFilter.expression_str;
                        if ("" == o) return void n(t.tips["filter.pleaseInputExpression"]);
                        if (o.indexOf(e) < 0 && o.indexOf("[_field_id_]") < 0) return void n(t.tips["filter.pleaseInputFieldName"] + ": [" + e + "]");
                        e = bdp.utils.requote(e);
                        var l = new RegExp("\\[" + e + "\\]", "g");
                        t.strFilter.expression_str = o.replace(l, "[_field_id_]");
                        var s = {
                            ct_id: t.getChartId(),
                            tb_id: t.getTbId(),
                            fid: i,
                            expression: t.strFilter.expression_str
                        }
                    } else if ("date" == r) {
                        var o = t.date.expression;
                        if ("" == o) return void n(t.tips["filter.pleaseInputExpression"]);
                        if (o.indexOf(e) < 0 && o.indexOf("[_field_id_]") < 0) return void n(t.tips["filter.pleaseInputFieldName"] + ": [" + e + "]");
                        e = bdp.utils.requote(e);
                        var l = new RegExp("\\[" + e + "\\]", "g");
                        t.date.expression = o.replace(l, "[_field_id_]");
                        var s = {
                            ct_id: t.getChartId(),
                            tb_id: t.getTbId(),
                            fid: t.current_fid,
                            expression: t.date.expression
                        }
                    } else if ("number" == r) {
                        var o = t.numberFilter.expression_str;
                        if ("" == o) return void n(t.tips["filter.pleaseInputExpression"]);
                        if (o.indexOf(e) < 0 && o.indexOf("[_field_id_]") < 0) return void n(t.tips["filter.pleaseInputFieldName"] + ": [" + e + "]");
                        e = bdp.utils.requote(e);
                        var l = new RegExp("\\[" + e + "\\]", "g");
                        t.numberFilter.expression_str = o.replace(l, "[_field_id_]");
                        var s = {
                            ct_id: t.getChartId(),
                            tb_id: t.getTbId(),
                            fid: i,
                            expression: t.numberFilter.expression_str
                        }
                    }
                    return t.expressionChangedFlag = !1, a.post("/api/expression/syntax_verify", s).then(function (e) {
                        return 0 == e.status ? (n(t.tips["filter.checkSuccess"]), t.checkFormulaGrammarFlag = !0, !0) : (n(t.tips["filter.checkFailed"]), t.checkFormulaGrammarFlag = !1, !1)
                    })
                }, 
                t.removeFilter = function () {
                    t.is_new_add && t.getFilterList().pop()
                }, 
                t.setFilterList = function (e) {
                    t.filterRangeList[e].list = [], angular.forEach(t.strFilter.addList, function (a) {
                        t.filterRangeList[e].list.push({
                            name: a
                        })
                    }), t.filterRangeList[e].range = t.strFilter.addList
                }, 
                t.expressionChanged = function (e) {
                    t.expressionChangedFlag = e
                }, 
                t.insertFieldNameToExpression = function (e) {
                    t.expressionChangedFlag = !0, t.$broadcast("insertFieldNameToExpression", e)
                }, 
                o(["filter.duplicatedNames", "filter.nullTitle", "filter.nullDate", "filter.delTip", "filter.delTip2", "filter.changeScopeTip", "chart.plzTypePositionInteger", "chart.dateRangeInvalid", "filter.inputPositiveNumber", "saveSuccess", "addSuccess", "filter.itemExist", "filter.inputCompleteCondition", "filter.hasTheFilter", "filter.pleaseInputExpression", "filter.pleaseInputFieldName", "filter.pleaseCheckGrammar", "filter.checkSuccess", "filter.hasChecked", "filter.checkFailed"], t)
            }
            return {
                restrict: "A",
                transclude: !0,
                replace: !0,
                templateUrl: "/static/partials/chart-filter.html",
                link: u,
                controller: t
            }
        }

        function t(e, t, a, i, r, n, o, l, s, d, c) {
            function u(e) {
                var i = e.tb_id,
                    r = e.fid,
                    n = e.ct_id;
                t.loading[r] = !0, a.field.getRange(i, r, n).success(function (a) {
                    t.loading[r] = !1, "0" == a.status ? e.callback(a.result, r) : errorHandle(a)
                })
            }

            function f(e) {
                var a = !1;
                return angular.forEach(t.adv_date_list, function (t, i) {
                    "" != e && e == t.opt_id && (a = !0)
                }), a
            }

            function p(e, a) {
                var i = e.data_type,
                    r = e.range,
                    n = e.total,
                    o = t.getFilterList(),
                    l = o.length - 1;
                if (t["show_filter_" + a] = !0, "string" == i || "sub_date" == i) t.filterRangeList[a] = {
                    list: [],
                    total: e.total,
                    range: []
                }, angular.forEach(r, function (e) {
                    t.filterRangeList[a].list.push({
                        name: e,
                        check: !0
                    })
                }), t.filterRangeList[a].range = r, t.filterRangeList[a].type = "exact", t.filterRangeList[a].range_type = 1, o[l] && (o[l].total = n, g(o[l].fid));
                else {
                    var s = r || ["", ""];
                    o[l].range = s, "number" == i && (t.numRange["n" + l] = {}, t.numRange["n" + l].a = s[0], t.numRange["n" + l].b = s[1], t.initNumRange["n" + l] = {}, t.initNumRange["n" + l].a = s[0], t.initNumRange["n" + l].b = s[1])
                }
                if ("date" == i) {
                    if (t.chart_ops.meta.filter_list_inner && !(t.chart_ops.meta.filter_list_inner instanceof Array)) {
                        var d = t.chart_ops.meta.filter_list_inner[t.drill_level],
                            c = "";
                        angular.forEach(d, function (e) {
                            e.fid != a || "date" != e.data_type || "" != e.granularity || e.hasOwnProperty("aggregator") || (c = e.range)
                        });
                        var u = t.getFilterList();
                        c && c.length > 0 && f(c[0]) && angular.forEach(u, function (e) {
                            e.fid == a && (e.range = c)
                        })
                    }
                    t.saveChartImmediate({
                        not_need_redraw: "number" !== i,
                        only_refresh_data: !1,
                        is_drill_chart: !!$(".drill-crumbs").length
                    })
                }
            }

            function g(e, a) {
                var i = t.getFilterList(),
                    r = [];
                angular.forEach(i, function (i) {
                    if (i.fid == e) {
                        if (!t.filterRangeList[e]) return;
                        if (i.adv_type = a, i.range_type = t.strAdvFilter.range_type, "exact" == a)
                            if (angular.forEach(t.filterRangeList[e].list, function (e) {
                                    r.push(e.name)
                                }), t.filterRangeList[e].range = r, t.filterRangeList[e].type = t.strAdvFilter.type, "date" === i.data_type) i.is_all = !1;
                            else {
                                var n = [];
                                n.push(angular.toJson(r)), i.range = n, i.is_all = 0 === r.length || r.length === t.filterRangeList[e].list.length, i.is_all = !1
                            }
                        else if ("condition" == a) {
                            t.loading[e] = !1, t.filterRangeList[e] = {
                                list: [],
                                range: [],
                                type: ""
                            }, t.filterRangeList[e].range = angular.fromJson(t.strAdvFilter.config), t.filterRangeList[e].list = angular.fromJson(t.strAdvFilter.config), t.filterRangeList[e].type = t.strAdvFilter.type;
                            var n = [];
                            n.push(t.strAdvFilter.config), i.range = n, i.is_all = !1
                        } else if ("expression" == a) {
                            var n = [];
                            n.push(t.strAdvFilter.config), i.range = n, i.is_all = !1
                        }
                    }
                })
            }

            function h(e, a) {
                if (!t.doNotModify)
                    if (t.chart_ops.meta.filter_list_inner instanceof Array) {
                        var i = t.chart_ops.meta.filter_list_inner,
                            r = function (t) {
                                angular.forEach(t, function (t) {
                                    t.fid != a || t.granularity ? t.items.length > 0 && r(t.items) : t.range = e.range
                                })
                            };
                        r(i)
                    } else {
                        var n = function (t) {
                            angular.forEach(t, function (t) {
                                t.hasOwnProperty("inner_adv_type") || (t.inner_adv_type = ""), t.fid != a || t.granularity || "" != t.inner_adv_type ? t.items.length > 0 && n(t.items) : t.range = e.range
                            })
                        };
                        if (t.chart_ops.meta.level_fields)
                            for (var o = t.chart_ops.meta.level_fields.length || 1, l = 0; l < o; l++) n(t.chart_ops.meta.filter_list_inner[l])
                    }
            }
            t.date_active = {}, 
            t.numRange = {}, 
            t.initNumRange = {}, 
            t.selectAll = {}, 
            t.filterRangeList = t.filterRangeList || {}, 
            t.loading = {}, 
            t.advanceView = {}, 
            e.dateTimeByHalfHour = d, 
            t.goHelp = function (e) {
                l(e)
            }, 
            t.filterHandler = {
                startDelFilter: function () {
                    angular.element(".gis-main,.chart-main,.chart-left-side").css({
                        overflow: "visible"
                    })
                },
                removePosition: function () {
                    angular.element(".filter-layer").css({
                        overflow: "visible"
                    })
                },
                addFilter: function (a, i) {
                    if (2 == e.guide && 3 == e.enterprise_type) {
                        if (8 == e.guideStep) return !1;
                        if (9 == e.guideStep) return !1
                    }
                    if (1 === t.dragField.is_build_aggregated) return o(t.tips["filter.buildAggregatedTip"]), !1;
                    if (t.doNotModify);
                    else if (!t.chart_ops || t.removeFaild) return;
                    if (1 === t.dragIsBuildAggregated) return o(t.tips["filter.buildAggregatedTip"]), !1;
                    for (var r = t.getFilterList() || [], n = t.getTbId(), l = t.dragFieldFid, s = t.dragFieldName, d = t.dragFieldType, c = t.getChartId(), f = 0; f < r.length; f++)
                        if (l == r[f].fid) return alert(t.tips["filter.exist"]), !1;
                    r.push({
                        fid: l,
                        name: s,
                        data_type: d
                    }), "string" == r[r.length - 1].data_type && t.strFilter.showAdvanceString("", "", r.length - 1, {
                        fid: l,
                        name: s,
                        data_type: d
                    }), "sub_date" == r[r.length - 1].data_type && t.strFilter.showAdvanceString("", "", r.length - 1, {
                        fid: l,
                        name: s,
                        data_type: d
                    }), "number" == r[r.length - 1].data_type && t.numberFilter.showAdvanceNumber("", "", r.length - 1, s), "date" != r[r.length - 1].data_type || t.adv_date_list || t.advDateService && t.advDateService.list("xxxxxxx"), "date" == r[r.length - 1].data_type && u({
                        tb_id: n,
                        fid: l,
                        ct_id: c,
                        data_type: d,
                        callback: p
                    })
                },
                delFilter: function (e, a, r, n) {
                    var o = $(".filter-layer").width();
                    t.show_custom_date && (t.show_custom_date = !t.show_custom_date), angular.element(".gis-main,.chart-main,.chart-left-side,.filter-layer").css({
                        overflow: ""
                    });
                    var l = (a.position.top, a.position.left);
                    if (l + o > 0 && l <= o) return angular.element(e.target).attr("style", ""), void(t.removeFaild = !0);
                    if (!("number" != typeof r && r < 0)) {
                        var s = t.getFilterList(),
                            d = "";
                        if (t.doNotModify || "date" == n || ("string" === n || "sub_date" === n ? d = "/api/adv_enum/delete" : "number" === n && (d = "/api/adv_num/delete"), i.post(d, {
                                ct_id: t.getChartId(),
                                tb_id: t.getTbId(),
                                layer_id: t.getLayerId(),
                                fid: s[r].fid
                            }).then(function (e) {
                                0 != e.status && errorHandle(e)
                            })), "string" === n) {
                            var c = t,
                                u = !t.currentView;
                            s.splice(r, 1), t.saveChartImmediate({
                                not_need_redraw: u,
                                only_refresh_data: u,
                                callback: function (e) {
                                    c.$broadcast("chartFilterChange", {
                                        saveChartOpts: {
                                            not_need_redraw: !1,
                                            only_refresh_data: !1,
                                            is_drill_chart: !!$(".drill-crumbs").length
                                        }
                                    })
                                }
                            })
                        } else {
                            if ("date" === n) {
                                (t.chart_ops.meta.level || []).forEach(function (e) {
                                    [].concat(e.y || [], e.y_optional || []).forEach(function (e) {
                                        e.yoyQoqSetting && "filter" === e.yoyQoqSetting.type && s[r].fid === e.yoyQoqSetting.date_field_fid && delete e.yoyQoqSetting
                                    })
                                })
                            }
                            s.splice(r, 1), t.saveChartImmediate({
                                not_need_redraw: !1,
                                only_refresh_data: !1,
                                is_drill_chart: !!$(".drill-crumbs").length
                            })
                        }
                    }
                },
                save: function (a) {
                    var i = a.index,
                        r = a.range,
                        n = t.getFilterList(),
                        l = n[a.index].fid,
                        s = [];
                    if ("chart_edit" === e.view && "gis_edit" !== e.editGisView && (s = t.chart_ops.meta.level[t.drill_level].y.concat(t.chart_ops.meta.level[t.drill_level].y_optional || [])), "number" == a.type) {
                        if ((r[0] < t.initNumRange["n" + i].a || r[0] > t.initNumRange["n" + i].b) && (n[i].range[0] = t.initNumRange["n" + i].a, r[0] = t.initNumRange["n" + i].a), (r[1] < t.initNumRange["n" + i].a || r[1] > t.initNumRange["n" + i].b) && (n[i].range[1] = t.initNumRange["n" + i].b, r[1] = t.initNumRange["n" + i].b), isObjectEmpty(t.numRange["n" + i]) && (t.numRange["n" + i] = {}, t.numRange["n" + i] = {}), t.numRange["n" + i].a == r[0] && t.numRange["n" + i].b == r[1]) return;
                        t.numRange["n" + i].a = r[0], t.numRange["n" + i].b = r[1]
                    } else if ("custom_date" == a.type) a.range = n[a.index].range = r;
                    else if ("date" == a.type) {
                        var d = !1;
                        if (1 === a.range.length && t.adv_date_list.forEach(function (e, t) {
                                if (e.opt_id === a.range[0])
                                    for (var i = angular.fromJson(e.config), r = 0, n = s.length; r < n; r++) {
                                        var o = s[r];
                                        if (o.yoyQoqSetting && "filter" === o.yoyQoqSetting.type && o.yoyQoqSetting.date_field_fid === l) {
                                            i.expression && "" != i.expression && (d = !0);
                                            break
                                        }
                                    }
                            }), d && !confirm(t.tips["filter.switchExpTip"])) return
                    }
                    if ("date" == a.type || "custom_date" == a.type) {
                        var c = s.some(function (e, t) {
                            return e.yoyQoqSetting && "filter" === e.yoyQoqSetting.type && e.yoyQoqSetting.date_field_fid === l
                        });
                        if (0 === a.range.length || "custom_date" == a.type && (!a.range[0] || !a.range[1])) {
                            for (var u = [], f = 0, p = s.length; f < p; f++) {
                                var g = s[f];
                                !g.yoyQoqSetting || "filter" !== g.yoyQoqSetting.type || g.yoyQoqSetting.date_field_fid !== l || 0 !== a.range.length && "1" != g.yoyQoqSetting.compare_method || u.push(g.nick_name || g.name)
                            }
                            c && u.length > 0 && o(t.tips["filter.addItemTip"] + u.join("/"))
                        }
                        h(a, l), t.date_active[l] = a.range, n[a.index].range = r, t.selected_opt_id = a.range[0]
                    }
                    if ("string" === a.type) {
                        var m = t,
                            _ = !t.currentView;
                        t.saveChartImmediate({
                            not_need_redraw: _,
                            only_refresh_data: _,
                            getChartInfo: "date" !== a.type && "custom_date" !== a.type,
                            closeDialog: a.closeDialog !== !1,
                            callback: function (e) {
                                m.$broadcast("chartFilterChange", {
                                    saveChartOpts: {
                                        not_need_redraw: !1,
                                        only_refresh_data: !1,
                                        is_drill_chart: !!$(".drill-crumbs").length
                                    }
                                })
                            }
                        })
                    } else t.saveChartImmediate({
                        not_need_redraw: !1,
                        only_refresh_data: !1,
                        is_drill_chart: !!$(".drill-crumbs").length,
                        getChartInfo: "date" !== a.type && "custom_date" !== a.type,
                        closeDialog: a.closeDialog !== !1
                    })
                },
                enterToSave: function (e, a) {
                    13 == e.keyCode && t.filterHandler.save(a)
                }
            }, 
            t.check_all = !0, t.filterItemHandler = {
                getFilterRange: function (e, a, i) {
                    var r = t.getFilterList() || [];
                    t.getTbId(), t.getChartId();
                    if ("string" != e && "sub_date" != e || t["show_filter_" + a])
                        if ("number" == e) {
                            if (!r[i] || r[i].fid != a) return;
                            "condition" == r[i].adv_type ? (t.loading[a] = !1, t.filterRangeList[a] = {
                                list: [],
                                range: [],
                                type: ""
                            }, t.filterRangeList[a].range = angular.fromJson(r[i].range), t.filterRangeList[a].list = angular.fromJson(t.filterRangeList[a].range[0]), t.filterRangeList[a].type = r[i].adv_type, t["show_filter_" + a] = !t["show_filter_" + a]) : "expression" == r[i].adv_type && (t.loading[a] = !1, t.filterRangeList[a] = {
                                list: [],
                                range: [],
                                type: ""
                            }, t.filterRangeList[a].range = angular.fromJson(r[i].range), t.filterRangeList[a].type = r[i].adv_type, t["show_filter_" + a] = !t["show_filter_" + a])
                        } else t["show_filter_" + a] = !t["show_filter_" + a];
                    else {
                        if (!r[i] || r[i].fid != a) return;
                        if ("exact" == r[i].adv_type) {
                            t.filterRangeList[a] = {
                                list: [],
                                range: [],
                                total: "",
                                type: ""
                            }, t.loading[a] = !1, t.filterRangeList[a].range_type = r[i].range_type, t.filterRangeList[a].range = r[i].range, t.filterRangeList[a].type = r[i].adv_type;
                            var n = angular.fromJson(t.filterRangeList[a].range[0]);
                            angular.forEach(n, function (e) {
                                t.filterRangeList[a].list.push({
                                    name: e
                                })
                            }), t["show_filter_" + a] = !t["show_filter_" + a]
                        } else "condition" == r[i].adv_type ? (t.loading[a] = !1, t.filterRangeList[a] = {
                            list: [],
                            range: [],
                            type: ""
                        }, t.filterRangeList[a].range = angular.fromJson(r[i].range), t.filterRangeList[a].list = angular.fromJson(t.filterRangeList[a].range[0]), t.filterRangeList[a].type = r[i].adv_type, t["show_filter_" + a] = !t["show_filter_" + a]) : "expression" == r[i].adv_type && (t.loading[a] = !1, t.filterRangeList[a] = {
                            list: [],
                            range: [],
                            type: ""
                        }, t.filterRangeList[a].range = angular.fromJson(r[i].range), t.filterRangeList[a].type = r[i].adv_type, t["show_filter_" + a] = !t["show_filter_" + a])
                    }
                },
                isShowFilter: function (e) {
                    return !!t["show_filter_" + e]
                },
                setState: function (e) {
                    var a = t.filterRangeList[e],
                        i = 0;
                    angular.forEach(a.list, function (e) {
                        e.check && i++
                    }), a.select_len = i
                },
                selectAll: function (e, a) {
                    t.filterRangeList[a].select_len = e ? t.filterRangeList[a].list.length : 0, angular.forEach(t.filterRangeList[a].list, function (t) {
                        t.check = e
                    })
                },
                useConfig: function (e, a) {
                    e.is_config = a, angular.forEach(t.filterRangeList[e.fid].list, function (e) {
                        e.check = a
                    })
                }
            }, 
            t.dateFilter = {
                showFilterDatePicker: function (e, a) {
                    if (a.length > 1) {
                        var i = a[0] ? a[0].split(" ")[1] || "00:00:00" : "00:00:00",
                            n = a[1] ? a[1].split(" ")[1] || "23:59:59" : "23:59:59";
                        a = a.concat([i, n])
                    } else a = (1 === a.length && a[0].indexOf("opt_"), [+new Date, +new Date, "00:00:00", "23:59:59"]);
                    r.open({
                        template: "/static/partials/dialogTemplates/custom_date_modal.html",
                        className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                        data: {
                            index: e,
                            range: a
                        },
                        scope: t
                    })
                },
                showAdvanceDate: function (e, a, i) {
                    t.current_config_field_name = a.name, t.current_fid = a.fid, t.current_filter_index = i, t.adv_date_list.length > 0 ? t.advanceView.empty = !1 : t.advanceView.empty = !0, t.checkFormulaGrammarFlag = !1, t.expressionChangedFlag = !1, e && e.stopPropagation();
                    var n = t.getFilterList()[i].range;
                    1 == n.length ? t.selected_opt_id = n[0] : t.adv_date_list.length > 0 && (t.selected_opt_id = t.adv_date_list[0].opt_id), t.selected_opt_id ? t.advDataModule.modify(t.selected_opt_id) : t.advanceView.empty = !0, r.open({
                        template: "/static/partials/dialogTemplates/advance_date_filter.html",
                        className: "ngdialog-theme-default advance-date-modal",
                        scope: t
                    })
                },
                setExpression: function (e) {
                    t.date.expression = e
                }
            }, 
            t.saveDateRange = function (e) {
                var a = e.sDate ? e.sDate + " " + e.sDateHour : null,
                    i = e.eDate ? e.eDate + " " + e.eDateHour : null;
                if (!a && !i) return o(t.tips["chart.dateRangeRequired"]), !1;
                if (a && i) {
                    if (!e.sDateHour) return o(t.tips["filter.startDateErr2"]), !1;
                    if (!e.eDateHour) return o(t.tips["filter.endDateErr2"]), !1;
                    if (new Date(a) - new Date(i) > 0) return o(t.tips["filter.dateRangeInvalid"]), !1
                } else {
                    if (a && !i && !e.sDateHour) return o(t.tips["filter.startDateErr2"]), !1;
                    if (!a && i && !e.eDateHour) return o(t.tips["filter.endDateErr2"]), !1
                }
                t.filterHandler.save({
                    range: [a, i],
                    index: e.data.index,
                    type: "custom_date"
                })
            }, 
            t.strFilter = {
                fid: "",
                name: "",
                granularity: "",
                keyword: "",
                filterKwd: "",
                data_type: "string",
                is_compare: "",
                searchList: [],
                addList: [],
                condition_type: "",
                expression_str: "",
                type: "",
                total: 0,
                showAdvanceString: function (e, i, n, o) {
                    if (e && e.stopPropagation(), this.total = 0, this.keyword = "", this.filterKwd = "", this.searchList = [], this.addList = [], this.conditionList = [], this.condition_type = 1, this.expression_str = "", t.checkFormulaGrammarFlag = !1, t.expressionChangedFlag = !1, i ? (i.hasOwnProperty("range_type") || (i.range_type = 1), t.strAdvFilter = {
                            ct_id: t.getChartId(),
                            tb_id: t.getTbId(),
                            layer_id: t.getLayerId(),
                            type: i.adv_type,
                            fid: i.fid,
                            config: i.range,
                            range_type: i.range_type,
                            data_type: "string"
                        }, this.fid = i.fid, this.name = i.name, this.granularity = i.granularity || "", this.data_type = i.data_type, this.adv_type = i.adv_type, this.is_compare = !!i.is_compare, t.is_new_add = !1) : (t.strAdvFilter = {
                            ct_id: t.getChartId(),
                            tb_id: t.getTbId(),
                            layer_id: t.getLayerId(),
                            type: "exact",
                            fid: t.dragFieldFid,
                            config: [],
                            range_type: 1,
                            data_type: "string"
                        }, this.fid = o.fid, this.name = o.name, this.granularity = "", this.data_type = o.data_type, this.adv_type = "exact", this.is_compare = "", t.is_new_add = !0), t.current_filter_index = n, t.conditionList = [], t.current_config_field_name = t.strFilter.name, t.showLoading = !0, i)
                        if (a.field.getRange(t.getTbId(), i.fid, t.getChartId()).success(function (e) {
                                "0" == e.status && (t.strFilter.total = e.result.total, e.result.total, angular.forEach(e.result.range, function (e) {
                                    t.strFilter.searchList.push({
                                        name: e
                                    })
                                }), t.showLoading = !1)
                            }), "exact" == i.adv_type) {
                            t.strFilter.addList = angular.fromJson(i.range[0]) || [], t.filterRangeList[i.fid] = {
                                list: [],
                                range: [],
                                total: "",
                                type: ""
                            }, t.filterRangeList[i.fid].range_type = i.range_type, t.filterRangeList[i.fid].range = i.range, t.filterRangeList[i.fid].type = i.adv_type;
                            var l = angular.fromJson(t.filterRangeList[i.fid].range[0]);
                            angular.forEach(l, function (e) {
                                t.filterRangeList[i.fid].list.push({
                                    name: e
                                })
                            })
                        } else if ("condition" == i.adv_type) {
                        var s = angular.fromJson(i.range),
                            d = angular.fromJson(s[0]);
                        t.strFilter.condition_type = d.condition_type, angular.forEach(d.conditions, function (e) {
                            t.conditionList.push({
                                name: i.name,
                                operator: e.calc_type,
                                content: e.value
                            })
                        }), t.filterRangeList[i.fid] = {
                            list: [],
                            range: [],
                            type: ""
                        }, t.filterRangeList[i.fid].range = i.range, t.filterRangeList[i.fid].list = angular.fromJson(t.filterRangeList[i.fid].range[0]), t.filterRangeList[i.fid].type = i.adv_type
                    } else if ("expression" == i.adv_type) {
                        t.strFilter.expression_str = i.range[0];
                        var c = new RegExp("\\[_field_id_\\]", "g");
                        t.strFilter.expression_str = t.strFilter.expression_str.replace(c, "[" + i.name + "]"), t.filterRangeList[i.fid] = {
                            list: [],
                            range: [],
                            type: ""
                        }, t.filterRangeList[i.fid].range = angular.fromJson(i.range), t.filterRangeList[i.fid].type = i.adv_type
                    }
                    i || (t.filterRangeList[t.strFilter.fid] = {
                        list: [],
                        range: [],
                        total: "",
                        type: "",
                        range_type: ""
                    }, t.loading[t.strFilter.fid] = !1, t["show_filter_" + t.strFilter.fid] = !1, a.field.getRange(t.getTbId(), t.strFilter.fid, t.getChartId()).success(function (e) {
                        if ("0" == e.status) {
                            t.strFilter.total = e.result.total, e.result.total;
                            var a = t.getFilterList() || [],
                                i = a.length - 1;
                            t.strFilter.searchList = [], angular.forEach(e.result.range, function (e) {
                                t.strFilter.searchList.push({
                                    name: e
                                })
                            }), t.selectAll[t.strFilter.fid] = 1, a[i] && (a[i].total = e.result.total, g(a[i].fid, "exact")), t.showLoading = !1
                        } else errorHandle(e)
                    })), r.open({
                        template: "/static/partials/dialogTemplates/chart-filter-string-modal.html",
                        className: "ngdialog-theme-default str-filter-model advance-string-modal ",
                        scope: t,
                        showClose: !1
                    }), angular.element(".advance-string-modal .ngdialog-close").css("display", "none"), angular.element(".advance-string-modal .search-list .query-text").val("")
                },
                saveAdvStrFilter: function () {
                    var e = t.strAdvFilter.type;
                    if ("exact" == e) {
                        if (0 == t.strFilter.addList.length) return void o(t.tips["filter.pleaseSelectItem"]);
                        t.strAdvFilter.config = angular.toJson(t.strFilter.addList)
                    } else if ("condition" == e) {
                        if (0 == t.conditionList) return void o(t.tips["filter.pleaseAddCondition"]);
                        t.strAdvFilter.config = {
                            condition_type: 1,
                            conditions: []
                        }, t.strAdvFilter.config.condition_type = t.strFilter.condition_type, angular.forEach(t.conditionList, function (e) {
                            t.strAdvFilter.config.conditions.push({
                                calc_type: e.operator,
                                value: e.content
                            })
                        }), t.strAdvFilter.config = angular.toJson(t.strAdvFilter.config)
                    } else if ("expression" == e) {
                        t.filterRangeList[t.strAdvFilter.fid].type = e;
                        var a = t.checkFormulaGrammar(t.current_config_field_name, t.strFilter.fid, "string");
                        if (a) return a.then(function (e) {
                            return e ? (t.strAdvFilter.config = t.strFilter.expression_str, void t.strFilter.strFilterModify()) : void o(t.tips["filter.checkFailed"])
                        });
                        return
                    }
                    t.filterRangeList[t.strAdvFilter.fid].range_type = t.strAdvFilter.range_type, t.filterRangeList[t.strAdvFilter.fid].type = e, t.strFilter.strFilterModify()
                },
                strFilterModify: function () {
                    var e;
                    e = t.doNotModify ? c.when({
                        status: 0
                    }) : i.post("/api/adv_enum/modify", t.strAdvFilter), e.then(function (e) {
                        if (0 == e.status) {
                            var a = t.strAdvFilter.fid,
                                i = t.strAdvFilter.type;
                            t["show_filter_" + a] = !0, "exact" == i ? (t.setFilterList(a), g(a, i)) : "condition" != i && "expression" != i || g(a, i), r.closeAll(), t.loading[a] = !1, t["show_filter_" + a] = !0, t.filterHandler.save({
                                range: t.filterRangeList,
                                index: t.current_filter_index,
                                type: t.strAdvFilter.data_type
                            })
                        }
                    })
                },
                setExpression: function (e) {
                    t.strFilter.expression_str = e
                },
                enterToQuery: function (e) {
                    13 == e.e.keyCode && (t.strFilter.filterKwd = t.strFilter.keyword, e.realSearch && this.query())
                },
                query: function () {
                    t.showLoading = !0, t.strFilter.filterKwd = t.strFilter.keyword;
                    var e = {
                        fid: t.strFilter.fid,
                        ct_id: t.getChartId(),
                        tb_id: t.getTbId(),
                        keyword: t.strFilter.keyword
                    };
                    i.get("/api/adv_enum/list", e).then(function (e) {
                        0 == e.status && (t.strFilter.searchList = [], t.showLoading = !1, angular.forEach(e.result, function (e) {
                            t.strFilter.searchList.push({
                                name: e
                            })
                        }))
                    })
                }
            }, 
            t.numberFilter = {
                number_operator: "",
                number_both: "",
                number_left: "",
                number_right: "",
                expression_str: "",
                field_name: "",
                type: "",
                showAdvanceNumber: function (e, i, n, o) {
                    e && e.stopPropagation();
                    var l = t.getTbId(),
                        s = t.dragFieldFid,
                        d = t.getChartId();
                    if (t.numberFilter.field_name = o, t.numberFilter.number_operator = 12, t.numberFilter.type = i.adv_type || "condition", t.current_filter_index = n, t.current_config_field_name = o, t.checkFormulaGrammarFlag = !1, t.expressionChangedFlag = !1, i) {
                        if (t["show_filter_" + i.fid] = !0, t.numberAdvFilter = {
                                ct_id: t.getChartId(),
                                tb_id: t.getTbId(),
                                layer_id: t.getLayerId(),
                                type: i.adv_type,
                                fid: i.fid,
                                config: i.range
                            }, "condition" == i.adv_type) {
                            var c = angular.fromJson(i.range),
                                u = angular.fromJson(c[0]);
                            1 == u.conditions.length ? (t.numberFilter.number_operator = u.conditions[0].calc_type, t.numberFilter.number_both = u.conditions[0].value, t.numberFilter.number_left = "", t.numberFilter.number_right = "", t.numberFilter.expression_str = "") : (t.numberFilter.number_operator = 12, t.numberFilter.number_both = "", t.numberFilter.number_left = u.conditions[0].value, t.numberFilter.number_right = u.conditions[1].value, t.numberFilter.expression_str = ""), t.filterRangeList[i.fid] = {
                                list: [],
                                range: [],
                                type: ""
                            }, t.filterRangeList[i.fid].range = angular.fromJson(i.range), t.filterRangeList[i.fid].list = angular.fromJson(t.filterRangeList[i.fid].range[0]), t.filterRangeList[i.fid].type = i.adv_type
                        } else if ("expression" == i.adv_type) {
                            t.numberFilter.expression_str = i.range[0];
                            var f = new RegExp("\\[_field_id_\\]", "g");
                            t.numberFilter.expression_str = t.numberFilter.expression_str.replace(f, "[" + o + "]"), t.filterRangeList[i.fid] = {
                                list: [],
                                range: [],
                                type: ""
                            }, t.filterRangeList[i.fid].range = angular.fromJson(i.range), t.filterRangeList[i.fid].type = i.adv_type
                        }
                        t.is_new_add = !1
                    } else t.numberFilter.number_both = "", t.numberFilter.number_left = "", t.numberFilter.number_right = "", t.numberFilter.expression_str = "", t.numberAdvFilter = {
                        ct_id: t.getChartId(),
                        tb_id: t.getTbId(),
                        layer_id: t.getLayerId(),
                        type: "condition",
                        fid: t.dragFieldFid,
                        config: []
                    }, t.filterRangeList[t.strFilter.fid] = {
                        list: [],
                        range: [],
                        total: "",
                        type: ""
                    }, a.field.getRange(l, s, d).success(function (e) {
                        "0" == e.status && (t.filterRangeList[s] = {
                            list: [],
                            total: e.result.total,
                            range: [],
                            type: "condition"
                        }, t.filterRangeList[s].type = "condition", t.filterRangeList[s].check_all = !1, t.selectAll[s] = 1)
                    }), t.is_new_add = !0;
                    r.open({
                        template: "/static/partials/dialogTemplates/advance_number_filter.html",
                        className: "ngdialog-theme-default str-filter-model advance-string-modal advance-number-modal",
                        scope: t,
                        showClose: !1
                    }), angular.element(".advance-number-modal .ngdialog-close").css("display", "none")
                },
                saveAdvNumberFilter: function () {
                    var e = t.numberAdvFilter.type;
                    if ("condition" == e) {
                        if (!(t.numberFilter.number_operator >= 0)) return void o(t.tips["filter.pleaseConfigCondition"]);
                        if (t.numberAdvFilter.config = {
                                condition_type: 2,
                                conditions: []
                            }, 12 == t.numberFilter.number_operator) {
                            if ("number" != typeof t.numberFilter.number_left || "number" != typeof t.numberFilter.number_right) return void o(t.tips["filter.pleaseInputCondition"]);
                            t.numberAdvFilter.config.conditions.push({
                                calc_type: 4,
                                value: t.numberFilter.number_left
                            }), t.numberAdvFilter.config.conditions.push({
                                calc_type: 5,
                                value: t.numberFilter.number_right
                            })
                        } else {
                            if ("" == angular.element(".number-range .input-text-block")[0].value) return void o(t.tips["filter.pleaseInputCondition"]);
                            t.numberAdvFilter.config.conditions.push({
                                calc_type: t.numberFilter.number_operator,
                                value: t.numberFilter.number_both
                            })
                        }
                    } else if ("expression" == e) {
                        var a = t.checkFormulaGrammar(t.current_config_field_name, t.numberAdvFilter.fid, "number");
                        if (a) return a.then(function (e) {
                            if (!e) return void o(t.tips["filter.checkFailed"]);
                            t.numberAdvFilter.config = t.numberFilter.expression_str, t.numberFilter.numberFilterModify()
                        });
                        return
                    }
                    t.numberFilter.numberFilterModify()
                },
                numberFilterModify: function () {
                    "condition" == t.numberAdvFilter.type && (t.numberAdvFilter.config = angular.toJson(t.numberAdvFilter.config));
                    var e;
                    e = t.doNotModify ? c.when({
                        status: 0
                    }) : i.post("/api/adv_num/modify", t.numberAdvFilter), e.then(function (e) {
                        if (0 == e.status) {
                            var a = t.numberAdvFilter.fid,
                                i = t.numberAdvFilter.type,
                                n = t.getFilterList();
                            angular.forEach(n, function (e) {
                                if (e.fid == a) {
                                    if (e.adv_type = i, t.filterRangeList[a] = {
                                            list: [],
                                            range: [],
                                            type: i
                                        }, !t.filterRangeList[a]) return;
                                    if ("condition" == i) {
                                        t.loading[a] = !1, t.filterRangeList[a].range = angular.fromJson(t.numberAdvFilter.config), t.filterRangeList[a].list = angular.fromJson(t.numberAdvFilter.config);
                                        var r = [];
                                        r.push(t.numberAdvFilter.config), e.range = r, t.filterRangeList[a].type = i
                                    } else if ("expression" == i) {
                                        var r = [];
                                        r.push(t.numberAdvFilter.config), e.range = r, t.filterRangeList[a].type = i
                                    }
                                    e.is_all = !1
                                }
                            }), r.closeAll(), t.loading[a] = !1, t["show_filter_" + a] = !0, t.filterHandler.save({
                                range: t.filterRangeList,
                                index: t.current_filter_index,
                                type: t.numberAdvFilter.data_type
                            })
                        }
                    })
                },
                setExpression: function (e) {
                    t.numberFilter.expression_str = e
                }
            }, 
            s(["filter.buildAggregatedTip", "filter.exist", "chart.dateRangeRequired", "filter.pleaseSelectItem", "filter.pleaseAddCondition", "filter.pleaseCheckGrammar", "filter.pleaseInputExpression", "filter.pleaseInputFieldName", "filter.inputPositiveNumber", "filter.pleaseConfigCondition", "filter.pleaseInputNumber", "filter.pleaseInputCondition", "filter.itemsMoreThanOneHundred", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2", "filter.switchExpTip", "filter.addItemTip"], t)
        }
        angular.module("BC.directives")
        .directive("chartFilter", e), 
        e.$inject = [
            "commonService", 
            "commonHttp", 
            "ngDialog", 
            "$stateParams", 
            "errHint", 
            "$jsTipTranslate", 
            "$timeout", 
            "AdvfilterOperatorMap", 
            "AdvfilterOperatorNumberMap", 
            "AdvfilterOperatorList"
        ], 
            
        t.$inject = [
            "$rootScope", 
            "$scope", 
            "commonService", 
            "commonHttp", 
            "ngDialog", 
            "$stateParams", 
            "errHint", 
            "operatorHelpLink", 
            "$jsTipTranslate", 
            "dateTimeByHalfHour", 
            "$q"
        ]
    }(), 
    angular
    .module("BC.directives")
    .directive("chartOperate", ["$location", "$stateParams", "$rootScope", function (e, t, a) {
        return {
            restrict: "A",
            templateUrl: "/static/js/dashboard/tpl/chart-operate.html",
            replace: !0,
            link: function (i, r, n) {
                function o(e) {
                    for (var t = 0, a = null, r = i.dashStandardItems.length - 1; r >= 0; r--) {
                        var n = i.dashStandardItems[r];
                        if (n.children[0].meta.ct_id === e) {
                            a = n.children[0].meta, t = r;
                            break
                        }
                    }
                    return {
                        meta: a,
                        index: t
                    }
                }
                var l = n.ctId;
                n.origin && n.origin.indexOf("data_screen") > -1 && (i.permision.isDataScreen = !0);
                var s = bdp.bdpPageStatus.isUnderAdvDashEdit() || bdp.bdpPageStatus.isUnderDataScreenEdit();
                i.chartOptPermission = {
                    refresh: !a.dashEditMode || s,
                    edit: !a.dashEditMode || s,
                    summary: !a.dashEditMode || s,
                    fullScreen: !a.dashEditMode || s,
                    dashFilter: !a.dashEditMode || s,
                    sort: !a.dashEditMode || s,
                    warn: !a.dashEditMode || s,
                    more: !a.dashEditMode || s
                }, (bdp.bdpPageStatus.isUnderAdvDashNormal() || bdp.bdpPageStatus.isUnderDataScreenNormal() || bdp.bdpPageStatus.isUnderAdvDashFullScreen()) && (i.chartOptPermission = {
                    refresh: !1,
                    edit: !1,
                    summary: !1,
                    fullScreen: !0,
                    dashFilter: !1,
                    warn: !1,
                    sort: !1,
                    more: !1
                }), i.edit = function () {
                    var a = o(l),
                        i = {
                            C400: "/gis_edit",
                            C500: "/custom_chart_edit"
                        },
                        r = i[a.meta.type] || "/chart_edit",
                        s = n.origin ? "?page_referrer=" + n.origin : "";
                    $.cookie("grid_index", a.index);
                    var d = t.wsId ? r + "_ws/" + t.wsId + "/" : r + "/",
                        c = d + t.projId + "/" + t.dashId + "/" + l + s;
                    e.url(c)
                }, i.refreshChart = function (e) {
                    var t = $(r).parents(".chart-box").find(".chart"),
                        a = t.data("chart-data");
                    t.find(".hz-table").length > 0 && t.attr("data-drill", "true"), "warn" === e.type ? (localforage.getItem("CACHE_DASH_DATA", function (e, t) {
                        t && (delete t[i.ct_id], localforage.setItem("CACHE_DASH_DATA", t))
                    }), a.emit("reflow")) : a.emit("reflow")
                }, i.revertSelection = function () {
                    var e = $(r).parents(".chart-box").find(".chart"),
                        t = e.data("chart-data");
                    t && t.exitSelectionView()
                }
            },
            controller: ["$scope", "commonHttp", "warnOperatorMap", "ngDialog", function (e, t, i, r) {
                e.switchWarn = function (a) {
                    var i = 1 == a.meta.warn ? 2 : 1;
                    t.get("/api/warn/switch", {
                        ct_id: a.meta.ct_id,
                        opt: i
                    }).then(function (t) {
                        0 == +t.status && (a.meta.warn = i, e.refreshChart({
                            type: "warn"
                        }))
                    })
                }, 
                e.chartInfo = [], 
                e.chartData = [], 
                e.$on("chart_data_load", function (t, a) {
                    e.ct_id = a.ct_id, e.rule_id = a.rule_id, e.chartInfo = a.info, e.chartData = a.chartData, e.warnList = e.chartInfo.warn_info || [], e.warnMark = e.chartData && e.chartData.warn_mark || [], e.warnSwitchOn = !1;
                    for (var i = 0; i < e.warnList.length; i++)
                        if (e.warnList[i].switch) {
                            e.warnSwitchOn = !0;
                            break
                        }
                }), 
                e.canSetWarnLine = function () {
                    var t = e.selected_type,
                        a = e.drill_level || 0;
                    return t && ["C212", "C230", "C242", "C271", "C290", "C300", "C310", "C320", "C330", "C340", "C352", "C360", "C370", "C400", "C500"].indexOf(t) < 0 && a < 1
                }, 
                e.canEnterFullScreen = function () {
                    return bdp.bdpPageStatus.isUnderDataScreen() || bdp.bdpPageStatus.isUnderAdvDash() ? a.dashEditMode || bdp.bdpPageStatus.isUnderAdvDashFullScreen() || bdp.bdpPageStatus.isUnderDataScreenNormal() || bdp.bdpPageStatus.isUnderAdvDashNormal() : !a.dashEditMode
                }, 
                e.getWarnYaxisFields = function () {
                    function t(t) {
                        var a = [];
                        return angular.forEach(t, function (t) {
                            if ("row_summary" != t.fid)
                                if (t.nick_name) field_name = t.nick_name, a.push({
                                    name: field_name,
                                    fid: t.fid,
                                    uniq_id: t.uniq_id
                                });
                                else {
                                    field_name = t.name;
                                    var i = e.setAdvanceAggregatorName(t);
                                    i ? a.push({
                                        name: field_name + i,
                                        fid: t.fid,
                                        uniq_id: t.uniq_id
                                    }) : a.push({
                                        name: field_name,
                                        fid: t.fid,
                                        uniq_id: t.uniq_id
                                    })
                                }
                        }), a
                    }
                    e.chartInfo.yAxis && e.chartInfo.yAxis.length > 0 && (e.field_list_y = t(e.chartInfo.yAxis)), e.chartInfo.yAxisOptional && e.chartInfo.yAxisOptional.length > 0 && (e.field_list_y_optional = t(e.chartInfo.yAxisOptional))
                }, 
                e.field_list_y = [], 
                e.field_list_y_optional = [], 
                e.showSetWarningDialog = function () {
                    var t = [],
                        i = [];
                    e.getWarnYaxisFields(), angular.forEach(e.warnList, function (e, a) {
                        0 == e.axis_type ? t.push(e) : i.push(e)
                    });
                    var n = 0;
                    e.selected.rule_id && a.proj_share ? n = 2 : !e.selected.rule_id && a.proj_share && (n = 1), e.warnConfigDialog = r.open({
                        template: "/static/partials/chart-warning-config.html",
                        className: "ngdialog-theme-default ngDialog-width-600 set-warning-dialog",
                        scope: e,
                        data: {
                            warnYList: t,
                            warnYOptionalList: i,
                            yFieldsList: e.field_list_y,
                            yOptionalFieldsList: e.field_list_y_optional,
                            isYAxis: !0,
                            isYOptionalAxis: e.chartInfo.hasOwnProperty("yAxisOptional") && e.chartInfo.yAxisOptional.length > 0,
                            rule_id: e.rule_id || "",
                            ct_id: e.ct_id || "",
                            role_type: n,
                            isDash: !0
                        },
                        controller: "chartWarnConfigCtrl"
                    })
                }, 
                e.$on("refreshChartForWarn", function (t, a) {
                    e.refreshChart({
                        type: "warn"
                    }), e.warnSwitchOn = !1;
                    for (var i = 0; i < e.warnList.length; i++)
                        if (e.warnList[i].switch) {
                            e.warnSwitchOn = !0;
                            break
                        }
                })
            }]
        }
    }]), 
    angular.module("BC.directives")
    .directive("exportDashboard", ["ngDialog", "errHint", "$translate", function (e, t, a) {
        return {
            link: function (i) {
                i.showExportDialog = function (r) {
                    if (bdp.bdpPageStatus.isUnderAdvDashNormal() && function () {
                            var e = $(".dash-wrapper");
                            return !!(e && e.find("video").length > 0) && (t(a.instant("dash.advDash.forbiddenExportDash")), !0)
                        }()) return !1;
                    e.open({
                        templateUrl: "/static/partials/dialogTemplates/export-dash-modal.html",
                        className: "ngdialog-theme-default export-img-modal export-dashboard-modal",
                        scope: i,
                        data: {
                            exportType: r
                        },
                        controller: "exportDashboardCtrl"
                    })
                }
            }
        }
    }])
    .controller("exportDashboardCtrl", ["$scope", "$rootScope", "$timeout", "$stateParams", "errHint", "$translate", function (e, t, a, i, r, n) {
        function o(e) {
            for (var t = e.find(".chart-canvas").length, a = [], i = window.devicePixelRatio || 1, r = e.find(".chart-canvas"), n = 0; n < t; n++) {
                var o = r[n];
                try {
                    var l = Canvas2Image.convertToPNG(o, o.width, o.height).src,
                        s = '<img src="' + l + '" width="' + o.width / i + '" height="' + o.height / i + '" />'
                } catch (e) {
                    var s = '<p width="' + o.width / i + '" height="' + o.height / i + '" style="text-align: center;line-height:' + o.height / i + 'px;">当前表格含有外部引用图片，暂不支持导出</p>'
                }
                a.push(s)
            }
            return a
        }

        function l(e) {
            var t = e.find(".chart-gis"),
                a = [],
                i = [];
            return t.each(function (e, t) {
                var r = $(t).data("bdp-chart-instance").gisMap,
                    n = r.exportImage(1).then(function (e) {
                        e[0].style.zIndex = 0, a.push(e[0].outerHTML)
                    });
                i.push(n)
            }), $.when.apply($, i).then(function () {
                return a
            })
        }

        function s() {
            var t = e.draw_chart_url;
            for (var a in t) t.hasOwnProperty(a) && (e.draw_chart_url[a].lazyload = !1)
        }

        function d() {
            for (var e = $(".dash-wrapper .chart"), t = 0, a = 0, i = 0, r = e.length; i < r; i++) {
                var n = $(e[i]);
                n.hasClass("bdp-chart-loaded") && t++, n.hasClass("bdp-chart-error") && a++
            }
            return {
                total: r,
                loaded: t,
                error: a
            }
        }

        e.widthSetting = "scale_1", 
        e.state = "init", 
        e.exportType = e.ngDialogData.exportType || "img", 
        e.curExportDashId = i.dashId, 
        e.exportSetting = {
            scale: "scale_1",
            fixedWidth: 1024
        }, 
        e.confirm = function () {
            var t = {};
            switch (e.exportSetting.scale) {
                case "scale_1":
                    t.scale = 1;
                    break;
                case "scale_2":
                    t.scale = 2;
                    break;
                case "fixed_width":
                    +e.exportSetting.fixedWidth && (t.width = +e.exportSetting.fixedWidth, t.width = Math.max(3600, t.width))
            }
            "pdf" == e.exportType ? e.exportDashboard() : e.exportDashboard(t)
        };
        var c = null;
        e.exportDashboard = function (a) {
            function i() {
                var e = g && g.length > 0 ? parseInt(g[0].scrollWidth) : 996;
                return f && (e = $(".J_data_screen_hook").width()), e
            }

            function u() {
                function r() {
                    var t = "light";
                    1 == window.usedThemeId && (t = "dark");
                    var r = i();
                    g.hasClass("under-workspace") && (n = n.replace("under-workspace", ""));
                    var o = {
                            dashboard: n,
                            filename: e.dashTitle,
                            originWidth: r,
                            data_type: "png",
                            theme: t,
                            dash_id: e.curExportDashId
                        },
                        l = {};
                    a ? l = $.extend(!0, o, a) : (l = o, l.data_type = "pdf"), Highcharts.post("/api/dashboard/export", l)
                }
                var n = "";
                "pdf" == e.exportType ? f ? (g.addClass("dash-mode-free data-screen-wrap dash-edit-content-view"), g.addClass("J-export-pdf"), n = g.prop("outerHTML").replace("J-export-pdf", "J-export-pdf-no-top"), g.removeClass("J-export-pdf"), g.removeClass("dash-mode-free data-screen-wrap dash-edit-content-view")) : (g.addClass("J-export-pdf"), n = g.prop("outerHTML").replace("J-export-pdf", "J-export-pdf-no-top"), g.removeClass("J-export-pdf")) : f ? (g.addClass("dash-mode-free data-screen-wrap dash-edit-content-view"), n = g.prop("outerHTML"), g.removeClass("dash-mode-free data-screen-wrap dash-edit-content-view")) : n = g.prop("outerHTML");
                var s = i();
                if (n = n.replace("<div", '<div style="width:' + s + 'px" '), t.global.watterMark) {
                    var d = $("#watermarkStyle").prop("outerHTML");
                    n = d + n
                }
                if (g.find(".chart-canvas").length > 0) {
                    var c = o(g),
                        u = 0;
                    n = n.replace(/<canvas.*?\<\/canvas>/g, function (e, t) {
                        return e.indexOf("chart-canvas") > -1 ? e.replace(e, c[u++]) : e
                    })
                }
                g.find(".chart-gis").length > 0 ? l(g).then(function (e) {
                    var t = document.createDocumentFragment(),
                        a = document.createElement("div");
                    t.appendChild(a), a.innerHTML = n;
                    for (var i = a.querySelectorAll(".chart-gis"), o = 0, l = i.length; o < l; o++) i[o].innerHTML = e[o] || "";
                    n = a.innerHTML, r()
                }, function () {
                    alert("导出GIS失败")
                }) : r(), e.closeThisDialog()
            }
            var f = bdp.bdpPageStatus.isUnderAdvDashNormal(),
                p = e.loadedState = d(),
                g = $(".dash-wrapper"),
                h = a && a.scale || 1;
            if ($("#J-export-dashboard-height").height() * h > 32e3) return r(n.instant("chart.chartExportImgMax")), !1;
            if (p.loaded === p.total) u();
            else {
                s();
                var m = +new Date;
                e.state = "wait-chart-loading";
                var _ = function () {
                    var t = e.loadedState = d();
                    t.loaded === t.total ? u() : +new Date - m > 6e4 ? (alert("您还有图表没有加载完成, 暂不支持导出"), e.closeThisDialog()) : c = setTimeout(_, 1e3), e.$$phase || e.$digest()
                };
                c = setTimeout(_, 1e3)
            }
        }, 
        e.$on("destroy", function () {
            c && clearTimeout(c)
        })
    }]),
    function () {
        angular
        .module("BC.directives")
        .directive("chartInnerFilter", [
            "commonHttp", 
            "$stateParams", 
            "$timeout", 
            "$rootScope", 
            "$filter", 
            "ngDialog", 
            "numberInnerFilterMap", 
            "errHint", 
            "$jsTipTranslate", function (e, t, a, i, r, n, o, l, s) {
            return {
                restrict: "A",
                templateUrl: "/static/partials/chart-inner-filter.html",
                scope: !0,
                link: function (t, a, r) {
                    function d(e, a, i) {
                        var r = $(".chart-right"),
                            n = r[0].getBoundingClientRect().left,
                            o = a.fid,
                            l = e.pageX < n - 200 ? {
                                left: 0
                            } : {
                                right: 0
                            },
                            s = bdp.utils.getArrayTextWidth(i, a);
                        l.width = s, t.adjustWidth[o] = l
                    }

                    function c() {
                        return t.specialTbId ? t.specialTbId : "C400" === (t.chart_ops.meta || {}).chart_type ? t.viewData.currentLayer.tb_id : t.currentView ? t.currentView.tb_id : t.chart_ops.tb_id
                    }

                    function u() {
                        return t.$eval(r.chartid)
                    }

                    function f(e, a) {
                        function i(t) {
                            angular.forEach(t, function (t) {
                                t.fid == e ? t.range = angular.copy(a) : t.items && t.items.length > 0 && i(t.items)
                            })
                        }
                        i(t.chart_ops.meta.filter_list_inner)
                    }

                    function p(e, a) {
                        function i(t) {
                            angular.forEach(t, function (t) {
                                t.uniq_id == e && "condition" == t.inner_adv_type ? t.range = angular.copy(a) : t.items && t.items.length > 0 && i(t.items)
                            })
                        }
                        i(t.getCurrentLayerFilter(t.chart_ops.meta.filter_list_inner))
                    }

                    function g(e, a, r) {
                        function n(t) {
                            angular.forEach(t, function (t) {
                                t.hasOwnProperty("inner_adv_type") || (t.inner_adv_type = ""), t.fid == e && "" == t.inner_adv_type ? t.range = angular.copy(a) : t.items && t.items.length > 0 && n(t.items)
                            })
                        }
                        var o = [];
                        "chart_edit" === i.view && (o = t.chart_ops.meta.level[t.drill_level].y.concat(t.chart_ops.meta.level[t.drill_level].y_optional || []));
                        var s = o.some(function (t, a) {
                            return t.yoyQoqSetting && "filter" === t.yoyQoqSetting.type && t.yoyQoqSetting.date_field_fid === e
                        });
                        if (0 === a.length || "custom_date" == r && (!a[0] || !a[1])) {
                            for (var d = [], c = 0, u = o.length; c < u; c++) {
                                var f = o[c];
                                !f.yoyQoqSetting || "filter" !== f.yoyQoqSetting.type || f.yoyQoqSetting.date_field_fid !== e || 0 !== a.length && "1" != f.yoyQoqSetting.compare_method || d.push(f.nick_name || f.name)
                            }
                            s && d.length > 0 && l(t.tips["filter.addItemTip"] + d.join("/"))
                        }
                        for (var p = t.chart_ops.meta.level_fields.length || 1, g = [], c = 0; c < p; c++) g = t.chart_ops.meta.filter_list_inner[c], n(g)
                    }
                    t.adjustWidth = {}, 
                    t.$on("current_level_inner_filter", function (e, a, i) {
                        if (a && i == u()) {
                            t.currentLevelInnerFilter = a;
                            var r = angular.copy(a);
                            t.innerFilterList = angular.copy(bdp.utils.handleInnerFilterLevel(r))
                        }
                    }, !0), 
                    t.$watch("innerFilterList", function (e) {
                        e && angular.forEach(e, function (e) {
                            t.innerList[e.fid] || (t.innerList[e.fid] = {})
                        })
                    }, !0), 
                    t.queryKwd = {}, 
                    t.enterToQuery = function (e) {
                        13 == e.e.keyCode && (e.real_search ? t.innerQrueryField(e.filter, e.is_advance) : t.innerList[e.filter.fid].keyword = t.queryKwd[e.filter.fid])
                    }, 
                    t.innerQrueryField = function (a) {
                        t.showLoading = !0;
                        var r = a.fid,
                            n = t.queryKwd[r] || t.innerList[r].keyword;
                        if (!n) return void(t.showLoading = !1);
                        var o = {
                            ct_id: a.ct_id || u(),
                            tb_id: a.tb_id || c(),
                            fid: r,
                            rule_id: i.global.rule_id,
                            keyword: n,
                            granularity: a.granularity || ""
                        };
                        e.get("/api/adv_enum/search", o).then(function (e) {
                            t.showLoading = !1, 0 == e.status && (t.tempQueryList = angular.copy(t.innerList[r].list), t.innerList[r].list = e.result)
                        })
                    }, 
                    t.delQueryField = function (e) {
                        t.tempQueryList && (t.innerList[e].list = t.tempQueryList || []), t.innerList[e].keyword = "", t.queryKwd[e] = ""
                    }, 
                    t.getInnerFilterList = function (a, i) {
                        if (!i.disabled && !i.recent_date_button) {
                            i.hasOwnProperty("uniq_id") || (i.uniq_id = (new Date).getTime());
                            for (var r in t.show_options) r != i.fid + i.uniq_id && (t.show_options[r] = !1);
                            if (t.show_options[i.fid + i.uniq_id] = !t.show_options[i.fid + i.uniq_id], t.show_options[i.fid + i.uniq_id]) {
                                if ("date" === i.data_type && !i.granularity) return void d(a, i, t.adv_date_list);
                                var n = i.fid;
                                t.innerList[n] || (t.innerList[n] = {});
                                var o = t.chart_ops.meta.filter_list,
                                    l = !1,
                                    s = [],
                                    f = 0,
                                    p = !1;
                                angular.forEach(o, function (e) {
                                    e.fid == n && (l = !0, s = e.range, f = e.total, p = e.is_all)
                                }), t.showLoading = !0, t.drillOption ? t.tempDrillOption = angular.copy(t.drillOption) : t.tempDrillOption = {
                                    drill_field: "",
                                    drill_level: "",
                                    drill_value: []
                                }, e.get("/api/field/inner_range", {
                                    ct_id: i.ct_id || u(),
                                    tb_id: i.tb_id || c(),
                                    fid: n,
                                    granularity: i.granularity || "",
                                    level: t.drill_level || 0,
                                    drill_field: t.tempDrillOption.drill_field,
                                    drill_level: t.tempDrillOption.drill_level,
                                    drill_value: angular.toJson(t.tempDrillOption.drill_value)
                                }).then(function (e) {
                                    0 == e.status && (d(a, i, e.result.range), t.innerList[n].keyword = "", t.innerList[n].list = e.result.range, t.innerList[n].total = e.result.total, t.innerList[n].is_all = !0, t.showLoading = !1)
                                })
                            }
                        }
                    }, 
                    t.defaultRange = {}, 
                    t.nullRange = {}, 
                    t.numberInnerFilterMap = o, 
                    t.getInnerFilterListForNumber = function (a, i) {
                        t.drillOption ? t.tempDrillOption = angular.copy(t.drillOption) : t.tempDrillOption = {
                            drill_field: "",
                            drill_level: "",
                            drill_value: []
                        }, i.hasOwnProperty("uniq_id") || (i.uniq_id = (new Date).getTime());
                        for (var r in t.show_options) r != i.fid + i.uniq_id && (t.show_options[r] = !1);
                        if (t.show_options[i.fid + i.uniq_id] = !t.show_options[i.fid + i.uniq_id], t.show_options[i.fid + i.uniq_id]) {
                            var n = angular.copy(t.currentLevelInnerFilter);
                            if (t.chart_ops.meta.filter_list_inner instanceof Array) n = angular.copy(t.chart_ops.meta.filter_list_inner);
                            else {
                                var o = t.drill_level || 0;
                                n = angular.copy(t.chart_ops.meta.filter_list_inner[o])
                            }
                            n = angular.copy(bdp.utils.handleInnerFilterLevel(n));
                            var l = i.formatter || "";
                            t.nullRange[i.fid + i.uniq_id] = !1, angular.forEach(n, function (a) {
                                if (a.uniq_id == i.uniq_id)
                                    if (0 == a.range.length) t.showLoading = !0, e.get("/api/field/inner_range", {
                                        ct_id: i.ct_id || u(),
                                        tb_id: i.tb_id || c(),
                                        fid: i.fid,
                                        uniq_id: i.uniq_id,
                                        level: t.drill_level || 0,
                                        granularity: "",
                                        drill_field: t.tempDrillOption.drill_field,
                                        drill_level: t.tempDrillOption.drill_level,
                                        drill_value: angular.toJson(t.tempDrillOption.drill_value)
                                    }).then(function (e) {
                                        0 == e.status && (t.showLoading = !1, t.innerList[i.fid].numOpt = -1, t.innerList[i.fid].numRange = [], t.defaultRange[i.fid + i.uniq_id] = e.result.range, 0 == t.defaultRange[i.fid + i.uniq_id].length ? t.nullRange[i.fid + i.uniq_id] = !0 : t.defaultRange[i.fid + i.uniq_id] = t.handleNumberByFormatter(t.defaultRange[i.fid + i.uniq_id], l, i.aggregator))
                                    });
                                    else {
                                        var r = a.range;
                                        t.defaultRange[i.fid + i.uniq_id] = [];
                                        var n = angular.fromJson(r[0]).conditions;
                                        1 == n.length ? (t.innerList[i.fid].numOpt = n[0].calc_type, t.innerList[i.fid].numRange = [n[0].value]) : n.length > 1 && (t.innerList[i.fid].numOpt = 12, t.innerList[i.fid].numRange = [n[0].value, n[1].value]), t.nullRange[i.fid + i.uniq_id] = !1
                                    }
                            })
                        }
                    }, 
                    t.getCurrentLayerFilter = function (e) {
                        var a = t.drill_level || 0;
                        return e instanceof Array ? e : e[a]
                    }, 
                    t.handleNumberByFormatter = function (e, t, a) {
                        for (var i = 2, r = 0; r < e.length; r++) t ? ("" !== t[t.check].digit && (i = t[t.check].digit), "num" == t.check && t.num.millesimal ? e[r] = Highcharts.numberFormat(e[r], i, ".", ",") : "num" == t.check ? e[r] = Highcharts.numberFormat(e[r], i, ".", "") : e[r] = Highcharts.numberFormat(100 * e[r], i, ".", "") + "%") : ("COUNT" != a && "COUNT_DISTINCT" != a || (i = 0), e[r] = Highcharts.numberFormat(e[r], i));
                        return e
                    }, 
                    t.changeNumberOpt = function (a, i) {
                        t.defaultRange[a.fid + a.uniq_id] = [], i == -1 && (t.rangeLoading = !0, e.get("/api/field/inner_range", {
                            ct_id: a.ct_id || u(),
                            tb_id: a.tb_id || c(),
                            fid: a.fid,
                            uniq_id: a.uniq_id,
                            level: t.drill_level || 0,
                            granularity: ""
                        }).then(function (e) {
                            t.rangeLoading = !1, 0 == e.status && (t.defaultRange[a.fid + a.uniq_id] = t.handleNumberByFormatter(e.result.range, a.formatter, a.aggregator))
                        }))
                    }, 
                    t.modifyInnerFilter = function (e, a) {
                        var r, n, o, l = [];
                        if ("chart_edit" === i.view && (l = t.chart_ops.meta.level[t.drill_level].y.concat(t.chart_ops.meta.level[t.drill_level].y_optional || [])), t.chart_ops.views) {
                            for (var s = t.chart_ops.views, d = e.ct_id, c = 0; c < s.length; c++)
                                if (d == s[c].ct_id) {
                                    o = s[c];
                                    break
                                }
                            o && (r = o.meta.filter_list_inner, n = o.meta.filter_list)
                        } else r = t.chart_ops.meta.filter_list_inner, n = t.chart_ops.meta.filter_list;
                        if ("date" == e.data_type) {
                            var u = !1;
                            if (1 === e.range.length && t.adv_date_list.forEach(function (t, i) {
                                    if (t.opt_id === a[0])
                                        for (var r = angular.fromJson(t.config), n = 0, o = l.length; n < o; n++) {
                                            var s = l[n];
                                            if (s.yoyQoqSetting && "filter" === s.yoyQoqSetting.type && s.yoyQoqSetting.date_field_fid === e.fid) {
                                                r.expression && "" != r.expression && (u = !0);
                                                break
                                            }
                                        }
                                }), u && !confirm(t.tips["filter.switchExpTip"])) return
                        }
                        e.range = a, r instanceof Array ? ("date" != e.data_type || e.granularity || angular.forEach(n, function (t) {
                            t.fid == e.fid && (t.range = e.range)
                        }), f(e.fid, e.range), t.show_options[e.fid] = !1) : ("date" != e.data_type || e.granularity || angular.forEach(n, function (t) {
                            t.fid == e.fid && (t.range = e.range)
                        }), t.show_options[e.fid + e.uniq_id] = !1, g(e.fid, e.range, e.data_type)), t.saveChartImmediate({
                            not_need_redraw: !1,
                            only_refresh_data: !1,
                            is_drill_chart: !!t.drill_level
                        }, o)
                    }, 
                    t.modifyInnerFilterForNumber = function (e) {
                        if ("number" == e.data_type || "number" != e.data_type && e.hasOwnProperty("aggregator")) {
                            var a = t.innerList[e.fid],
                                i = {
                                    condition_type: 2,
                                    conditions: []
                                };
                            if (a.numOpt == -1) e.range = [];
                            else if (12 == a.numOpt) {
                                if ("number" != typeof a.numRange[0] || "number" != typeof a.numRange[1]) return void l(t.tips["filter.pleaseInputCondition"]);
                                i.conditions.push({
                                    calc_type: 4,
                                    value: a.numRange[0]
                                }), i.conditions.push({
                                    calc_type: 5,
                                    value: a.numRange[1]
                                }), e.range = [angular.toJson(i)]
                            } else {
                                if ("number" != typeof a.numRange[0]) return void l(t.tips["filter.pleaseInputCondition"]);
                                i.conditions.push({
                                    calc_type: a.numOpt,
                                    value: a.numRange[0]
                                }), e.range = [angular.toJson(i)]
                            }
                        }
                        t.show_options[e.fid + e.uniq_id] = !1, p(e.uniq_id, e.range), t.saveChartImmediate({
                            not_need_redraw: !1,
                            only_refresh_data: !1,
                            is_drill_chart: !!t.drill_level
                        })
                    }, 
                    t.showInnerFilterDatePicker = function (e, a) {
                        if (a.length > 1) {
                            var i = a[0] ? a[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                r = a[1] ? a[1].split(" ")[1] || "23:59:59" : "23:59:59";
                            a = a.concat([i, r])
                        } else a = (1 === a.length && a[0].indexOf("opt_"), [+new Date, +new Date, "00:00:00", "23:59:59"]);
                        n.open({
                            template: "/static/partials/dialogTemplates/custom_date_modal.html",
                            className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                            data: {
                                index: e,
                                range: a
                            },
                            scope: t
                        })
                    }, 
                    t.saveDateRange = function (e) {
                        var a = e.sDate ? e.sDate + " " + e.sDateHour : null,
                            i = e.eDate ? e.eDate + " " + e.eDateHour : null;
                        if (!a && !i) return l(t.tips["chart.dateRangeRequired"]), !1;
                        if (a && i) {
                            if (!e.sDateHour) return l(t.tips["filter.startDateErr2"]), !1;
                            if (!e.eDateHour) return l(t.tips["filter.endDateErr2"]), !1;
                            if (new Date(a) - new Date(i) > 0) return l(t.tips["filter.dateRangeInvalid"]), !1
                        } else {
                            if (a && !i && !e.sDateHour) return l(t.tips["filter.startDateErr2"]), !1;
                            if (!a && i && !e.eDateHour) return l(t.tips["filter.endDateErr2"]), !1
                        }
                        var r = [a, i],
                            n = t.innerFilterList[e.data.index].fid;
                        angular.forEach(t.chart_ops.meta.filter_list, function (e) {
                            e.fid == n && (e.range = r)
                        }), t.chart_ops.meta.filter_list_inner instanceof Array ? f(n, r) : g(n, r, "custom_date"), t.saveChartImmediate({
                            not_need_redraw: !1,
                            only_refresh_data: !1,
                            is_drill_chart: !1
                        })
                    }, 
                    s(["filter.pleaseInputCondition", "filter.switchExpTip", "filter.addItemTip"], t)
                },
                controller: ["$scope", function (e) {
                    e.show_options = {}, 
                    e.innerList = {}, 
                    e.$watch("innerFilterList", function (t) {
                        t && angular.forEach(t, function (t) {
                            e.innerList[t.fid] = {
                                list: []
                            }
                        })
                    })
                }]
            }
        }])
        .directive("chartInnerFilterLevel", ["commonHttp", "$stateParams", "ngDialog", "errHint", "operatorHelpLink", "formulaKeyMap", "commonService", "dateNameMap", "setAdvanceAggregatorName", "$timeout", function (e, t, a, i, r, n, o, l, s, d) {
            return {
                restrict: "A",
                templateUrl: "/static/js/chart-config/tpl/chart-innerfilter-level.html",
                scope: {
                    opts: "=",
                    chartid: "=",
                    save: "=",
                    fields: "=",
                    currentView: "=",
                    toggleBlock: "="
                },
                link: function (t) {
                    function n() {
                        t.save({
                            not_need_redraw: !1,
                            only_refresh_data: !1,
                            is_drill_chart: !!t.$parent.drill_level,
                            getChartInfo: "innerFilter"
                        })
                    }

                    function c(e) {
                        return "condition" == e.inner_adv_type
                    }

                    function u(e, t, a) {
                        function i(e, t, a) {
                            var r = !1;
                            angular.forEach(a, function (n, o) {
                                n.hasOwnProperty("uniq_id") || (n.uniq_id = ""), n.fid == e && n.uniq_id == t && (a.splice(o, 1), r = !0), n.items && n.items.length > 0 && !r && i(e, t, n.items)
                            })
                        }
                        i(e, t, a)
                    }

                    function f(e, t) {
                        function a(t) {
                            angular.forEach(t, function (t, i) {
                                e.fid == t.fid ? ("date" == e.data_type ? (t.granularity == e.granularity ? t.range = e.range || [] : t.range = [], t.granularity = e.granularity, t.show_all = e.show_all, t.recent_date_button = e.recent_date_button) : (t.show_all = e.show_all, t.recent_date_button = e.recent_date_button), t.inner_adv_type = e.inner_adv_type || "") : t.items && t.items.length > 0 && a(t.items)
                            })
                        }
                        a(t)
                    }

                    function p(e) {
                        var a = t.opts.meta.filter_list,
                            i = void 0;
                        return angular.forEach(a, function (t) {
                            t.fid == e.fid && (i = t.range)
                        }), i
                    }

                    function g() {
                        return t.specialTbId ? t.specialTbId : "C400" === (t.opts.meta || {}).chart_type ? t.viewData.currentLayer.tb_id : t.currentView ? t.currentView.tb_id : t.opts.tb_id
                    }
                    t.goHelp = function (e) {
                        r(e)
                    }, t.addList = [], t.enableSort = !0, t.originalSortData = {}, t.treeOptions = {
                        beforeDrag: function (e) {
                            return console.log("Is saving chart complete ?: ", !t.$parent.loadingData), !t.$parent.loadingData
                        },
                        beforeDrop: function (e) {
                            t.originalSortData = angular.copy(t.currentLevelInnerFilter)
                        },
                        dragStop: function (e) {
                            function a(e, t) {
                                s = !1, angular.forEach(e, function (e) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (m = e, p = i, s = !0)
                                    }), e.items && e.items.length > 0 && !s && a(e.items, t)
                                })
                            }

                            function i(e, t) {
                                return h = !1, _ = {}, angular.forEach(e, function (a, i) {
                                    a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (_ = a, e.splice(i, 1), h = !0)
                                }), h || angular.forEach(e, function (e, a) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (_ = a, e.items.splice(i, 1), h = !0)
                                    }), e.items && e.items.length > 0 && !h && i(e.items, t)
                                }), _
                            }

                            function r(e, t, a) {
                                if (s = !1, f)
                                    if (p >= e.length) e.push(a);
                                    else {
                                        for (var i = [], n = 0, o = e.length; n < o; n++) n == p && i.push(a), i.push(e[n]);
                                        e = i
                                    }
                                else angular.forEach(e, function (e, i) {
                                    if (e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type)
                                        if (s = !0, p >= e.items.length) e.items.push(a);
                                        else {
                                            for (var n = [], o = 0, l = e.items.length; o < l; o++) o == p && n.push(a), n.push(e.items[o]);
                                            e.items = n
                                        }
                                    e.items && e.items.length > 0 && !s && r(e.items, t, a)
                                });
                                return e
                            }
                            if (t.opts.meta.filter_list_inner instanceof Array) return void(t.opts.meta.filter_list_inner = t.currentLevelInnerFilter);
                            t.enableSort = !0;
                            var o = e.source.nodeScope.$modelValue,
                                l = t.currentLevelInnerFilter;
                            if (c(o)) {
                                var s = !1;
                                angular.forEach(l, function (e) {
                                    e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == o.fid && "condition" == e.inner_adv_type && (s = !0)
                                }), s || (t.enableSort = !1)
                            } else angular.forEach(l, function (e) {
                                e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), c(e) && e.items && e.items.length > 0 && (t.enableSort = !1)
                            });
                            if (!t.enableSort) return console.log("禁止操作"), void(t.currentLevelInnerFilter = t.originalSortData);
                            if (t.opts.meta.filter_list_inner instanceof Array) t.opts.meta.filter_list_inner = t.currentLevelInnerFilter;
                            else {
                                var d = t.$parent.drill_level || 0,
                                    u = t.opts.meta.level_fields.length || 1,
                                    s = !1,
                                    f = !1,
                                    p = 0;
                                t.opts.meta.filter_list_inner[d] = t.currentLevelInnerFilter;
                                var g = e.source.nodeScope.$modelValue,
                                    m = {};
                                ! function (e, t) {
                                    s = !1, angular.forEach(e, function (e, a) {
                                        e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type && (m = {}, p = a, f = !0)
                                    })
                                }(t.currentLevelInnerFilter, g), f || a(t.currentLevelInnerFilter, g);
                                for (var _ = {}, b = 0; b < u; b++) t.opts.meta.filter_list_inner[b] = d == b ? t.currentLevelInnerFilter : function (e) {
                                    var t = i(e, g);
                                    return e = r(e, m, t)
                                }(t.opts.meta.filter_list_inner[b])
                            }
                            n()
                        }
                    }, t.$on("current_level_inner_filter", function (e, a, i) {
                        a && i == t.chartid && (t.currentLevelInnerFilter = a, t.$parent.getChartArgsHeight(), t.$$phase || t.$digest())
                    }), t.$watch("opts", function (e) {
                        if (e && e.meta) {
                            var a = t.$parent.drill_level || 0;
                            e.meta.filter_list_inner instanceof Array ? t.currentLevelInnerFilter = e.meta.filter_list_inner : t.currentLevelInnerFilter = angular.copy(e.meta.filter_list_inner[a])
                        }
                    }, !0), t.setParentAndChildren = function (e) {
                        function a(e, i, r) {
                            t.simple_filter_list_inner[i] || (t.simple_filter_list_inner[i] = []), angular.forEach(e, function (e) {
                                e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), t.simple_filter_list_inner[i].push({
                                    filter_fid: e.fid,
                                    filter_inner_type: e.inner_adv_type,
                                    filter_parent_fid: r
                                }), e.items && e.items.length > 0 && a(e.items, i, e.fid)
                            })
                        }
                        if (t.simple_filter_list_inner = {}, t.opts.meta.filter_list_inner instanceof Array) a(t.opts.meta.filter_list_inner, 0, e);
                        else
                            for (var i = t.opts.meta.level_fields.length || 1, r = 0; r < i; r++) a(t.opts.meta.filter_list_inner[r], r, e)
                    };
                    var h = !1;
                    t.getChildrenItemToDelete = function (e, a) {
                        return h = !1, angular.forEach(a, function (i, r) {
                            i.hasOwnProperty("inner_adv_type") || (i.inner_adv_type = ""), e.fid == i.fid && "" == i.inner_adv_type && (a.splice(r, 1), h = !0), i.items.length > 0 && !h && t.getChildrenItemToDelete(e, i.items)
                        }), a
                    }, t.getNumberItemToDelete = function (e, a) {
                        return h = !1, angular.forEach(a, function (i, r) {
                            i.hasOwnProperty("inner_adv_type") || (i.inner_adv_type = ""), e.fid == i.fid && "condition" == i.inner_adv_type && (a.splice(r, 1), h = !0), i.items.length > 0 && !h && t.getNumberItemToDelete(e, i.items)
                        }), a
                    };
                    var m = !1;
                    t.getParentNode = function (e, a, i) {
                        return m = !1, angular.forEach(e, function (e, r) {
                            e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == i && "" == e.inner_adv_type && (a = e, m = !0), e.items && e.items.length > 0 && !m && t.getParentNode(e.items, a, i)
                        }), a
                    }, t.getSelfNode = function (e, a) {
                        m = !1;
                        var i = angular.copy(a);
                        return i.hasOwnProperty("uniq_id") || (i.uniq_id = ""), angular.forEach(e, function (e, r) {
                            e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.hasOwnProperty("uniq_id") || (e.uniq_id = ""), e.fid == i.fid && e.uniq_id == i.uniq_id && "" == e.inner_adv_type && (a = e, m = !0), e.items && e.items.length > 0 && !m && t.getSelfNode(e.items, i)
                        }), a
                    }, t.innerFilter = {
                        level: function (e, a) {
                            function i(e, t) {
                                m = !1, angular.forEach(e, function (e) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (g = e, y = i, m = !0)
                                    }), e.items && e.items.length > 0 && !m && i(e.items, t)
                                })
                            }

                            function r(e, t) {
                                return b = !1, D = {}, angular.forEach(e, function (a, i) {
                                    a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (D = a, e.splice(i, 1), b = !0)
                                }), b || angular.forEach(e, function (e, a) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (D = a, e.items.splice(i, 1), b = !0)
                                    }), e.items && e.items.length > 0 && !b && r(e.items, t)
                                }), D
                            }

                            function o(e, t, a) {
                                return m = !1, v ? e.push(a) : angular.forEach(e, function (e, i) {
                                    e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type && (m = !0, e.items.push(a)), e.items && e.items.length > 0 && !m && o(e.items, t, a)
                                }), e
                            }

                            function l(e, t) {
                                m = !1, angular.forEach(e, function (e) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (g = e, y = i, m = !0)
                                    }), e.items && e.items.length > 0 && !m && l(e.items, t)
                                })
                            }

                            function s(e, t) {
                                return b = !1, T = {}, angular.forEach(e, function (a, i) {
                                    a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (T = a, e.splice(i, 1), b = !0)
                                }), b || angular.forEach(e, function (e, a) {
                                    e.items && e.items.length > 0 && angular.forEach(e.items, function (a, i) {
                                        a.hasOwnProperty("inner_adv_type") || (a.inner_adv_type = ""), a.fid == t.fid && "" == a.inner_adv_type && (T = a, e.items.splice(i, 1), b = !0)
                                    }), e.items && e.items.length > 0 && !b && s(e.items, t)
                                }), T
                            }

                            function d(e, t, a) {
                                return m = !1, v ? e.push(a) : angular.forEach(e, function (e, i) {
                                    e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type && (m = !0, e.items.push(a)), e.items && e.items.length > 0 && !m && d(e.items, t, a)
                                }), e
                            }
                            var u = e.index(),
                                f = e.$parentNodeScope,
                                p = {},
                                g = {},
                                h = t.$parent.drill_level || 0,
                                _ = t.opts.meta.level_fields.length || 1,
                                b = !1,
                                v = !1,
                                y = 0,
                                w = !1;
                            if ("down" === a) {
                                if (u) {
                                    if (t.opts.meta.filter_list_inner instanceof Array) return e.prev().$modelValue.items.push(e.$modelValue), e.remove(), t.opts.meta.filter_list_inner = t.currentLevelInnerFilter, void n();
                                    if (p = angular.copy(e.$modelValue), g = {}, t.originalLevelData = angular.copy(t.currentLevelInnerFilter), 1 == _) return e.prev().$modelValue.items.push(e.$modelValue), e.remove(), w = !1, angular.forEach(t.currentLevelInnerFilter, function (e) {
                                        e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), c(e) && e.items && e.items.length > 0 && (w = !0)
                                    }), w ? void(t.currentLevelInnerFilter = t.originalLevelData) : (t.opts.meta.filter_list_inner instanceof Array ? t.opts.meta.filter_list_inner = t.currentLevelInnerFilter : t.opts.meta.filter_list_inner[0] = t.currentLevelInnerFilter, void n());
                                    if (v = !1, e.prev().$modelValue.items.push(e.$modelValue), e.remove(), w = !1, angular.forEach(t.currentLevelInnerFilter, function (e) {
                                            e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), c(e) && e.items && e.items.length > 0 && (w = !0)
                                        }), w) return void(t.currentLevelInnerFilter = t.originalLevelData);
                                    ! function (e, t) {
                                        m = !1, angular.forEach(e, function (e, a) {
                                            e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type && (g = {}, y = a, v = !0)
                                        })
                                    }(t.currentLevelInnerFilter, p), v || i(t.currentLevelInnerFilter, p);
                                    for (var D = {}, F = 0; F < _; F++) t.opts.meta.filter_list_inner[F] = h == F ? t.currentLevelInnerFilter : function (e) {
                                        var t = r(e, p);
                                        return e = o(e, g, t)
                                    }(t.opts.meta.filter_list_inner[F]);
                                    n()
                                }
                            } else if ("up" === a && (p = angular.copy(e.$modelValue), g = {}, (f = e.$parentNodeScope) && e.$last)) {
                                if (t.opts.meta.filter_list_inner instanceof Array) return f.$parentNodesScope.$modelValue.push(e.$modelValue), e.remove(), t.opts.meta.filter_list_inner = t.currentLevelInnerFilter, void n();
                                if (1 == _) return f.$parentNodesScope.$modelValue.push(e.$modelValue), e.remove(), t.opts.meta.filter_list_inner instanceof Array ? t.opts.meta.filter_list_inner = t.currentLevelInnerFilter : t.opts.meta.filter_list_inner[0] = t.currentLevelInnerFilter, void n();
                                v = !1, f.$parentNodesScope.$modelValue.push(e.$modelValue), e.remove(),
                                    function (e, t) {
                                        m = !1, angular.forEach(e, function (e, a) {
                                            e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), e.fid == t.fid && "" == e.inner_adv_type && (g = {}, y = a, v = !0)
                                        })
                                    }(t.currentLevelInnerFilter, p), v || l(t.currentLevelInnerFilter, p);
                                for (var T = {}, F = 0; F < _; F++) t.opts.meta.filter_list_inner[F] = h == F ? t.currentLevelInnerFilter : function (e) {
                                    var t = s(e, p);
                                    return e = d(e, g, t)
                                }(t.opts.meta.filter_list_inner[F]);
                                n()
                            }
                        }
                    }, t.initInnerFilterField = function () {
                        var e = t.$parent.drill_level || 0,
                            a = t.opts.meta.level[e];
                        t.inner_field = [], angular.forEach(t.fields, function (e) {
                            "number" != e.data_type && (e.inner_adv_type = "", e.inner_show_name = "", t.inner_field.push(e))
                        }), "C300" != t.$parent.selected_type && (a.y.length > 0 && angular.forEach(a.y, function (e) {
                            e.inner_adv_type = "condition", e.inner_show_name = "", "row_summary" != e.fid && t.inner_field.push(e)
                        }), a.hasOwnProperty("y_optional") && a.y_optional.length > 0 && angular.forEach(a.y_optional, function (e) {
                            e.inner_adv_type = "condition", e.inner_show_name = "", t.inner_field.push(e)
                        }), a.hasOwnProperty("y_scatter") && a.y_scatter.length > 0 && angular.forEach(a.y_scatter, function (e) {
                            e.inner_adv_type = "condition", e.inner_show_name = "", t.inner_field.push(e)
                        }))
                    };
                    var _ = [],
                        b = {};
                    t.addInnerFilter = function (e) {
                        if (e && e.stopPropagation(), t.opts) {
                            _ = angular.copy(t.currentLevelInnerFilter);
                            var i = angular.copy(_);
                            t.initInnerFilterField(), t.addList = angular.copy(bdp.utils.handleInnerFilterLevel(i, !0)), b = {}, a.open({
                                template: "/static/partials/dialogTemplates/chart-inner-filter-config.html",
                                className: "ngdialog-theme-default str-filter-model inner-filter-model three-part",
                                scope: t
                            }), t.selectItemList = [], t.default_granularity = "", t.fieldSortValueCache = {}, 0 != t.addList.length && t.showAllItem("", t.addList[0], 0), t.showLoading = !1, d(function () {
                                t.addListHighLight(0)
                            }, 100)
                        }
                    }, t.getCurrentLayerFilter = function (e) {
                        var a = t.$parent.drill_level || 0;
                        return e instanceof Array ? e : e[a]
                    }, t.addInner = function (e, a, r) {
                        e.stopPropagation(), a.hasOwnProperty("uniq_id") || (a.uniq_id = (new Date).getTime());
                        var n, o = t.addList,
                            s = angular.copy(a);
                        if (s.inner_show_name = s.name + t.setAdvanceAggregatorName(s), r && (n = l[r], s.name = n + "(" + s.name + ")", s.data_type = "sub_date", s.fid = s.fid + "_" + r, s.uniq_id = (new Date).getTime()), o.length >= 10) return void i("内置筛选最多可设置10个");
                        if (0 == o.length) s.items = [], s.range = [], s.show_all = !0, s.recent_date_button = !1, "date" == s.data_type && (s.granularity = ""), o.push(s), t.showAllItem("", s, o.length - 1), setTimeout(function () {
                            t.addListHighLight(o.length - 1)
                        }, 10);
                        else {
                            for (var d = !0, c = 0, u = o.length; c < u; c++)
                                if ("number" === s.data_type || "number" != s.data_type && s.hasOwnProperty("aggregator")) {
                                    if (o[c].fid == s.fid && o[c].uniq_id == s.uniq_id) {
                                        d = !1;
                                        break
                                    }
                                } else if (o[c].fid == s.fid && !o[c].hasOwnProperty("aggregator")) {
                                d = !1;
                                break
                            }
                            if (d) {
                                s.hasOwnProperty("uniq_id") || (s.uniq_id = ""), b[s.fid + s.uniq_id] ? (s = b[s.fid + s.uniq_id], delete b[s.fid + s.uniq_id]) : (s.items = [], s.range = [], s.show_all = !0, s.recent_date_button = !1, "date" == s.data_type && (s.granularity = "")), o.push(s), t.showAllItem("", s, o.length - 1);
                                var f = $("#addList > ul"),
                                    p = f.scrollTop(),
                                    g = f.height();
                                setTimeout(function () {
                                    f.scrollTop(p + g), t.addListHighLight(o.length - 1)
                                }, 10)
                            } else i("该字段已添加！")
                        }
                    }, t.moreShow = {}, t.mouseoverFun = function (e) {
                        t.moreShow[e] = !0
                    }, t.delInnerFilter = function (e, a) {
                        e.stopPropagation();
                        var i = t.addList[a];
                        i.original && (b[i.fid + i.uniq_id] = i), i.fid == t.current_select_field && (t.default_granularity = ""), t.selectItemList = [], t.addList.splice(a, 1), "string" == i.data_type && t.fieldSortValueCache[i.fid] && delete t.fieldSortValueCache[i.fid]
                    }, t.handleInnerFilterByLayer = function (e) {
                        function a(e, t) {
                            var a = [];
                            return angular.forEach(t, function (t) {
                                e.indexOf(t.uniq_id) >= 0 && a.push(t)
                            }), a
                        }
                        var i = t.$parent.drill_level || 0,
                            r = t.opts.meta.level_fields.length || 1,
                            n = angular.copy(t.opts.meta.filter_list_inner[i]),
                            o = angular.copy(e),
                            l = angular.copy(bdp.utils.handleInnerFilterLevel(n));
                        o = angular.copy(bdp.utils.handleInnerFilterLevel(o));
                        var s = [],
                            d = [];
                        angular.forEach(l, function (e) {
                            s.push(e.uniq_id)
                        }), angular.forEach(o, function (e) {
                            d.push(e.uniq_id)
                        });
                        var u = getDiffItemsInTwoArray(s, d),
                            f = {
                                add: [],
                                del: []
                            };
                        f.add = a(u.add, o), f.del = a(u.del, l), angular.forEach(f.add, function (e) {
                            if (c(e)) t.opts.meta.filter_list_inner[i].push(e);
                            else
                                for (var a in t.opts.meta.filter_list_inner) 0 == t.opts.meta.filter_list_inner[a].length ? t.opts.meta.filter_list_inner[a] = [e] : t.opts.meta.filter_list_inner[a].push(e)
                        }), angular.forEach(f.del, function (e) {
                            function a(e, t) {
                                var i = !1;
                                angular.forEach(e, function (r, n) {
                                    r.uniq_id == t && (e.splice(n, 1), i = !0), r.items && r.items.length > 0 && !i && a(r.items, t)
                                })
                            }
                            if (c(e)) angular.forEach(t.opts.meta.filter_list_inner[i], function (a, r) {
                                e.uniq_id == a.uniq_id && t.opts.meta.filter_list_inner[i].splice(r, 1)
                            }), t.getNumberItemToDelete(e, t.opts.meta.filter_list_inner[i]);
                            else
                                for (var n = 0; n < r; n++) a(t.opts.meta.filter_list_inner[n], e.uniq_id)
                        })
                    }, t.setOtherAttributions = function (e) {
                        function a(e) {
                            angular.forEach(e, function (e) {
                                e.hasOwnProperty("inner_adv_type") || (e.inner_adv_type = ""), "string" == e.data_type && "" == e.inner_adv_type && (e.show_all = !!i[e.fid] && i[e.fid], e.recent_date_button = !1), "sub_date" == e.data_type && "" == e.inner_adv_type && (e.show_all = !!i[e.fid] && i[e.fid], e.recent_date_button = !1, e.granularity = n[e.fid] ? n[e.fid] : ""), "date" == e.data_type && "" == e.inner_adv_type && (e.show_all = !!i[e.fid] && i[e.fid], e.recent_date_button = !!r[e.fid] && r[e.fid], e.granularity = n[e.fid] ? n[e.fid] : "", e.range = o[e.fid] ? o[e.fid] : []), e.items && e.items.length > 0 && a(e.items)
                            })
                        }
                        var i = {},
                            r = {},
                            n = {},
                            o = {},
                            l = t.opts.meta.level_fields.length || 1;
                        angular.forEach(e, function (e) {
                            i[e.fid] = e.show_all, r[e.fid] = e.recent_date_button, n[e.fid] = e.granularity, "date" == e.data_type && "" == e.inner_adv_type && "" == e.granularity && angular.forEach(t.opts.meta.filter_list, function (t) {
                                t.fid == e.fid && (o[e.fid] = t.range)
                            }), "date" == e.data_type && "" == e.inner_adv_type && "" != e.granularity && (o[e.fid] = [])
                        });
                        for (var s = 0; s < l; s++) a(t.opts.meta.filter_list_inner[s])
                    }, t.saveInnerFilter = function () {
                        var e = t.opts.meta.level[t.$parent.drill_level];
                        if (angular.forEach(t.addList, function (e) {
                                if ("date" == e.data_type) {
                                    var a = p(e);
                                    e.range = a || e.range
                                }
                                e.inner_show_name = e.name + t.setAdvanceAggregatorName(e), e.original ? f(e, _) : _.push(e)
                            }), angular.forEach(b, function (t) {
                                t.hasOwnProperty("uniq_id") || (t.uniq_id = ""), "date" === t.data_type && [].concat(e.y || [], e.y_optional || []).forEach(function (e) {
                                    e.yoyQoqSetting && "filter" === e.yoyQoqSetting.type && t.fid === e.yoyQoqSetting.date_field_fid && delete e.yoyQoqSetting
                                }), u(t.fid, t.uniq_id, _)
                            }), t.opts.meta.filter_list_inner instanceof Array) {
                            for (var a = {}, r = t.opts.meta.level_fields.length || 1, l = 0; l < r; l++) a[l] = angular.copy(t.opts.meta.filter_list_inner);
                            t.opts.meta.filter_list_inner = a
                        }
                        if (t.handleInnerFilterByLayer(_), t.setOtherAttributions(t.addList), $.isEmptyObject(t.fieldSortValueCache)) n();
                        else {
                            var s = {
                                    config_list: []
                                },
                                d = g();
                            angular.forEach(t.fieldSortValueCache, function (e, t) {
                                s.config_list.push({
                                    tb_id: d,
                                    fid: t,
                                    type: 4,
                                    template: e
                                })
                            }), s.config_list = angular.toJson(s.config_list), o.enumField.updateOrder(s).then(function (e) {
                                0 == e.status ? n() : i(Number(e.status))
                            })
                        }
                    }, t.current_select_field = "", t.default_recent_str = "", t.default_granularity = "", t.selectItemList = [], t.itemDataType = "", t.selectField = {}, t.fieldSortValueCache = {}, t.showAllItem = function (a, r, n) {
                        if (t.selectField = r, t.selectItemList = [], t.showLoading = !0, t.current_select_field = r.fid, t.itemDataType = r.data_type, t.addListHighLight(n), "sub_date" == t.selectField.data_type) {
                            var s = r.fid.lastIndexOf("_"),
                                d = r.fid.length;
                            t.default_granularity = r.fid.substring(s + 1, d)
                        } else t.default_granularity = r.granularity;
                        if ("date" == r.data_type && "" == t.default_granularity) o.adv_date.list(t.chartid).then(function (e) {
                            0 == e.status ? (t.selectItemList = e.result, t.selectField.recent_date_button = !1) : i(Number(e.status)), t.showLoading = !1
                        });
                        else if ("date" == r.data_type && "" != t.default_granularity) {
                            r.fid, t.default_granularity;
                            t.beginTimer = (new Date).getTime(), e.post("/api/field/inner_range_preview", {
                                ct_id: t.chartid,
                                field: angular.toJson(r),
                                granularity: t.default_granularity
                            }).then(function (e) {
                                if (t.endTimer = (new Date).getTime(), t.beginTimer > t.endTimer) return void(t.selectItemList = []);
                                0 == e.status ? (t.selectItemList = e.result.range, t.showLoading = !1) : i(Number(e.status))
                            })
                        } else "number" == r.data_type || "number" != r.data_type && r.hasOwnProperty("aggregator") ? (t.$parent.drillOption ? t.tempDrillOption = angular.copy(t.$parent.drillOption) : t.tempDrillOption = {
                            drill_field: "",
                            drill_level: "",
                            drill_value: []
                        }, t.beginTimer = (new Date).getTime(), e.post("/api/field/inner_range_preview", {
                            ct_id: t.chartid,
                            field: angular.toJson(r),
                            uniq_id: r.uniq_id,
                            level: t.$parent.drill_level || 0,
                            drill_field: t.tempDrillOption.drill_field,
                            drill_level: t.tempDrillOption.drill_level,
                            drill_value: angular.toJson(t.tempDrillOption.drill_value)
                        }).then(function (e) {
                            if (t.endTimer = (new Date).getTime(), t.beginTimer > t.endTimer) return void(t.selectItemList = []);
                            0 == e.status ? (t.selectItemList = t.handleNumberByFormatter(e.result.range, t.selectField.formatter, t.selectField.aggregator), t.showLoading = !1) : i(Number(e.status))
                        })) : t.fieldSortValueCache[r.fid] && t.fieldSortValueCache[r.fid].length > 0 ? (t.selectItemList = t.fieldSortValueCache[r.fid], t.showLoading = !1) : (t.beginTimer = (new Date).getTime(), e.post("/api/field/inner_range_preview", {
                            ct_id: t.chartid,
                            field: angular.toJson(r),
                            granularity: ""
                        }).then(function (e) {
                            if (t.endTimer = (new Date).getTime(), t.beginTimer > t.endTimer) return void(t.selectItemList = []);
                            0 == e.status ? (t.selectItemList = e.result.range, t.showLoading = !1) : i(Number(e.status))
                        }));
                        t.default_recent_str = l[t.default_granularity], a && a.stopPropagation()
                    }, t.setShowAllFlag = function () {
                        t.selectField.show_all = !t.selectField.show_all
                    }, t.handleNumberByFormatter = function (e, t, a) {
                        for (var i = 2, r = 0; r < e.length; r++) t ? ("" !== t[t.check].digit && (i = t[t.check].digit), "num" == t.check && t.num.millesimal ? e[r] = Highcharts.numberFormat(e[r], i, ".", ",") : "num" == t.check ? e[r] = Highcharts.numberFormat(e[r], i, ".", "") : e[r] = Highcharts.numberFormat(100 * e[r], i, ".", "") + "%") : ("COUNT" != a && "COUNT_DISTINCT" != a || (i = 0), e[r] = Highcharts.numberFormat(e[r], i));
                        return e
                    }, t.addListHighLight = function (e) {
                        angular.forEach(angular.element(".add-list #addList ul li > div"), function (t, a) {
                            angular.element(t).removeClass("active"), e == a && angular.element(t).addClass("active")
                        })
                    }, t.setAdvanceAggregatorName = s, t.sortInnerStringFilter = {
                        items: ".J-sortable-string",
                        start: function () {},
                        update: function (e, a) {
                            t.fieldSortValueCache[t.current_select_field] = t.selectItemList
                        },
                        stop: function (e, t) {}
                    }
                },
                controller: angular.noop
            }
        }])
    }(),
    function () {
        function e(e, t) {
            if (!Array.isArray(e)) return !1;
            for (var a = 0, i = e.length; a < i; a++)
                if (e[a].fid == t) return !0;
            return !1
        }

        function t(e, t) {
            return e.x1 < t.x1 + (t.x2 - t.x1) / 2 && t.x2 - (t.x2 - t.x1) / 2 < e.x2 && e.y1 < t.y1 + (t.y2 - t.y1) / 2 && e.y2 - (t.y2 - t.y1) / 2 < e.y2
        }
        angular.module("BC.directives")
        .constant("chartColorTheme", bdpChart.colors).directive("chartColorSetting", ["formulaKeyMap", "$rootScope", "errHint", function (a, i, r) {
            return {
                templateUrl: "/static/partials/chart_color_setting.html",
                scope: !0,
                link: function (e, n, o) {
                    e.dropField = function (t, a) {
                        var n = bdpChart.ChartType;
                        if (2 == i.guide && 3 == i.enterprise_type) {
                            if (8 == i.guideStep) return !1;
                            if (9 == i.guideStep) return !1
                        }
                        var o = e.currentMeta.chart_type,
                            l = e.currentMeta.x,
                            s = e.currentMeta.y;
                        if (!o) return r("当前设置不支持拖动字段设置颜色"), !1;
                        if ("number" == e.dragField.data_type && (s.length > 1 || o === n.Biax || e.currentMeta.compare_axis && e.currentMeta.compare_axis.length)) return r("当前设置不支持设置渐变颜色"), !1;
                        if ("date" == e.dragField.data_type && l && e.dragField.fid !== l[0].fid) return r("若需要对日期字段设置颜色，改日期字段必须作为第一个维度"), !1;
                        if ([n.Gauge, n.Sankey, n.Waterfall, n.KPICard, n.Funnel, n.WordCloud, n.Sunburst, n.TreeMap, n.ComparisonBar].indexOf(o) > -1) return r("当前设置不支持拖动字段设置颜色"), !1;
                        if (n.Pie === o && !l.length) return r("无维度饼图不支持拖动字段设置颜色"), !1;
                        if (e.colorSetting && void 0 !== e.colorSetting.mode) {
                            for (var d = 0; d < e.colorSetting.field.length; d++)
                                if (e.colorSetting.field[d].fid === e.dragField.fid) return r("已经对该字段进行过颜色设置"), !1;
                            0 == +e.colorSetting.mode && [n.AreaMap, n.BubbleMap].indexOf(o) < 0 ? "number" == e.dragField.data_type ? e.colorSetting = {
                                field: [e.dragField],
                                theme: "default",
                                mode: 1,
                                aggregator: "SUM"
                            } : e.colorSetting.field.push(e.dragField) : e.colorSetting = {
                                field: [e.dragField],
                                theme: "default",
                                mode: "number" == e.dragField.data_type ? 1 : 0,
                                aggregator: "number" == e.dragField.data_type ? "SUM" : ""
                            }
                        } else e.colorSetting = {
                            field: [e.dragField],
                            theme: "default",
                            mode: "number" == e.dragField.data_type ? 1 : 0,
                            aggregator: "number" == e.dragField.data_type ? "SUM" : ""
                        };
                        if (o === n.Pie) {
                            var c = l.length && e.dragField.fid == l[0].fid;
                            e.colorSetting = {
                                field: [e.dragField],
                                theme: "default",
                                mode: "number" != e.dragField.data_type && c ? 0 : 1,
                                aggregator: "number" == e.dragField.data_type ? "SUM" : c ? "" : "COUNT"
                            }
                        }
                        e.init(e.colorSetting), e.showColorSettingModalByField()
                    }, 
                    e.$on("onDropToColor", function (t, a) {
                        e.onDrop(a.originEvent, a.ui)
                    }), 
                    e.formulaKeyMap = a, e.startDrag = function () {
                        angular.element(".chart-left-side,.chart-main").css({
                            overflow: "visible"
                        })
                    }, 
                    e.removePosition = function () {
                        angular.element(".color-setting-layer").css({
                            overflow: "visible"
                        })
                    }, 
                    e.del = function (a, r, n) {
                        var o = bdpChart.ChartType;
                        angular.element(".color-setting-layer,.chart-left-side,.chart-main").css({
                            overflow: ""
                        });
                        var l = r.helper.position(),
                            s = $(".color-setting"),
                            d = {
                                width: s.width(),
                                height: s.height()
                            },
                            c = {
                                width: r.helper.width(),
                                height: r.helper.height()
                            };
                        if (t({
                                x1: 0,
                                y1: 0,
                                x2: d.width,
                                y2: d.height
                            }, {
                                x1: l.left,
                                y1: l.top,
                                x2: c.width + l.left,
                                y2: c.height + l.top
                            })) return void r.helper.css({
                            left: 0,
                            top: 0
                        });
                        if (0 === n && 1 === e.colorSetting.field.length) {
                            if (delete e.colorSetting, delete e.currentMeta.color_setting, [o.Pie, o.Gauge, o.Sankey, o.Waterfall, o.KPICard, o.Funnel, o.WordCloud, o.Sunburst, o.TreeMap].indexOf(e.currentMeta.chart_type) < 0) {
                                var u = bdpChart.getColorsByType(e.currentMeta.chart_type, "bdp"),
                                    f = u.length;
                                e.currentMeta.y.forEach(function (e, t) {
                                    e.series_color = u[t % f]
                                }), e.currentMeta.y_optional && e.currentMeta.y_optional.forEach(function (t, a) {
                                    t.series_color = u[(a + e.currentMeta.y.length) % f]
                                })
                            }
                            e.saveChartImmediate()
                        } else e.colorSetting.field.splice(n, 1), e.getFieldValues(e.colorSetting.field, e.tb_id).then(function (t) {
                            t && (t.total > 100 ? e.viewData.showTips = !0 : (e.viewData.showTips = !1, i.$emit("triggerBuildEnumColorMap", t.result), e.currentMeta.color_setting = e.colorSetting, e.saveChartImmediate()))
                        });
                        a.stopPropagation()
                    }, 
                    e.clickPanel = function () {
                        e.showColorSettingModalByField()
                    }
                },
                controller: ["$scope", "$rootScope", "ngDialog", "commonService", "chartColorTheme", "operatorHelpLink", "$q", "$jsTipTranslate", "$timeout", function (t, a, i, r, n, o, l, s, d) {
                    function c(e, a, i) {
                        if (i === D.Sunburst ? a && e.x[0].fid !== a.x[0].fid && delete e.color_setting : i === D.Sankey ? !a || e.x[1] && e.x[1].fid === a.x[1].fid || delete e.color_setting : i === D.TreeMap && (a && e.x[0] && e.x[0].fid !== a.x[0].fid || a && !e.x[0]) && delete e.color_setting, !a || a.chart_type !== i || a.chart_type === i && !e.color_setting || !angular.equals(a.color_setting, e.color_setting)) {
                            if (!a && e.color_setting && void 0 !== e.color_setting.mode) t.colorSetting = angular.copy(e.color_setting), t.colorSetting.is_series = !1;
                            else {
                                var r = {
                                    isDefault: !0,
                                    field: [e.x[0]],
                                    theme: "default",
                                    mode: 0,
                                    aggregator: "",
                                    is_series: !1
                                };
                                i === D.Pie ? 0 === e.x.length ? t.colorSetting = {
                                    is_series: !0
                                } : e.color_setting ? t.colorSetting = angular.copy(e.color_setting) : t.colorSetting && void 0 !== t.colorSetting.mode ? e.x[0].fid !== t.colorSetting.field[0].fid ? t.colorSetting = angular.copy(r) : 1 == +t.colorSetting.mode ? delete t.colorSetting.enum_color_map : delete t.colorSetting.range_color : t.colorSetting = angular.copy(r) : [D.Sunburst, D.TreeMap].indexOf(i) > -1 ? e.color_setting && e.color_setting.field[0].fid === e.x[0].fid ? t.colorSetting = angular.copy(e.color_setting) : t.colorSetting = angular.copy(r) : i === D.Sankey && (e.x[1] && (r.field = [e.x[1]]), e.color_setting && e.color_setting.field[0].fid === e.x[1].fid ? t.colorSetting = angular.copy(e.color_setting) : t.colorSetting = angular.copy(r)), e.color_setting = angular.copy(t.colorSetting)
                            }
                            t.init(t.colorSetting)
                        }
                    }

                    function u(e) {
                        var t = e.color_setting;
                        t && !$.isEmptyObject(t) && 1 == t.mode && delete e.color_setting
                    }

                    function f(a, i) {
                        if (t.currentMeta = a, a) {
                            if ((a.chart_type === D.Biax || a.y.length > 1) && u(a),
                                a.compare_axis && a.compare_axis.length > 0) {
                                if (u(a), [D.Table, D.Pie, D.Gauge, D.Sankey, D.Waterfall, D.KPICard, D.Funnel, D.WordCloud, D.Sunburst].indexOf(a.chart_type) < 0) {
                                    a.color_setting && delete a.color_setting.is_series;
                                    var r = a.color_setting && !$.isEmptyObject(a.color_setting) && !$.isEmptyObject(a.color_setting.enum_color_map),
                                        n = [].concat(a.y || [], a.y_optional || []);
                                    r || (r = n.some(function (e, t) {
                                        return !!e.series_color
                                    })), r || (a.color_setting = {
                                        isDefault: !0,
                                        field: [].concat(a.compare_axis),
                                        aggregator: "",
                                        theme: "default",
                                        mode: 0,
                                        enum_color_map: {}
                                    })
                                }
                                a.split_compare && a.color_setting && $.isEmptyObject(a.color_setting.enum_color_map) && delete a.color_setting
                            }
                            if ([D.Sankey, D.Sunburst, D.Pie, D.Funnel, D.TreeMap].indexOf(a.chart_type) > -1) c(a, i, a.chart_type);
                            else if (D.Gauge === a.chart_type) {
                                var o = !1,
                                    l = t.currentMeta.tb_conditional_formatting;
                                if (t.colorSetting = {
                                        is_series: !(l && l.length > 0)
                                    }, l && (o = l.some(function (e) {
                                        if (e.uniq_id === t.currentMeta.y[0].uniq_id) return !0
                                    })), t.currentMeta.y[0] && !t.currentMeta.y[0].series_color && !o) {
                                    var s = t.currentMeta.y[0].fid,
                                        d = t.currentMeta.y[0].uniq_id;
                                    t.currentMeta.y[0].BDP_TCF = !0, t.currentMeta.tb_conditional_formatting = [{
                                        fid: s,
                                        uniq_id: d,
                                        operator: 4,
                                        value: 1,
                                        isPercentage: [!0],
                                        style: {
                                            backgroundColor: "#40A276"
                                        }
                                    }, {
                                        fid: s,
                                        uniq_id: d,
                                        operator: 12,
                                        value: [.75, 1],
                                        isPercentage: [!0, !0],
                                        style: {
                                            backgroundColor: "#F6CC4E"
                                        }
                                    }, {
                                        fid: s,
                                        uniq_id: d,
                                        operator: 12,
                                        value: [.25, .75],
                                        isPercentage: [!0, !0],
                                        style: {
                                            backgroundColor: "#F38000"
                                        }
                                    }, {
                                        fid: s,
                                        uniq_id: d,
                                        operator: 3,
                                        value: .25,
                                        isPercentage: [!0],
                                        style: {
                                            backgroundColor: "#EE4B4B"
                                        }
                                    }]
                                }
                                g(t.colorSetting)
                            } else if (D.KPICard === a.chart_type) {
                                var f = !1,
                                    l = t.currentMeta.tb_conditional_formatting;
                                if (t.colorSetting = {
                                        is_series: !0
                                    }, t.currentMeta.y[1] && l && (f = l.some(function (e) {
                                        if (e.uniq_id === t.currentMeta.y[1].uniq_id) return !0
                                    })), t.currentMeta.y.length > 1 && !t.currentMeta.y[1].series_color && !f) {
                                    var p = t.currentMeta.y[1].fid,
                                        h = t.currentMeta.y[1].uniq_id;
                                    t.currentMeta.y[1].BDP_TCF = !0, t.currentMeta.tb_conditional_formatting = [].concat([{
                                        fid: p,
                                        uniq_id: h,
                                        operator: 3,
                                        value: 0,
                                        shape_type: "arrow-down",
                                        style: {
                                            color: "#40B27E"
                                        }
                                    }, {
                                        fid: p,
                                        uniq_id: h,
                                        operator: 0,
                                        value: 0,
                                        shape_type: "arrow-equal",
                                        style: {
                                            color: "#A3ABB0"
                                        }
                                    }, {
                                        fid: p,
                                        uniq_id: h,
                                        operator: 2,
                                        value: 0,
                                        shape_type: "arrow-up",
                                        style: {
                                            color: "#EF4B4A"
                                        }
                                    }], t.currentMeta.tb_conditional_formatting || [])
                                }
                                g(t.colorSetting)
                            } else a.color_setting && a.color_setting.enum_color_map && $.isEmptyObject(a.color_setting.enum_color_map) && e(a.x, a.color_setting.field[0].fid) && a.color_setting.field[0].fid !== a.x[0].fid && delete a.color_setting, t.colorSetting = angular.copy(a.color_setting), g(t.colorSetting)
                        }
                    }

                    function p(e, a) {
                        if (e && "C340" == t.currentMeta.chart_type && angular.toJson(e) != angular.toJson(a)) {
                            g(t.currentMeta.color_setting);
                            var i = t.colorSetting;
                            if (i && 0 == i.mode) {
                                for (var r = angular.copy(t.wordCloudValues), n = r.length, o = n - 1; o >= 0;) r[o].length > 200 && r.splice(o, 1), o--;
                                var l = t.colorSetting.enum_color_map || {};
                                for (var s in l) l.hasOwnProperty(s) && $.inArray(s, r) == -1 && delete l[s];
                                angular.forEach(e, function (e, a) {
                                    void 0 == l[e] && (l[e] = {
                                        name: e,
                                        color: t.colors[a % t.colors.length]
                                    })
                                }), t.colorSetting.enum_color_map = l, t.updateMeta() && t.saveChartImmediate({
                                    not_need_redraw: !0
                                })
                            }
                        }
                    }

                    function g(e) {
                        var a = t.currentMeta,
                            i = bdpChart.ChartType;
                        if (e ? e.is_series = !!e.is_series : (e = {
                                is_series: [i.TreeMap, i.Sankey, i.Sunburst, i.AreaMap, i.BubbleMap].indexOf(a.chart_type) < 0
                            }, t.colorSetting = e), t.colorPickerOptions.showAlpha = (bdp.bdpPageStatus.isUnderDataScreen() || bdp.bdpPageStatus.isUnderAdvDash()) && [i.Scatter, i.Sunburst].indexOf(a.chart_type) < 0, a.compare_axis && a.compare_axis.length) {
                            var r = [].concat(a.y || [], a.y_optional || []),
                                n = r.some(function (e, t) {
                                    return !!e.series_color
                                });
                            t.showSeriesColor = n || [i.Gauge, i.KPICard].indexOf(a.chart_type) > -1, a.split_compare && (t.showSeriesColor = !a.color_setting || $.isEmptyObject(a.color_setting.enum_color_map))
                        } else t.showSeriesColor = e.is_series, t.showSeriesColor = !(!a.chart_type || !(e.is_series || [i.Waterfall, i.Funnel].indexOf(a.chart_type) > -1) || a.chart_type === i.Scatter);
                        if (1 == e.is_series) return a.color_setting = {
                            is_series: !0
                        }, !1;
                        if (0 == +e.mode) t.initColorTheme(e);
                        else if (1 == +e.mode) {
                            for (var o = 0, l = t.rangeColorTheme.length; o < l; o++)
                                if (t.rangeColorTheme[o].name == e.theme) {
                                    t.rangeThemeSelector.theme = t.rangeColorTheme[o];
                                    break
                                }
                            t.setRangeColor(e.theme), t.colorSetting.range_color.inverse = e.range_color.inverse, t.viewData.enable_step = !!e.range_color.step, t.viewData.step = e.range_color.step || 5, t.viewData.disable_max = !defined(e.range_color.disable_max) || e.range_color.disable_max, t.viewData.disable_min = !defined(e.range_color.disable_min) || e.range_color.disable_min, t.viewData.max = e.range_color.max, t.viewData.min = e.range_color.min
                        }
                        return !0
                    }

                    function h(e, a) {
                        return r.field.getFilteredRange(t.ct_id, a, e).then(function (e) {
                            var t = e;
                            return 0 == t.status ? t.result : null
                        })
                    }

                    function m(e, t) {
                        var a = e.granularity,
                            i = e.granularity_name || "",
                            r = e.month_start_day || 0;
                        return "week" === a && (r = e.week_start_day_of_week), t.map(function (e, t) {
                            return bdpChart.helper.checkGranularity(a, e, i, r)
                        })
                    }

                    function _(e, t) {
                        if (!e.length) return [
                            []
                        ];
                        var a, i = _(e.slice(1)),
                            r = [];
                        return e[0].forEach(function (e) {
                            i.forEach(function (i) {
                                a = [e].concat(i), t && (a = a.join(t)), r.push(a)
                            })
                        }), r
                    }

                    function b(e) {
                        return Object.keys(e)
                    }

                    function v(e) {
                        var a = {
                            showNameObj: e,
                            dataObj: angular.copy(e)
                        };
                        angular.forEach(t.colorSetting.field, function (t) {
                            e[t.fid] && "date" === t.data_type && (a.showNameObj[t.fid] = m(t, e[t.fid]))
                        });
                        var i = [].concat(t.currentMeta.y, t.currentMeta.y_optional || []);
                        i.length > 1 && (a.showNameObj.fields = [], a.dataObj.fields = [], i.forEach(function (e) {
                            e && (a.showNameObj.fields.push(e.nick_name || e.name), a.dataObj.fields.push(e.uniq_id))
                        }));
                        var r = b(a.showNameObj).map(function (e) {
                                return a.showNameObj[e]
                            }),
                            n = b(a.dataObj).map(function (e) {
                                return a.dataObj[e]
                            });
                        return {
                            showArr: _(r, "_"),
                            dataArr: _(n, "_")
                        }
                    }

                    function y(e, a, i, r) {
                        if (t.colorSetting && void 0 !== t.colorSetting.mode && t.colors) {
                            var n = {};
                            angular.forEach(t.colorSetting.field, function (e) {
                                a[e.fid] && (n[e.fid] = a[e.fid])
                            }), t.originColorFields = angular.copy(n);
                            var o = {};
                            !i && t.colorSetting.enum_color_map || (t.colorSetting.enum_color_map = {});
                            var l = v(n);
                            l.dataArr.forEach(function (e, a) {
                                void 0 == o[e] && (o[e] = t.colorSetting.enum_color_map[e] || void 0, o[e] ? o[e].name = l.showArr[a] : o[e] = {
                                    color: t.colors[a % t.colors.length],
                                    name: l.showArr[a]
                                })
                            }), t.colorSetting.enum_color_map = o, r && (t.currentMeta.color_setting.enum_color_map = o), t.colorItemsOrder = l.dataArr.slice()
                        }
                    }
                    var w = a.language,
                        D = bdpChart.ChartType;
                    t.goHelp = function (e) {
                        o(e)
                    }, 
                    t.$watch("chart_ops.meta.level[drill_level]", f, !0), 
                    t.getFieldValues = h, 
                    t.$watch("wordCloudValues", p), 
                    t.colorTheme = [], 
                    t.rangeColorTheme = [], 
                    t.colorWordCloudModel = [];
                    var F = "zh" === w ? {
                            default: "BDP默认 12",
                            contrast: "对比蓝 12",
                            vintage: "葡萄酒 10",
                            blue_sky: "天空蓝 10",
                            green_contrast: "对比绿 10",
                            green_contrast_2: "对比绿 7",
                            green: "绿色 7",
                            gray_blue: "灰蓝 7",
                            purple: "粉紫 5",
                            blue_contrast: "对比蓝 5",
                            gray_red: "灰红 5",
                            gray: "灰色 5"
                        } : {
                            default: "BDP Default 12",
                            contrast: "Contrast Blue 12",
                            vintage: "Vintage 10",
                            blue_sky: "Sky Blue 10",
                            green_contrast: "Contrast Green 10",
                            green_contrast_2: "Contrast Green 7",
                            green: "Green 7",
                            gray_blue: "Gray-Blue 7",
                            purple: "Purple 5",
                            blue_contrast: "Contrast Blue 5",
                            gray_red: "Gray-Red 5",
                            gray: "Gray 5"
                        },
                        T = "zh" === w ? {
                            default: "默认",
                            golden: "渐变金",
                            green: "渐变绿",
                            blue: "渐变蓝",
                            purple: "渐变紫",
                            gray: "渐变灰"
                        } : {
                            default: "Default",
                            golden: "Gradient Gold",
                            green: "Gradient Green",
                            blue: "Gradient Blue",
                            purple: "Gradient Purple",
                            gray: "Gradient Gray"
                        },
                        S = "en" === w ? {
                            0: "key words",
                            1: "word frequency"
                        } : {
                            0: "关键词",
                            1: "词频"
                        };
                    angular.forEach(S, function (e, a) {
                        t.colorWordCloudModel.push({
                            key: a,
                            name: e
                        })
                    }), 
                    angular.forEach(n, function (e, a) {
                        t.colorTheme.push({
                            name: a,
                            alias: F[a]
                        })
                    }), 
                    angular.forEach(bdpChart.rangeColors, function (e, a) {
                        t.rangeColorTheme.push({
                            name: a,
                            alias: T[a]
                        })
                    }), 
                    t.rangeColorTheme.push({
                        name: "custom",
                        alias: t.tips.custom
                    }), 
                    t.themeSelector = {
                        open: !1,
                        theme: t.colorTheme[0]
                    }, 
                    t.cloudColorModeCache = {
                        mode_0: "default",
                        mode_1: "blue"
                    }, 
                    t.changeTheme = function (e) {
                        e != t.themeSelector.theme && (t.themeSelector.theme = e, t.themeSelector.open = !1, t.colors = n[e.name], "C340" == t.currentMeta.chart_type && (t.cloudColorModeCache.mode_0 = e.name))
                    }, 
                    t.changeAggr = function () {
                        var e = t.colorSetting.aggregator ? 1 : 0;
                        if (e != t.colorSetting.mode) {
                            t.colorSetting.mode = e, t.colorSetting.theme = "default", t.init(t.colorSetting), 0 == e && (t.colorSetting.aggregator = "");
                            var i = t.currentMeta.chart_type;
                            0 == e && "C340" != i && h(t.colorSetting.field, t.tb_id).then(function (e) {
                                e && (e.total > 100 ? t.viewData.showTips = !0 : (t.viewData.showTips = !1, a.$emit("triggerBuildEnumColorMap", e.result)))
                            })
                        }
                    }, 
                    t.colorPickerOptions = {
                        preferredFormat: "hex",
                        showInput: !0,
                        showAlpha: !1,
                        cancelText: "en" === w ? "Cancel" : "取消",
                        chooseText: "en" === w ? "Ok" : "确定"
                    }, 
                    t.rangeThemeSelector = {
                        open: !1,
                        theme: t.rangeColorTheme[0]
                    }, 
                    t.changeRangeTheme = function (e) {
                        e != t.themeSelector.theme && (t.rangeThemeSelector.theme = e, t.rangeThemeSelector.open = !1, t.colorSetting.theme = e.name, t.setRangeColor(e.name), "C340" == t.currentMeta.chart_type && (t.cloudColorModeCache.mode_1 = e.name))
                    }, 
                    t.changeRangeColor = function () {
                        t.changeRangeTheme(t.rangeColorTheme[t.rangeColorTheme.length - 1])
                    }, 
                    t.reset = function () {
                        delete t.colorSetting
                    }, 
                    t.setRangeColor = function (e) {
                        if ("custom" != e) {
                            t.colorSetting.range_color = t.colorSetting.range_color || {};
                            var a = bdpChart.rangeColors[e],
                                i = t.colorSetting.range_color.inverse;
                            t.colorSetting.range_color.start_color = i ? a[1] : a[0], t.colorSetting.range_color.end_color = i ? a[0] : a[1]
                        }
                    }, 
                    t.initColorTheme = function (e) {
                        for (var a = 0, i = t.colorTheme.length; a < i; a++)
                            if (t.colorTheme[a].name == e.theme) {
                                t.themeSelector.theme = t.colorTheme[a];
                                break
                            }
                        t.colors = n[e.theme]
                    }, 
                    t.viewData = {}, 
                    t.init = g, 
                    t.canRemove = function () {
                        var e = t.currentMeta,
                            a = e.chart_type,
                            i = ["C261", "C300", "C340"].indexOf(a) < 0;
                        return "C230" === a && e.x && e.color_setting && e.x[0].fid === e.color_setting.field[0].fid && (i = !1), i
                    }, 
                    t.updateMeta = function () {
                        var a = angular.copy(t.colorSetting),
                            i = t.$eval("chart_ops.meta.level[drill_level]");
                        if (1 == a.mode) {
                            if (delete a.enum_color_map, !t.handleMaxMin(a.range_color)) return !1
                        } else delete a.range_color;
                        if (1 != t.colorSetting.mode) {
                            var r = i.chart_type;
                            t.colorSetting.field.forEach(function (t, a) {
                                if (!e(i.x, t.fid))
                                    if ("C280" == r) i.x.push(t);
                                    else if (r.indexOf("C27") == -1)
                                    if (i.compare_axis) {
                                        var n = i.compare_axis.every(function (e, a) {
                                            return e.fid !== t.fid
                                        });
                                        n && i.compare_axis.push(t)
                                    } else i.compare_axis = [], i.compare_axis.push(t)
                            })
                        }
                        return a.is_series || (i.y.forEach(function (e) {
                            delete e.series_color
                        }), i.y_optional && i.y_optional.forEach(function (e) {
                            delete e.series_color
                        })), i.color_setting = a, !0
                    }, 
                    t.handleMaxMin = function (e) {
                        var a = !t.viewData.disabled_max && defined(t.viewData.max),
                            i = !t.viewData.disabled_min && defined(t.viewData.min);
                        return a && i && t.viewData.min > t.viewData.max ? (alert("值域最小值不能大于最大值"), !1) : (e.disable_max = !!t.viewData.disable_max, e.disable_min = !!t.viewData.disable_min, defined(t.viewData.max) && (e.max = t.viewData.max), defined(t.viewData.min) && (e.min = t.viewData.min), !0)
                    }, 
                    a.$on("triggerBuildEnumColorMap", y), t.$on("chartFilterChange", function (e, i) {
                        t.colorSetting && 0 == t.colorSetting.mode ? h(t.colorSetting.field, t.tb_id).then(function (e) {
                            e && (e.total <= 100 && a.$emit("triggerBuildEnumColorMap", e.result), t.updateMeta(), t.saveChartImmediate(i.saveChartOpts))
                        }) : t.saveChartImmediate(i.saveChartOpts)
                    }), 
                    t.showColorSettingModalByField = function () {
                        if (t.colorSetting) {
                            for (var e = t.colorSetting.field, a = e.length, r = [].concat(t.currentMeta.x, t.currentMeta.compare_axis || []), n = 0; n < a; n++)
                                if ("date" === e[n].data_type) {
                                    for (var o = 0; o < r.length; o++)
                                        if (r[o].fid === e[n].fid) {
                                            e.splice(n, 1, r[o]);
                                            break
                                        }
                                    break
                                }
                            t.preCloseDialog = !1, i.open({
                                className: "ngdialog-theme-default ngdialog-color-setting",
                                templateUrl: "/static/partials/dialogTemplates/color_setting_modal.html",
                                scope: t,
                                controller: "colorSettingByFieldCtrl",
                                preCloseCallback: function () {
                                    return t.themeSelector.open = !1, t.rangeColorTheme.open = !1, !!t.preCloseDialog || (delete t.colorSetting.is_series, angular.equals(t.currentMeta.color_setting, t.colorSetting) ? void 0 : !!confirm(t.tips["chart.notSave"]) && (d(function () {
                                        t.colorSetting = angular.copy(t.currentMeta.color_setting), t.init(t.colorSetting)
                                    }, 0), !0))
                                }
                            })
                        }
                    }, 
                    t.showColorSettingModalByItem = function () {
                        i.open({
                            className: "ngdialog-theme-default ngdialog-color-setting",
                            templateUrl: "/static/partials/dialogTemplates/series_color_modal.html",
                            data: {
                                colorSetting: t.colorSetting
                            },
                            scope: t,
                            controller: "colorSettingByItemCtrl"
                        })
                    }, s(["chart.notSave", "custom"], t)
                }]
            }
        }])
        .controller("colorSettingByFieldCtrl", ["$rootScope", "$scope", "$getCustomFormula", "chartColorTheme", "commonService", function (e, t, a, i, r) {
            var n = t.currentMeta.chart_type,
                o = t.colorSetting.mode;
            t.isSunburst = "C360" == n, 
            t.showFormulaList = function () {
                return 1 == t.colorSetting.field.length && 1 != t.colorSetting.field[0].is_build_aggregated && (!t.currentMeta.compare_axis || 0 === t.currentMeta.compare_axis.length) && ["C370", "C360", "C320", "C340"].indexOf(t.currentMeta.chart_type) < 0
            }, 0 == o && t.getFieldValues(t.colorSetting.field, t.tb_id).then(function (a) {
                a && ("C340" != n ? a.total > 100 ? t.viewData.showTips = !0 : (t.viewData.showTips = !1, e.$emit("triggerBuildEnumColorMap", a.result), t.selectItem({}, t.colorItemsOrder[0], 0)) : (e.$emit("triggerBuildEnumColorMap", a.result), t.selectItem({}, t.colorItemsOrder[0], 0)))
            }), "C340" == n && (0 == o ? t.cloudColorModeCache.mode_0 = t.colorSetting.name ? t.colorSetting.name : "default" : t.cloudColorModeCache.mode_1 = t.colorSetting.name ? t.colorSetting.name : "blue"), "number" == t.colorSetting.field[0].data_type ? t.formulaList = a(["SUM", "AVERAGE", "MAX", "MIN", "COUNT", "COUNT_DISTINCT"]) : t.formulaList = a(["COUNT", "COUNT_DISTINCT"]), t.selected = {
                value: "",
                key: "",
                color: ""
            }, 
            t.applyTheme = function (a) {
                t.colorSetting.theme = a.name, t.originColorFields && (e.$emit("triggerBuildEnumColorMap", t.originColorFields, !0), t.selectedColorKeys.length <= 1 && (t.viewData.selectedColor = t.colorSetting.enum_color_map[t.colorItemsOrder[t.selectedColorKeys[0]]].color))
            }, 
            t.selectColor = function (e) {
                angular.forEach(t.selectedColorKeys, function (a) {
                    var i = t.colorItemsOrder[a];
                    i && (t.colorSetting.enum_color_map[i].color = t.colors[e], t.selected.color = t.colors[e], t.viewData.selectedColor = t.colors[e])
                })
            }, 
            t.onColorChange = function (e) {
                angular.forEach(t.selectedColorKeys, function (a) {
                    var i = t.colorItemsOrder[a];
                    i && (t.colorSetting.enum_color_map[i].color = e)
                })
            }, 
            t.changeColorModel = function () {
                var a = t.colorSetting,
                    i = t.colorSetting.mode,
                    r = t.currentMeta.color_setting.mode;
                0 == i ? (a.theme = t.cloudColorModeCache.mode_0, t.initColorTheme(a), e.$emit("triggerBuildEnumColorMap", t.wordCloudValues, !0)) : (a.theme = t.cloudColorModeCache.mode_1, 0 == r && (t.setRangeColor(a.theme), t.viewData.enable_step = !1, t.viewData.step = 5, t.viewData.disable_max = !0, t.viewData.disable_min = !0))
            }, 
            t.toggleStep = function (e) {
                e ? t.colorSetting.range_color.step = t.viewData.step : t.colorSetting.range_color && (t.colorSetting.range_color.step = 0)
            }, 
            t.setStep = function (e) {
                e && (t.colorSetting.range_color.step = e)
            }, 
            t.selectedColorKeys = [], t.selectItem = function (e, a, i) {
                var r = t.colorSetting.enum_color_map[a];
                if (e.metaKey || e.ctrlKey) t.selectedColorKeys.push(i);
                else if (e.shiftKey)
                    if (0 == t.selectedColorKeys.length) t.selectedColorKeys = [i];
                    else {
                        var n = t.selectedColorKeys[0];
                        t.selectedColorKeys.length = 1;
                        for (var o = i > n ? -1 : 1, l = i; l != n;) t.selectedColorKeys.push(l), l += o
                    }
                else t.selected.color = r.color, t.viewData.selectedColor = r.color, t.selectedColorKeys = [i]
            }, 
            t.isHighlight = function (e) {
                return t.selectedColorKeys.indexOf(e) > -1
            }, 
            t.inverseRangeColor = function () {
                var e = t.colorSetting.range_color,
                    a = e.start_color;
                e.start_color = e.end_color, e.end_color = a
            }, 
            t.saveByField = function () {
                t.$parent.preCloseDialog = !0, t.viewData.showTips && 0 == t.colorSetting.mode ? (t.colorSetting.field.length > 0 && t.colorSetting.field.pop(), t.closeThisDialog()) : (t.colorSetting.is_series = !1, delete t.colorSetting.isDefault, t.updateMeta() && (t.saveChartImmediate(), t.closeThisDialog()))
            }, 
            t.cancelByField = function () {
                t.$parent.preCloseDialog = !1, t.closeThisDialog()
            }
        }])
        .controller("colorSettingByItemCtrl", ["$scope", "chartColorTheme", function (e, t) {
            e.series = angular.copy(e.seriesColors), e.series_theme = e.currentMeta.series_theme || "default", e.chartColorTheme = t, e.applyTheme = function (a) {
                var i = a.name,
                    r = t[i].length;
                angular.forEach(e.series, function (e, a) {
                    var n = a % r;
                    e.color = t[i][n]
                }), e.series_theme = a.name, e.viewData.selectedColor = e.series[e.highlightIndex].color
            }, 
            e.selectItem = function (t) {
                e.highlightIndex = t, e.viewData.selectedColor = e.series[t].color
            }, 
            e.isHighlight = function (t) {
                return e.highlightIndex == t
            }, 
            e.selectColor = function (a) {
                if (void 0 != e.highlightIndex) {
                    var i = t[e.themeSelector.theme.name];
                    e.series[e.highlightIndex].color = i[a], e.viewData.selectedColor = i[a]
                }
            }, 
            e.onColorChange = function (t) {
                void 0 != e.highlightIndex && (e.series[e.highlightIndex].color = t)
            }, 
            e.init(), 
            e.selectItem(0), 
            e.saveByItem = function () {
                e.colorSetting.is_series = !0;
                var t = e.isGisColorSetting ? e.currentMeta : e.chart_ops.meta.level[e.drill_level];
                if ("C320" === t.chart_type) t.waterfall_setting.color_theme = [], angular.forEach(e.series, function (e, a) {
                    t.waterfall_setting.color_theme.push(e.color)
                }), t.series_theme = e.series_theme;
                else if ("C330" === t.chart_type) t.funnel_setting.color_theme = [], angular.forEach(e.series, function (e, a) {
                    t.funnel_setting.color_theme.push(e.color)
                }), t.series_theme = e.series_theme;
                else if (e.isGisColorSetting) {
                    var a = t.y;
                    angular.forEach(a, function (t, a) {
                        t.series_color = e.series[a].color
                    }), t.series_theme = e.series_theme
                } else {
                    var a = t.y.concat(t.y_optional || []);
                    angular.forEach(a, function (t, a) {
                        for (var i = 0; i < e.series.length; i++) t.uniq_id === e.series[i].uniq_id && (window.bdpChart.helper.timePredicted.checkType(e.series[i], "enable") ? t.time_seires_setting.series_color = e.series[i].color : t.series_color = e.series[i].color)
                    }), t.series_theme = e.series_theme
                }
                e.saveChartImmediate(), e.closeThisDialog()
            }, 
            e.cancelByItem = function () {
                e.closeThisDialog()
            }
        }])
        .directive("colorLinearGradient", function () {
            return {
                template: '<span class="color-thumb fl" ng-style="{background: startColor}"><color-picker ng-model="startColor" on-change="onChangeColor()" options="{showAlpha: showAlpha}"></color-picker></span><span class="color-thumb fr" ng-style="{background: endColor}"><color-picker ng-model="endColor" on-change="onChangeColor()" options="{showAlpha: showAlpha}"></color-picker></span><div class="color-range-gradient"></div>',
                scope: {
                    startColor: "=",
                    endColor: "=",
                    step: "=",
                    onChangeColor: "&onChangeColor",
                    showAlpha: "="
                },
                link: function (e, t, a) {
                    function i(e, a, i) {
                        return bdpChart.helper.renderLinearGradient(t.find(".color-range-gradient"), e, a, i)
                    }
                    e.$watch("startColor", function (t) {
                        t && i(e.startColor, e.endColor, e.step)
                    }), e.$watch("endColor", function (t) {
                        t && i(e.startColor, e.endColor, e.step)
                    }), e.$watch("step", function (t) {
                        i(e.startColor, e.endColor, e.step)
                    })
                }
            }
        })
    }(),
    function () {
        function e(e, t) {
            return e.x1 < t.x1 + (t.x2 - t.x1) / 2 && t.x2 - (t.x2 - t.x1) / 2 < e.x2 && e.y1 < t.y1 + (t.y2 - t.y1) / 2 && e.y2 - (t.y2 - t.y1) / 2 < e.y2
        }
        var t = {};
        angular
        .module("BC.directives")
        .directive("gisColorSetting", ["formulaKeyMap", "errHint", function (a, i) {
            return {
                templateUrl: "/static/partials/chart_color_setting.html",
                scope: !0,
                link: function (r, n, o) {
                    r.dropField = function (e, a) {
                        return "graph" !== r.currentMeta.type && r.currentMeta.y.length > 1 ? (i("当前设置不支持拖动字段设置颜色"), !1) : "date" == r.dragField.data_type ? void i("不能对日期进行颜色设置") : 1 === r.dragField.is_build_aggregated && "string" == r.dragField.data_type ? void i("不能对文本类型的聚合字段进行尺寸设置") : (r.colorSetting = {
                            field: [r.dragField],
                            theme: "default",
                            mode: "number" == r.dragField.data_type ? 1 : 0,
                            aggregator: "number" == r.dragField.data_type && 1 !== r.dragField.is_build_aggregated ? "SUM" : ""
                        }, r.init(r.colorSetting), r.showSeriesColor ? i("当前设置不支持拖动字段设置颜色") : r.showColorSettingModalByField(), void(t = r.colorSetting))
                    }, 
                    r.$on("onDropToColor", function (e, t) {
                        r.onDrop(t.originEvent, t.ui)
                    }), 
                    r.isGisColorSetting = !0, r.formulaKeyMap = a, r.startDrag = function () {
                        angular.element(".chart-left-side,.gis-main").css({
                            overflow: "visible"
                        })
                    }, 
                    r.removePosition = function () {
                        angular.element(".color-setting-layer").css({
                            overflow: "visible"
                        })
                    }, 
                    r.stop = function (e, t) {
                        var a = t.item.sortable.model;
                        if ("del" == sortOption.currentAction) return r.removeField(sortOption.originAxis, a), !1;
                        r.saveChart()
                    }, 
                    r.del = function (t, a) {
                        angular.element(".color-setting-layer,.chart-left-side,.gis-main").css({
                            overflow: ""
                        });
                        var i = a.helper.position(),
                            n = $(".color-setting"),
                            o = {
                                width: n.width(),
                                height: n.height()
                            },
                            l = {
                                width: a.helper.width(),
                                height: a.helper.height()
                            };
                        if (e({
                                x1: 0,
                                y1: 0,
                                x2: o.width,
                                y2: o.height
                            }, {
                                x1: i.left,
                                y1: i.top,
                                x2: l.width + i.left,
                                y2: l.height + i.top
                            })) return void a.helper.css({
                            left: 0,
                            top: 0
                        });
                        delete r.colorSetting, delete r.currentMeta.color_setting, r.saveChartImmediate(), t.stopPropagation()
                    }, 
                    r.clickPanel = function () {
                        r.showColorSettingModalByField()
                    }
                },
                controller: ["$scope", "$rootScope", "ngDialog", "commonService", "chartColorTheme", "$q", function (e, a, i, r, n, o) {
                    function l(t, a) {
                        e.currentMeta = t, t && ("graph" === t.type || t.y.length < 2 ? (e.colorSetting = angular.copy(t.color_setting), e.colorSettingDisabled = !1) : (delete e.currentMeta.color_setting, delete e.seriesColors, e.colorSettingDisabled = !0), s(e.colorSetting))
                    }

                    function s(t) {
                        if ("graph" !== e.currentMeta.type ? e.showSeriesColor = !1 : e.showSeriesColor = !0, !t || e.showSeriesColor) return !1;
                        if (1 != t.mode) e.colors = n[t.theme], c(t);
                        else {
                            for (var a = 0, i = e.rangeColorTheme.length; a < i; a++)
                                if (e.rangeColorTheme[a].name == t.theme) {
                                    e.rangeThemeSelector.theme = e.rangeColorTheme[a];
                                    break
                                }
                            d(t.theme), e.colorSetting.range_color.inverse = t.range_color.inverse, e.viewData.enable_step = !!t.range_color.step, e.viewData.step = t.range_color.step || 5, e.viewData.disable_max = !defined(t.range_color.disable_max) || t.range_color.disable_max, e.viewData.disable_min = !defined(t.range_color.disable_min) || t.range_color.disable_min, e.viewData.max = t.range_color.max, e.viewData.min = t.range_color.min
                        }
                        return !0
                    }

                    function d(t) {
                        if ("custom" != t) {
                            e.colorSetting.range_color = e.colorSetting.range_color || {};
                            var a = bdpChart.rangeColors[t],
                                i = e.colorSetting.range_color.inverse;
                            e.colorSetting.range_color.start_color = i ? a[1] : a[0], e.colorSetting.range_color.end_color = i ? a[0] : a[1]
                        }
                    }

                    function c(t) {
                        for (var a = 0, i = e.colorTheme.length; a < i; a++)
                            if (e.colorTheme[a].name == t.theme) {
                                e.themeSelector.theme = e.colorTheme[a];
                                break
                            }
                        e.colors = n[t.theme]
                    }

                    function u(t, a, i) {
                        return r.field.getFilteredRange(e.chartId, a, t, i).then(function (e) {
                            var t = e;
                            return 0 == t.status ? t.result : null
                        })
                    }

                    function f(t) {
                        var a = {
                                showNameObj: t,
                                dataObj: angular.copy(t)
                            },
                            i = [].concat(e.currentMeta.y, e.currentMeta.y_optional || []);
                        i.length > 1 && (a.showNameObj.fields = [], a.dataObj.fields = [], i.forEach(function (e) {
                            e && (a.showNameObj.fields.push(e.nick_name || e.name), a.dataObj.fields.push(e.uniq_id))
                        }));
                        var r = function (e, t) {
                                if (!e.length) return [
                                    []
                                ];
                                var a, i = r(e.slice(1)),
                                    n = [];
                                return e[0].forEach(function (e) {
                                    i.forEach(function (i) {
                                        a = [e].concat(i), t && (a = a.join(t)), n.push(a)
                                    })
                                }), n
                            },
                            n = function (e) {
                                return Object.keys(e)
                            },
                            o = n(a.showNameObj).map(function (e) {
                                return a.showNameObj[e]
                            }),
                            l = n(a.dataObj).map(function (e) {
                                return a.dataObj[e]
                            });
                        return {
                            showArr: r(o, "_"),
                            dataArr: r(l, "_")
                        }
                    }

                    function p(t, a) {
                        if (e.colorSetting && void 0 !== e.colorSetting.mode && e.colors) {
                            var i = {};
                            angular.forEach(e.colorSetting.field, function (e) {
                                t[e.fid] && (i[e.fid] = t[e.fid])
                            }), e.originColorValues = angular.copy(t);
                            var r = {};
                            !a && e.colorSetting.enum_color_map || (e.colorSetting.enum_color_map = {});
                            var n = f(i);
                            n.dataArr.forEach(function (t, a) {
                                void 0 == r[t] && (r[t] = e.colorSetting.enum_color_map[t] || void 0, r[t] ? r[t].name = n.showArr[a] : r[t] = {
                                    color: e.colors[a % e.colors.length],
                                    name: n.showArr[a]
                                })
                            }), e.colorSetting.enum_color_map = r, e.colorItemsOrder = n.dataArr.slice()
                        }
                    }
                    var g = a.language;
                    e.$watch("chart_ops.meta.layers[currentLayerIndex]", l, !0), 
                    e.colorTheme = [], 
                    e.rangeColorTheme = [];
                    var h = "zh" === g ? {
                            default: "BDP默认 12",
                            contrast: "对比蓝 12",
                            vintage: "葡萄酒 10",
                            blue_sky: "天空蓝 10",
                            green_contrast: "对比绿 10",
                            green_contrast_2: "对比绿 7",
                            green: "绿色 7",
                            gray_blue: "灰蓝 7",
                            purple: "粉紫 5",
                            blue_contrast: "对比蓝 5",
                            gray_red: "灰红 5",
                            gray: "灰色 5"
                        } : {
                            default: "BDP Default 12",
                            contrast: "Contrast Blue 12",
                            vintage: "Vintage 10",
                            blue_sky: "Sky Blue 10",
                            green_contrast: "Contrast Green 10",
                            green_contrast_2: "Contrast Green 7",
                            green: "Green 7",
                            gray_blue: "Gray-Blue 7",
                            purple: "Purple 5",
                            blue_contrast: "Contrast Blue 5",
                            gray_red: "Gray-Red 5",
                            gray: "Gray 5"
                        },
                        m = "zh" === g ? {
                            default: "默认",
                            golden: "渐变金",
                            green: "渐变绿",
                            blue: "渐变蓝",
                            purple: "渐变紫",
                            gray: "渐变灰"
                        } : {
                            default: "Default",
                            golden: "Gradient Gold",
                            green: "Gradient Green",
                            blue: "Gradient Blue",
                            purple: "Gradient Purple",
                            gray: "Gradient Gray"
                        };
                    angular.forEach(n, function (t, a) {
                        e.colorTheme.push({
                            name: a,
                            alias: h[a]
                        })
                    }), 
                    angular.forEach(bdpChart.rangeColors, function (t, a) {
                        e.rangeColorTheme.push({
                            name: a,
                            alias: m[a]
                        })
                    }), 
                    e.rangeColorTheme.push({
                        name: "custom",
                        alias: "自定义"
                    }), 
                    e.themeSelector = {
                        open: !1,
                        theme: e.colorTheme[0]
                    }, 
                    e.changeTheme = function (t) {
                        t != e.themeSelector.theme && (e.themeSelector.theme = t, e.themeSelector.open = !1, e.colors = n[t.name])
                    }, 
                    e.changeAggr = function () {
                        var t = e.colorSetting.aggregator ? 1 : 0;
                        if (t != e.colorSetting.mode ? (e.colorSetting.mode = t, e.colorSetting.theme = "default", e.init(e.colorSetting)) : (e.colorSetting.theme = e.color_setting ? e.color_setting.theme : "default", e.init(e.colorSetting)), 0 == e.colorSetting.mode) {
                            var a = e.chart_ops.meta.layers[e.currentLayerIndex] ? e.chart_ops.meta.layers[e.currentLayerIndex] : null;
                            a && a.tb_id && e.getFieldValues(e.colorSetting.field, a.tb_id, e.currentLayerIndex).then(function (t) {
                                t.total > 100 ? e.viewData.showTips = !0 : (e.viewData.showTips = !1, e.buildEnumColorMap(t.result))
                            })
                        }
                    }, 
                    e.colorPickerOptions = {
                        preferredFormat: "hex",
                        showInput: "true",
                        cancelText: "en" === g ? "Cancel" : "取消",
                        chooseText: "en" === g ? "Ok" : "确定"
                    }, 
                    e.rangeThemeSelector = {
                        open: !1,
                        theme: e.rangeColorTheme[0]
                    }, 
                    e.changeRangeTheme = function (t) {
                        t != e.themeSelector.theme && (e.rangeThemeSelector.theme = t, e.rangeThemeSelector.open = !1, e.colorSetting.theme = t.name, d(t.name))
                    }, 
                    e.changeRangeColor = function () {
                        e.changeRangeTheme(e.rangeColorTheme[e.rangeColorTheme.length - 1])
                    }, 
                    e.reset = function () {
                        delete e.colorSetting
                    }, 
                    e.viewData = {}, 
                    e.init = s, 
                    e.canRemove = function () {
                        return !0
                    }, 
                    e.updateMeta = function () {
                        var a = e.colorSetting ? angular.copy(e.colorSetting) : t,
                            i = e.$eval("chart_ops.meta.layers[currentLayerIndex]");
                        if (1 == a.mode) {
                            if (delete a.enum_color_map, !e.handleMaxMin(a.range_color)) return !1
                        } else delete a.range_color;
                        return i.color_setting = a, !0
                    }, 
                    e.handleMaxMin = function (t) {
                        var a = !e.viewData.disabled_max && defined(e.viewData.max),
                            i = !e.viewData.disabled_min && defined(e.viewData.min);
                        return a && i && e.viewData.min > e.viewData.max ? (alert("值域最小值不能大于最大值"), !1) : (t.disable_max = !!e.viewData.disable_max, t.disable_min = !!e.viewData.disable_min, defined(e.viewData.max) && (t.max = e.viewData.max), defined(e.viewData.min) && (t.min = e.viewData.min), !0)
                    }, 
                    e.getFieldValues = u, e.buildEnumColorMap = p, e.$on("chartFilterChange", function (t, a) {
                        if (e.colorSetting && 0 == e.colorSetting.mode) {
                            var i = e.chart_ops.meta.layers[e.currentLayerIndex] ? e.chart_ops.meta.layers[e.currentLayerIndex].tb_id : "";
                            e.getFieldValues(e.colorSetting.field, i, e.currentLayerIndex).then(function (t) {
                                t.total <= 100 && e.buildEnumColorMap(t.result), e.updateMeta(), e.saveChartImmediate(a.saveChartOpts)
                            })
                        } else e.saveChartImmediate(a.saveChartOpts)
                    }), 
                    e.showColorSettingModalByField = function () {
                        e.colorSetting && (e.preCloseDialog = !1, e.preCloseDialogSure = !1, i.open({
                            className: "ngdialog-theme-default ngdialog-color-setting",
                            templateUrl: "/static/partials/dialogTemplates/color_setting_modal.html",
                            scope: e,
                            controller: "gisColorSettingByFieldCtrl",
                            preCloseCallback: function () {
                                if (e.themeSelector.open = !1, e.rangeColorTheme.open = !1, e.preCloseDialog) return !(!e.preCloseDialogSure && !angular.equals(e.currentMeta.color_setting, e.colorSetting)) || !!confirm("你有修改尚未保存，是否关闭？") && (e.colorSetting = angular.copy(e.currentMeta.color_setting), e.init(e.colorSetting), !0)
                            }
                        }))
                    }, 
                    e.showColorSettingModalByItem = function () {
                        i.open({
                            className: "ngdialog-theme-default ngdialog-color-setting",
                            templateUrl: "/static/partials/dialogTemplates/series_color_modal.html",
                            data: {
                                colorSetting: e.colorSetting
                            },
                            scope: e,
                            controller: "gisColorSettingByItemCtrl"
                        })
                    }
                }]
            }
        }])
        .controller("gisColorSettingByFieldCtrl", ["$scope", "$getCustomFormula", "chartColorTheme", "commonService", function (e, t, a, i) {
            var r = e.chart_ops.meta.layers[e.currentLayerIndex] ? e.chart_ops.meta.layers[e.currentLayerIndex] : null;
            e.showFormulaList = function () {
                return 1 == e.colorSetting.field.length && 1 != e.colorSetting.field[0].is_build_aggregated && ["C360", "C230", "C320", "C340"].indexOf(e.currentMeta.chart_type) < 0
            }, 
            0 == e.colorSetting.mode && r && r.tb_id && e.getFieldValues(e.colorSetting.field, r.tb_id, e.currentLayerIndex).then(function (t) {
                t.total > 100 ? e.viewData.showTips = !0 : (e.viewData.showTips = !1, e.buildEnumColorMap(t.result))
            }), 
            "number" == e.colorSetting.field[0].data_type ? e.formulaList = t(["SUM", "AVERAGE", "MAX", "MIN", "COUNT", "COUNT_DISTINCT"]) : e.formulaList = t(["COUNT", "COUNT_DISTINCT"]), 
            e.selected = {
                value: "",
                key: "",
                color: ""
            }, 
            e.applyTheme = function (t) {
                e.colorSetting.theme = t.name, e.buildEnumColorMap(e.originColorValues, !0)
            }, 
            e.selectColor = function (t) {
                angular.forEach(e.selectedColorKeys, function (a) {
                    var i = e.colorItemsOrder[a];
                    i && (e.colorSetting.enum_color_map[i].color = e.colors[t], e.selected.color = e.colors[t])
                })
            }, 
            e.onColorChange = function (t) {
                angular.forEach(e.selectedColorKeys, function (a) {
                    var i = e.colorItemsOrder[a];
                    i && (e.colorSetting.enum_color_map[i].color = t)
                })
            }, 
            e.toggleStep = function (t) {
                t ? e.colorSetting.range_color.step = e.viewData.step : e.colorSetting.range_color && (e.colorSetting.range_color.step = 0)
            }, 
            e.setStep = function (t) {
                t && (e.colorSetting.range_color.step = t)
            }, 
            e.selectedColorKeys = [], 
            e.selectItem = function (t, a, i) {
                var r = e.colorSetting.enum_color_map[a];
                if (t.metaKey || t.ctrlKey) e.selectedColorKeys.push(i);
                else if (t.shiftKey)
                    if (0 == e.selectedColorKeys.length) e.selectedColorKeys = [i];
                    else {
                        var n = e.selectedColorKeys[0];
                        e.selectedColorKeys.length = 1;
                        for (var o = i > n ? -1 : 1, l = i; l != n;) e.selectedColorKeys.push(l), l += o
                    }
                else e.selected.color = r.color, e.viewData.selectedColor = r.color, e.selectedColorKeys = [i]
            }, 
            e.isHighlight = function (t) {
                return e.selectedColorKeys.indexOf(t) > -1
            }, 
            e.inverseRangeColor = function () {
                var t = e.colorSetting.range_color,
                    a = t.start_color;
                t.start_color = t.end_color, t.end_color = a
            }, 
            e.saveByField = function () {
                var t = e.colorSetting.field[0];
                if (1 === t.is_build_aggregated && "number" == t.data_type)
                    for (var a = e.currentMeta, i = 0; i < a.y.length; i++) 2 == a.y[i].is_build_aggregated || 0 == a.y[i].is_build_aggregated ? "number" === a.y[i].data_type ? a.y[i].aggregator = "SUM" : a.y[i].aggregator = "COUNT" : 1 == a.y[i].is_build_aggregated && (a.y[i].aggregator = "");
                e.viewData.showTips && 0 == e.colorSetting.mode || e.updateMeta() && (e.saveChartImmediate(), e.closeThisDialog()), e.themeSelector.open = !1, e.rangeColorTheme.open = !1
            }, 
            e.cancelByField = function () {
                e.$parent.preCloseDialog = !0, e.$parent.preCloseDialogSure = !1, e.closeThisDialog()
            }
        }])
        .controller("gisColorSettingByItemCtrl", ["$scope", "chartColorTheme", function (e, t) {
            e.series = angular.copy(e.seriesColors), 
            e.series_theme = e.currentMeta.series_theme || "default", 
            e.chartColorTheme = t, 
            e.highlightIndex = 0, 
            e.applyTheme = function (a) {
                var i = a.name,
                    r = t[i].length;
                angular.forEach(e.series, function (e, a) {
                    var n = a % r;
                    e.color = t[i][n]
                }), e.series_theme = a.name, e.viewData.selectedColor = e.series[e.highlightIndex].color
            }, 
            e.selectItem = function (t) {
                e.highlightIndex = t, e.viewData.selectedColor = e.series[t].color
            }, 
            e.isHighlight = function (t) {
                return e.highlightIndex == t
            }, 
            e.selectColor = function (a) {
                if (void 0 != e.highlightIndex) {
                    var i = t[e.themeSelector.theme.name];
                    e.series[e.highlightIndex].color = i[a], e.viewData.selectedColor = i[a]
                }
            }, 
            e.onColorChange = function (t) {
                void 0 != e.highlightIndex && (e.series[e.highlightIndex].color = t)
            }, 
            e.init(), 
            e.saveByItem = function () {
                var t = e.isGisColorSetting ? e.currentMeta : e.chart_ops.meta.level[e.drill_level];
                if ("C320" === t.chart_type) t.waterfall_setting.color_theme = [], angular.forEach(e.series, function (e, a) {
                    t.waterfall_setting.color_theme.push(e.color)
                }), t.series_theme = e.series_theme;
                else if ("C330" === t.chart_type) t.funnel_setting.color_theme = [], angular.forEach(e.series, function (e, a) {
                    t.funnel_setting.color_theme.push(e.color)
                }), t.series_theme = e.series_theme;
                else if (e.isGisColorSetting) {
                    var a = t.y;
                    angular.forEach(a, function (t, a) {
                        t.series_color = e.series[a].color
                    }), t.series_theme = e.series_theme
                } else {
                    var a = t.y.concat(t.y_optional || []);
                    angular.forEach(a, function (t, a) {
                        for (var i = 0; i < e.series.length; i++) t.uniq_id === e.series[i].uniq_id && (t.series_color = e.series[i].color)
                    }), t.series_theme = e.series_theme
                }
                e.saveChartImmediate(), e.closeThisDialog()
            }, 
            e.cancelByItem = function () {
                e.closeThisDialog()
            }
        }])
    }(),
    function () {
        function e(e) {
            return {
                scope: !0,
                link: function (t, a, i) {
                    a.hover(function (e) {
                        var t = a.find(".chart-info-summary"),
                            i = $(".J-scroll-project").width(),
                            r = e.clientX,
                            n = "-25px";
                        a.parents(".chart-edit-layer").length > 0 && (n = "-8px"), r - i < 200 ? t.css({
                            right: "-200px"
                        }) : t.css({
                            right: n
                        })
                    }), 
                    t.$on("chart_data_load", function (a, i) {
                        var r = bdpChart.language || "zh",
                            n = i.info;
                        i.data;
                        if (e(function () {
                                "C500" == i.getChartType() ? t.tb_update_time = 1e3 * (Math.max.apply(null, i.views.map(function (e) {
                                    return e.info.tb_update_time
                                })) || n.update_time) : t.tb_update_time = 1e3 * n.tb_update_time
                            }), 
                            t.width = 50, 
                            n.xAxis && (t.xAxis = n.xAxis), n.yAxis) {
                            var o = n.yAxis.concat(n.yAxisOptional || []);
                            if (o.forEach(function (e) {
                                    e.row_setting && !$.isEmptyObject(e.row_setting) && o.push(angular.copy(e.row_setting))
                                }), n.tb_statistic && angular.isObject(n.tb_statistic.row_setting) && n.tb_statistic.row) {
                                var l = n.tb_statistic.row_setting;
                                l.name = l.nick_name || ("zh" == r ? "行总计" : "Row Summary"), o.splice(l.pos, 0, l)
                            }
                            t.yAxis = o, 
                            angular.forEach(o, function (e) {
                                var a = hz.cutString.getP(e.nick_name || e.name);
                                a > t.width && (t.width = a)
                            })
                        }
                        t.width = Math.min(t.width, 96)
                    })
                }
            }
        }
        angular
        .module("BC.directives")
        .directive("chartInfoSummary", e), 
        e.$inject = ["$timeout"]
    }(), 
    angular
    .module("BC.directives")
    .directive("tableConditionalFormatting", ["ngDialog", "formulaKeyMap", "AdvfilterOperatorList", "setAdvanceAggregatorName", function (e, t, a, i) {
        return {
            scope: !0,
            templateUrl: "/static/js/chart-config/tpl/chart-table-condition-formatting.html",
            replace: !0,
            link: function (t, i, r) {
                function n(e, t) {
                    if (!e) return [];
                    var a = [];
                    switch (e) {
                        case "C200":
                            a = o(t);
                            break;
                        case "C261":
                            a = l(t);
                            break;
                        case "C310":
                            a = s(t);
                            break;
                        default:
                            a = []
                    }
                    return a
                }

                function o(e) {
                    var a = [];
                    return angular.forEach(e, function (e) {
                        var i = c(e),
                            r = angular.extend({}, e);
                        if (u(r), i) {
                            if (r.y = i, i.nick_name) r.alias = i.nick_name;
                            else {
                                var n = t.setAdvanceAggregatorName(i);
                                r.alias = n ? i.name + n : i.name
                            }
                            a.push(r)
                        }
                    }), a
                }

                function l(e) {
                    var t = [];
                    return angular.forEach(e, function (e) {
                        var a = angular.extend({}, e);
                        u(a), a.alias = "完成率", t.push(a)
                    }), t
                }

                function s(e) {
                    return o(e)
                }

                function d(e) {
                    var a = [];
                    return angular.isArray(e) ? a = n(t.currentMeta.chart_type, e) : a
                }

                function c(e) {
                    if (!t.currentMeta || !t.currentMeta.y) return !1;
                    for (var a = t.currentMeta.y.concat(t.currentMeta.y_optional || []), i = 0, r = a.length; i < r; i++) {
                        var n = a[i];
                        if (e.fid == n.fid && e.uniq_id == n.uniq_id) return n
                    }
                }

                function u(e) {
                    12 == e.operator ? e.range = e.value : e.range = []
                }
                t.$watch("chart_ops.meta.level[drill_level]", function (e) {
                    t.currentMeta = e
                }), 
                t.$watchCollection("currentMeta.tb_conditional_formatting", function (e) {
                    var a = angular.copy(e);
                    angular.forEach(a, function (e, t) {
                        $.isArray(e.value) ? angular.forEach(e.value, function (t, a) {
                            e.isPercentage && e.isPercentage[a] && t && t.toString().indexOf("%") == -1 ? e.value[a] = 10 * t * 10 + "%" : e.value[a] = 1 * t
                        }) : e.isPercentage && e.isPercentage[0] && e.value.toString().indexOf("%") == -1 ? e.value = 10 * e.value * 10 + "%" : e.value = 1 * e.value
                    }), t.$view = d(a)
                }), 
                t.$on("broadcastChangeTableFormattingName", function (e, a) {
                    t.$view = d(t.currentMeta.tb_conditional_formatting)
                }), 
                t.operatorMap = a, 
                t.showDialog = function () {
                    var a = "",
                        i = t.currentMeta.chart_type;
                    "C261" == i ? a = "gauge-formatting-modal" : "C310" == i && (a = "kpi-formatting-modal"), e.open({
                        templateUrl: "/static/partials/dialogTemplates/table_conditional_formatting.html",
                        className: "ngdialog-theme-default table-formatting-modal " + a,
                        scope: t,
                        controller: "tableConditionalFormattingSetting"
                    })
                }
            }
        }
    }])
    .controller("tableConditionalFormattingSetting", ["$scope", "formulaKeyMap", "setAdvanceAggregatorName", "AdvfilterOperatorNumberMap", "operatorHelpLink", "errHint", function (e, t, a, i, r, n) {
        function o(e) {
            return 1 * e
        }

        function l(e) {
            return e.indexOf("%") > -1 ? e.match(/(\d+)%$/)[1] / 100 : e
        }

        function s(t) {
            var a = {
                    1: {
                        C200: {
                            backgroundColor: "#303349",
                            color: "#fff"
                        },
                        C261: {
                            backgroundColor: "#9ACC67"
                        },
                        C310: {
                            color: "#E45151"
                        }
                    },
                    2: {
                        C200: {
                            backgroundColor: "#fff",
                            color: "#333"
                        },
                        C261: {
                            backgroundColor: "#9ACC67"
                        },
                        C310: {
                            color: "#E45151"
                        }
                    }
                },
                i = {
                    range: [],
                    style: a[usedThemeId][t]
                };
            return "C310" === t ? i.shape_type = "arrow-up" : "C261" === t && (i.fid = e.yAxis[0].fid, i.uniq_id = e.yAxis[0].uniq_id), i
        }

        function d(t) {
            for (var a = 0, i = e.yAxis.length; a < i; a++)
                if (e.yAxis[a].uniq_id == t) return e.yAxis[a].fid;
            return null
        }
        e.conditions = angular.copy(e.$view), 
        e.operatorList = i, 
        e.yAxis = [], 
        e.displayText = ["C200", "C310"].indexOf(e.currentMeta.chart_type) > -1 ? "Aa" : "";
        var c = e.currentMeta.y.concat(e.currentMeta.y_optional || []);
        angular.forEach(c, function (t) {
            var a = angular.copy(t);
            if (t.nick_name) a.alias = t.nick_name;
            else {
                var i = e.setAdvanceAggregatorName(t);
                a.alias = i ? t.name + i : t.name
            }
            e.yAxis.push(a)
        }), 
        e.tbConditionSort = {
            handle: ".ico-order"
        }, 
        e.useDefaultBg = function (e) {
            var t = {
                1: "#303349",
                2: "#fff"
            };
            e.useDefaultBg ? e.style.backgroundColor = "transparent" : e.style.backgroundColor = t[usedThemeId]
        }, 
        e.save = function () {
            var t = [],
                a = e.currentMeta.chart_type,
                i = function (e, t, a) {
                    return t.toString().indexOf("%") > -1 ? (e.isPercentage[a] = !0, t = l(t)) : (t = o(t), e.isPercentage[a] = !1), t
                };
            if ("C200" === a || "C310" === a)
                for (var r = 0; r < e.conditions.length; r++) {
                    var s = e.conditions[r];
                    if (12 == s.operator && (s.value = s.range), !s.uniq_id || void 0 == s.operator || $.isEmptyObject(s.value)) return n("请填写完整的条件信息"), !1
                } else if ("C261" === a)
                    for (var r = 0; r < e.conditions.length; r++) {
                        var s = e.conditions[r];
                        if (12 == s.operator && (s.value = s.range), void 0 == s.operator || $.isEmptyObject(s.value)) return n("请填写完整的条件信息"), !1
                    }
            angular.forEach(e.conditions, function (r) {
                r.isPercentage = r.isPercentage || [], $.isArray(r.value) ? angular.forEach(r.value, function (e, t) {
                    r.value[t] = i(r, e, t)
                }) : r.value = i(r, r.value, 0);
                var n = {
                    fid: d(r.uniq_id),
                    uniq_id: r.uniq_id,
                    operator: r.operator,
                    value: r.value,
                    style: r.style,
                    isPercentage: r.isPercentage,
                    useDefaultBg: !!r.useDefaultBg
                };
                "C310" === a && (n.shape_type = r.shape_type), e.currentMeta.y.forEach(function (e) {
                    n.uniq_id === e.uniq_id && (delete e.series_color, e.BDP_TCF = !1)
                }), t.push(n)
            }), 0 === e.conditions.length && "C310" === a && (e.currentMeta.y[0].series_color || (e.currentMeta.y[0].series_color = "#a3abb0"), e.currentMeta.y[1] && !e.currentMeta.y[1].series_color && (e.currentMeta.y[1].series_color = "#a3abb0")), e.currentMeta.tb_conditional_formatting = t, e.saveChartImmediate(), e.closeThisDialog()
        }, 
        e.changeOperator = function (e) {
            if (e) {
                var t = $(e.target).nextSibling().find("input");
                0 == t.length && t.focus().select()
            }
        }, 
        e.add = function () {
            e.conditions.push(s(e.currentMeta.chart_type))
        }, 
        e.remove = function (t) {
            e.conditions.splice(t, 1)
        }, 
        e.clearNoNum = function (e, t, a) {
            function i(e) {
                return e ? (e = e.toString(), e = e.replace(/[^\d\.%-]/g, ""), e = e.replace(/^[\.|%]/g, ""), e = e.replace(".", "$#$").replace(/\./g, "").replace("$#$", "."), e = e.replace("%", "$#$").replace(/%/g, "").replace("$#$", "%")) : ""
            }
            angular.isNumber(a) ? e[t][a] = i(e[t][a]) : e[t] = i(e[t])
        }, 
        e.setAdvanceAggregatorName = a, 
        e.goHelp = function (e) {
            r(e)
        }, 
        e.init = function (t) {
            e.matching = t.getAttribute("style")
        }, 
        e.tableColor = {
            C200: [{
                style: {
                    backgroundColor: "#FDE4E4",
                    color: "#EE4B4B"
                }
            }, {
                style: {
                    backgroundColor: "#E3F2EB",
                    color: "#40A276"
                }
            }, {
                style: {
                    backgroundColor: "#FFF6E7",
                    color: "#FF9800"
                }
            }, {
                style: {
                    backgroundColor: "#EBF5FC",
                    color: "#7ABCE9"
                }
            }, {
                style: {
                    backgroundColor: "#EE4B4B",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#40A276",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#FFC063",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#72AFD9",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#984337",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#A999C9",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#898E94",
                    color: "#FFFFFF"
                }
            }, {
                style: {
                    backgroundColor: "#D8D9DA",
                    color: "#FFFFFF"
                }
            }],
            C261: [{
                style: {
                    backgroundColor: "#5182E4"
                }
            }, {
                style: {
                    backgroundColor: "#9BCC66"
                }
            }, {
                style: {
                    backgroundColor: "#3FB27E"
                }
            }, {
                style: {
                    backgroundColor: "#F7CB4A"
                }
            }, {
                style: {
                    backgroundColor: "#F88D48"
                }
            }, {
                style: {
                    backgroundColor: "#F35352"
                }
            }, {
                style: {
                    backgroundColor: "#CE62D6"
                }
            }, {
                style: {
                    backgroundColor: "#8954D4"
                }
            }, {
                style: {
                    backgroundColor: "#5156B8"
                }
            }, {
                style: {
                    backgroundColor: "#51B4F1"
                }
            }, {
                style: {
                    backgroundColor: "#69D4DB"
                }
            }, {
                style: {
                    backgroundColor: "#D42D6B"
                }
            }],
            C310: [{
                shape_type: "arrow-up",
                style: {
                    color: "#EF4B4A"
                }
            }, {
                shape_type: "arrow-down",
                style: {
                    color: "#40A276"
                }
            }, {
                shape_type: "arrow-equal",
                style: {
                    color: "#A3ABB0"
                }
            }, {
                shape_type: "",
                style: {
                    color: "#EF4B4A"
                }
            }, {
                shape_type: "",
                style: {
                    color: "#FD642D"
                }
            }, {
                shape_type: "",
                style: {
                    color: "#EF9D01"
                }
            }, {
                shape_type: "",
                style: {
                    color: "#40B27E"
                }
            }],
            shapes: ["arrow-down", "arrow-up", "arrow-equal", "ok", "remove", "attention"],
            changeTemplate: function (t, a, i, r) {
                t.style = angular.copy(a.style), t.useDefaultBg = !1, void 0 !== a.shape_type && (t.shape_type = a.shape_type), e.selectedIndex = r, e.tableColor.setCustomStyle(a.style, r, !1)
            },
            changeShape: function (e, t) {
                e.shape_type = t
            },
            setCustomStyle: function (t, a, i, r) {
                if (i) {
                    if (this.clickedCondition == a && i) return void(this.clickedCondition = -1);
                    this.clickedCondition = a;
                    var n = e.currentMeta.chart_type,
                        o = angular.element(".dialog-condition-item").eq(a),
                        l = o.find(".tf-bg-color .sp-preview-inner"),
                        s = o.find(".tf-text-color .sp-preview-inner");
                    if (l.css({
                            "background-color": t.backgroundColor
                        }).addClass("color-matching"), s.css({
                            "background-color": t.color
                        }).addClass("color-matching color-border"), r && a >= 0) {
                        var d = angular.element(r.currentTarget),
                            c = d[0].getBoundingClientRect(),
                            u = 310,
                            f = angular.element("body").height(),
                            p = c.bottom + 10;
                        "C200" == n ? u = 310 : "C261" == n ? u = 222 : "C310" == n && (u = 288), this.colorboardStyle = p + u > f ? {
                            top: c.top - u - 10,
                            left: c.left
                        } : {
                            top: c.bottom + 10,
                            left: c.left
                        }
                    }
                }
            }
        }
    }]), 
    angular.module("BC.directives")
    .directive("ngEditable", ["$timeout", function (e) {
        return {
            restrict: "A",
            scope: {
                text: "=editText",
                onCommit: "&"
            },
            template: '<div class="ng-text-wrap" ng-class="{hidden: editting}"><p class="ng-editable nowrap">{{text}}</p><a class="bdp-icon-wrap edit-btn" title="{{\'rename\' | translate}}" ng-click="edit($event)"><i class="bdp-icon ico-text-edit"></i></a></div><div class="ng-edit-wrap" ng-show="editting"><input type="text" class="ng-editable" value="{{text}}"/><a class="bdp-icon-wrap confirm-btn" title="{{\'ok\' | translate}}" ng-click="commit(text, $event)"><i class="bdp-icon ico-ok"></i></a></div>',
            link: function (t, a, i) {
                function r() {
                    o.val().length > 0 && (t.text = o.val(), t.onCommit({
                        text: t.text
                    })), t.editting = !1
                }
                var n = t.text;
                t.edit = function (i) {
                    return t.editting = !0, i.stopPropagation(), o.val(t.text), n = t.text, e(function () {
                        a.find("input").select().focus()
                    }, 0), !1
                };
                var o = a.find("input").on("click", function (e) {
                    e.stopPropagation()
                }).on("blur", function () {
                    e(function () {
                        t.editting = !1
                    }, 500)
                }).on("keypress", function (e) {
                    13 === e.keyCode && (r(), t.$$phase || t.$digest())
                });
                t.commit = function (e, t) {
                    return r(), t.stopPropagation(), !1
                }
            }
        }
    }]),
    function () {
        angular.module("BC.directives")
        .directive("advanceDataFormula", ["$timeout", function (e) {
            return {
                scope: {
                    expressionContent: "=",
                    onBlur: "&",
                    onKeyUp: "&"
                },
                link: function (t, a, i) {
                    function r() {
                        n = CodeMirror.fromTextArea(a[0], {
                            mode: "text/x-bdp-sql",
                            indentWithTabs: !0,
                            smartIndent: !0,
                            lineWrapping: !0,
                            matchBrackets: !0,
                            readOnly: !!o && "nocursor",
                            theme: "paraiso-light",
                            autofocus: !o,
                            extraKeys: {
                                "Ctrl-Space": "autocomplete"
                            }
                        }), e(function () {
                            void 0 != t.expressionContent && n.setValue(t.expressionContent)
                        }, 200), n.on("blur", function () {
                            var e = n.getValue().replace(/0xa0/, "");
                            t.onBlur({
                                content: e
                            })
                        }), n.on("keyup", function () {
                            var e = n.getValue().replace(/0xa0/, "");
                            t.onKeyUp({
                                flag: !0,
                                content: e
                            })
                        })
                    }
                    var n, o = !!i.readonly,
                        l = {
                            funcQueue: [],
                            loadLibInProgress: !1
                        };
                    thirdPluginLoader({
                        initFun: r,
                        libSrc: "https://s1.bdp.cn/static/js/lib/bdpFormula/bdp-codemirror_1fb68f2.js",
                        otherSrc: "",
                        libId: window.CodeMirror && window.CM_bdpFormulaPlugin
                    }, l), t.$on("changeDateExpression", function (e, t) {
                        n && n.setValue(t)
                    }), t.$on("insertFieldNameToExpression", function (e, t) {
                        if (defined(t)) {
                            var a = "[" + t + "]",
                                i = n.getCursor();
                            n.replaceSelection(a), n.setCursor(i.line + 1, i.ch + a.length), n.focus()
                        }
                    })
                }
            }
        }])
    }(), 
    angular
    .module("BC.directives")
    .directive("dateAdvanceEdit", [
        "$rootScope", "errHint", "commonService", "commonHttp", "$stateParams", "$timeout", "$jsTipTranslate", function (e, t, a, i, r, n, o) {
        return {
            restrict: "A",
            templateUrl: "/static/partials/directiveTemplates/date-advance-edit.html",
            link: function (l, s, d) {
                function c(e) {
                    var t = !1;
                    return angular.forEach(m, function (a) {
                        a.name == e && (t = !0)
                    }), t
                }
                var u = e.language || "zh",
                    f = "未命名",
                    p = "日期",
                    g = 0;
                "en" == u && (f = "Untitled", p = "DATE");
                var h = angular.copy(GlobalConstant.defaultAdvDateConfig);
                h.is_global = 2, 
                l.listLoading = !0, 
                l.infoLoading = !1, 
                l.hasNew = !1, 
                l.model = !1, 
                l.tempData = {
                    name: ""
                }, 
                l.dateAdvanceData = {}, 
                l.dateAdvanceView = {}, 
                l.dateAdvanceList = [], 
                l.dateFieldId = [], 
                l.selected_date_opt_id = "";
                var m = l.dateAdvanceList;
                l.$on("showDateAdvanceEdit", function (e, t) {
                    t && (l.selected_date_opt_id = "", l.dateAdvance.getList())
                }), 
                l.dateAdvance = {
                    getList: function () {
                        var e = l.filterView.selected_opt,
                            i = l.filterStatus[e],
                            o = {};
                        angular.forEach(i.tables, function (e, t) {
                            !!e.show && (o[e.tb_id] = e.selected)
                        }), l.dateFieldIds = angular.copy(o), a.dash_global_filter.range({
                            dash_id: r.dashId,
                            rule_id: l.ruleId,
                            df_id: e,
                            selected_tables: angular.toJson(o),
                            granularity: i.config.granularity
                        }).success(function (e) {
                            "0" === e.status ? (l.dateAdvanceList = e.result.range || [], l.dateAdvanceList.length > 0 && n(function () {
                                l.dateAdvance.turnToLastItem()
                            }), l.listLoading = !1) : t(Number(e.status))
                        })
                    },
                    getInfo: function (e, i) {
                        if (l.hasNew) return void t(l.tips["filter.pleaseSaveCurrentFilterItem"]);
                        l.infoLoading = !0, l.selected_date_opt_id = e, l.tempData = h, l.tempData.name = i, a.adv_date.info(e).success(function (e) {
                            "0" == e.status ? (l.tempData = angular.fromJson(e.result), l.dateAdvance.setDefaultData(e.result), l.infoLoading = !1) : t(Number(e.status))
                        }), g = angular.element(s).find(".item-list").get(0).scrollTop
                    },
                    setDefaultData: function (e) {
                        if ("accurate" !== l.tempData.type ? (l.tempData.accurate.start = "", l.tempData.accurate.end = "") : (l.tempData.accurate.start = e.accurate.start, l.tempData.accurate.end = e.accurate.end), l.tempData.fixed.hasOwnProperty("granularity") || (l.tempData.fixed.granularity = "day"), "expression" === l.tempData.type) {
                            var t = new RegExp("\\[_field_id_\\]", "g");
                            l.tempData.expression = l.tempData.expression.replace(t, "[" + p + "]"), n(function () {
                                l.$broadcast("changeDateExpression", l.tempData.expression)
                            }, 50)
                        } else n(function () {
                            l.$broadcast("changeDateExpression", "")
                        }, 50);
                        l.original_is_global = l.tempData.is_global
                    },
                    createItem: function () {
                        if (l.hasNew) return void t(l.tips["filter.pleaseSaveCurrentFilterItem"]);
                        l.tempData = angular.copy(h), l.selected_date_opt_id = "newId", l.model = "create", l.tempData.name = f, $(".date-advance-name > input").focus(), l.dateAdvanceList.push(l.tempData), scrollToBottom(angular.element(s).find(".item-list")), l.hasNew = !0
                    },
                    clickFun: function (e) {
                        e && e.stopPropagation(), l.tempData.name == f && (l.tempData.name = "")
                    },
                    blurFun: function (e) {
                        e && e.stopPropagation(), l.tempData.name || (l.tempData.name = f), l.tempData.name && l.tempData.name != f && c(l.tempData.name) && (t(l.tips["filter.duplicatedNames"]), l.tempData.name = "")
                    },
                    changeTypeFun: function (e) {
                        if (e && e.stopPropagation(), "expression" === l.tempData.type) {
                            var t = new RegExp("\\[_field_id_\\]", "g");
                            l.tempData.expression = l.tempData.expression.replace(t, "[" + p + "]"), n(function () {
                                l.$broadcast("changeDateExpression", l.tempData.expression)
                            }, 50)
                        } else n(function () {
                            l.$broadcast("changeDateExpression", "")
                        }, 50)
                    },
                    fixedGranularityChange: function (e) {
                        e && e.stopPropagation(), "day" == l.tempData.fixed.granularity ? l.tempData.fixed.start = 30 : l.tempData.fixed.start = 1
                    },
                    deleteItem: function (e, i, r) {
                        e && e.stopPropagation();
                        var n = l.filterView.selected_opt;
                        if ("newId" == l.selected_date_opt_id) l.dateAdvanceList.splice(r, 1), l.hasNew = !1, l.dateAdvanceList.length > 0 && l.dateAdvance.getInfo(l.dateAdvanceList[0].opt_id, l.dateAdvanceList[0].name);
                        else {
                            if (!confirm(l.tips["filter.delTip"])) return;
                            i.opt_id == l.selected_date_opt_id && (l.selected_date_opt_id = ""), a.adv_date.global_del(i.opt_id, n).success(function (e) {
                                0 == e.status ? (l.dateAdvance.getList(), t(l.tips.delSuccess)) : t(Number(e.status))
                            })
                        }
                    },
                    modifyItem: function () {
                        if (0 != l.dateAdvanceList.length) {
                            var e = l.selected_date_opt_id || "",
                                i = r.dashId,
                                n = l.tempData.name,
                                o = l.tempData.is_global,
                                s = l.filterView.selected_opt;
                            if (!n) return void t(l.tips["filter.nullTitle"]);
                            if (c(n) && (t(l.tips["filter.duplicatedNames"]), l.tempData.name = ""), (2 !== l.original_is_global || 0 !== o || confirm(l.tips["filter.changeScopeTip2"])) && ("newId" == e && (e = ""), l.dateAdvance.formatData())) {
                                var d = angular.toJson(l.tempData);
                                a.adv_date.global_modify(i, e, s, d).success(function (e) {
                                    0 == e.status ? (l.dateAdvance.getList(), e.result.hasOwnProperty("opt_id") && (l.selected_date_opt_id = e.result.opt_id), l.hasNew = !1, t(l.tips.saveSuccess)) : t(Number(e.status))
                                })
                            }
                        }
                    },
                    formatData: function () {
                        var e = !0,
                            i = l.tempData.type,
                            n = l.tempData.accurate.start,
                            o = l.tempData.accurate.end;
                        if ("fixed" === i) "0" === l.tempData.fixed.start && (t(l.tips["filter.inputPositiveNumber"]), e = !1), isNaturalNumber(l.tempData.fixed.start) && isNaturalNumber(l.tempData.fixed.end.value) || (t(l.tips["chart.plzTypePositionInteger"]), e = !1);
                        else if ("accurate" === i) "string" == typeof n && (n = new Date(n)), "string" == typeof o && (o = new Date(o)), n || o || (t(l.tips["filter.nullData"]), e = !1), n.getTime() - o.getTime() > 0 && (t(l.tips["chart.dateRangeInvalid"]), e = !1);
                        else if ("relative" === i);
                        else if ("expression" === i) {
                            var s = l.selected_date_opt_id || "",
                                d = r.dashId,
                                c = l.dateAdvance.checkFormulaGrammar(),
                                u = l.filterView.selected_opt;
                            c && c.then(function (i) {
                                if (i) {
                                    l.tempData.accurate.start = Highcharts.dateFormat("%Y-%m-%d", n), l.tempData.accurate.end = Highcharts.dateFormat("%Y-%m-%d", o);
                                    var r = angular.toJson(l.tempData);
                                    a.adv_date.global_modify(d, s, u, r).success(function (e) {
                                        0 == e.status ? (l.dateAdvance.getList(), e.result.hasOwnProperty("opt_id") && (l.selected_date_opt_id = e.result.opt_id), l.hasNew = !1, t(l.tips.saveSuccess)) : t(Number(e.status))
                                    }), e = !1
                                } else t(l.tips["filter.checkFailed"]), l.checkFormulaGrammarFlag = !1, e = !1;
                                return e
                            }), e = !1
                        }
                        return l.tempData.accurate.start = Highcharts.dateFormat("%Y-%m-%d", n), l.tempData.accurate.end = Highcharts.dateFormat("%Y-%m-%d", o), e
                    },
                    setExpression: function (e) {
                        l.tempData.expression = e
                    },
                    expressionChanged: function (e) {
                        l.expressionChangedFlag = e
                    },
                    insertFieldNameToExpression: function () {
                        l.expressionChangedFlag = !0, l.$broadcast("insertFieldNameToExpression", p)
                    },
                    checkFormulaGrammar: function () {
                        var e = l.tempData.expression;
                        if ("" == e) return void t(l.tips["filter.pleaseInputExpression"]);
                        var a = p,
                            n = new RegExp("\\[" + a + "\\]", "g");
                        l.tempData.expression = e.replace(n, "[_field_id_]");
                        var o = [],
                            s = [];
                        angular.forEach(l.dateFieldIds, function (e, t) {
                            o.push(t), s.push(e)
                        });
                        var d = {
                            dash_id: r.dashId,
                            tb_id: angular.toJson(o),
                            fid: angular.toJson(s),
                            expression: l.tempData.expression
                        };
                        return l.expressionChangedFlag = !1, i.post("/api/expression/syntax_verify", d).then(function (e) {
                            return 0 == e.status ? (t(l.tips["filter.checkSuccess"]), l.checkFormulaGrammarFlag = !0, !0) : (t(l.tips["filter.checkFailed"]), l.checkFormulaGrammarFlag = !1, !1)
                        })
                    },
                    turnToLastItem: function () {
                        var e = "",
                            t = "";
                        !l.selected_date_opt_id && l.dateAdvanceList.length > 0 ? (l.selected_date_opt_id = l.dateAdvanceList[0].opt_id, e = l.selected_date_opt_id, t = l.dateAdvanceList[0].name) : (angular.forEach(l.dateAdvanceList, function (a) {
                            a.opt_id == l.selected_date_opt_id && (e = l.selected_date_opt_id, t = a.name)
                        }), scrollToBottom(angular.element(s).find(".item-list"), g)), l.dateAdvance.getInfo(e, t)
                    }
                }, 
                l.returnGlobalFilter = function () {
                    l.showDateAdvanceEdit = !1, 
                    l.hasNew = !1, 
                    $(".ngdialog-close").css("display", "inline-block"), 
                    l.$emit("hideDateAdvanceEdit", !0)
                }, 
                o(["saveSuccess", "fail", "delSuccess", "filter.pleaseSaveCurrentFilterItem", "filter.checkSuccess", "filter.checkFailed", "filter.pleaseInputExpression", "filter.nullData", "chart.dateRangeInvalid", "filter.inputPositiveNumber", "chart.plzTypePositionInteger", "filter.changeScopeTip2", "filter.nullTitle", "filter.duplicatedNames", "filter.delTip"], l)
            }
        }
    }]),
    function () {
        angular
        .module("BC.directives")
        .directive("chart_warning", [
            "commonHttp", 
            "formulaKeyMap", 
            "warnOperatorMap", "ngDialog", "errHint", "$stateParams", "setAdvanceAggregatorName", "$translate", "$jsTipTranslate", function (e, t, a, i, r, n, o, l, s) {
            return {
                restrict: "A",
                templateUrl: "/static/js/chart-config/tpl/chart-warning-list.html",
                replace: !1,
                link: function (e, t, a) {
                    e.warns = [], 
                    e.warnItemIDFlag = 0, 
                    e.y_warns = e.$parent.y_warns || [], 
                    e.y_optional_warns = e.$parent.y_optional_warns || [], 
                    e.$on("chart_data_warn", function (t, a) {
                        e.$parent.y_warns = e.y_warns = [], 
                        e.$parent.y_optional_warns = e.y_optional_warns = [];
                        var i = {};
                        angular.forEach(a, function (t, a) {
                            e.warnItemIDFlag++, i = {
                                id: "warn_item_id_" + e.warnItemIDFlag,
                                warn_id: t.warn_id,
                                warn_name: t.warn_name,
                                warn_time: t.warn_time,
                                meta: t.meta,
                                axis_type: t.axis_type,
                                type: t.type,
                                switch: t.switch
                            }, 0 == t.axis_type && e.y_warns.push(i), 1 == t.axis_type && e.y_optional_warns.push(i)
                        }), e.$$phase || e.$apply()
                    }), 
                    e.$watch("global.watch", function (t) {
                        e.getYaxisFields()
                    }), 
                    e.getYaxisFields = function () {
                        if (e.chart_ops) {
                            var t, a = [],
                                i = e.chart_ops.meta.level[e.drill_level][e.axis_type];
                            angular.forEach(i, function (i) {
                                if ("row_summary" != i.fid)
                                    if (i.nick_name) t = i.nick_name, a.push({
                                        name: t,
                                        fid: i.fid,
                                        uniq_id: i.uniq_id
                                    });
                                    else {
                                        t = i.name;
                                        var r = e.setAdvanceAggregatorName(i);
                                        r ? a.push({
                                            name: t + r,
                                            fid: i.fid,
                                            uniq_id: i.uniq_id
                                        }) : a.push({
                                            name: t,
                                            fid: i.fid,
                                            uniq_id: i.uniq_id
                                        })
                                    }
                            }), "y" == e.axis_type ? e.field_list_y = a : e.field_list_y_optional = a
                        }
                    }, 
                    e.showSetWarningDialog = function (t) {
                        if (e.axis_type = t, e.getYaxisFields(), !e.chart_ops.meta.level[e.drill_level][t].length) return void r(e.tips["chart.notAllowSetWarn"]);
                        "y" == e.axis_type ? i.open({
                            template: "/static/partials/chart-warning-config.html",
                            className: "ngdialog-theme-default ngDialog-width-600 set-warning-dialog",
                            scope: e,
                            data: {
                                warnYList: e.y_warns,
                                warnYOptionalList: e.y_optional_warns,
                                yFieldsList: e.field_list_y,
                                yOptionalFieldsList: [],
                                isYAxis: !0,
                                isYOptionalAxis: !1,
                                rule_id: n.ruleId,
                                ct_id: n.chartId,
                                role_type: 0,
                                isDash: !1
                            },
                            controller: "chartWarnConfigCtrl"
                        }) : i.open({
                            template: "/static/partials/chart-warning-config.html",
                            className: "ngdialog-theme-default ngDialog-width-600 set-warning-dialog",
                            scope: e,
                            data: {
                                warnYList: e.y_warns,
                                warnYOptionalList: e.y_optional_warns,
                                yFieldsList: [],
                                yOptionalFieldsList: e.field_list_y_optional,
                                isYAxis: !1,
                                isYOptionalAxis: !0,
                                rule_id: n.ruleId,
                                ct_id: n.chartId,
                                role_type: 0,
                                isDash: !1
                            },
                            controller: "chartWarnConfigCtrl"
                        })
                    }, 
                    s(["warn.inputWarnName", "warn.valueCompareTips", "filter.inputCompleteCondition", "warn.valueOutOfRange", "warn.inputFormatError"], e)
                }
            }
        }])
        .directive("warningAmount", [function () {
            return {
                restrict: "A",
                controller: ["$scope", "commonHttp", "$rootScope", "$timeout", function (e, t, a, i) {
                    var r = function () {
                        t.get("/api/warn/amount").then(function (e) {
                            "0" === e.status && (a.unread = e.result.unread)
                        })
                    };
                    i(function () {
                        r()
                    }, 500);
                    e.$on("_websocketChartMessage_", function (e, t) {
                        var i = "string" == typeof t.data ? $.parseJSON(t.data) : t.data;
                        5 == i.type && (a.unread = i.count)
                    })
                }]
            }
        }])
    }(), 
    angular
    .module("BC.directives")
    .constant("screenOfficialSize", [{
        name: "1366×768 (16:9)",
        value: {
            width: 1366,
            height: 768,
            type: 1
        }
    }, {
        name: "1440×900（16:10）",
        value: {
            width: 1440,
            height: 900,
            type: 1
        }
    }, {
        name: "1600×900（16:9）",
        value: {
            width: 1600,
            height: 900,
            type: 1
        }
    }, {
        name: "1680×1050（16:10）",
        value: {
            width: 1680,
            height: 1050,
            type: 1
        }
    }, {
        name: "1920×1080（16:9）",
        value: {
            width: 1920,
            height: 1080,
            type: 1
        }
    }, {
        name: "1920×1200（16:10）",
        value: {
            width: 1920,
            height: 1200,
            type: 1
        }
    }, {
        name: "2560×1440（16:9）",
        value: {
            width: 2560,
            height: 1440,
            type: 1
        }
    }, {
        name: "2560×1600（16:10）",
        value: {
            width: 2560,
            height: 1600,
            type: 1
        }
    }])
    .directive("chartScreenImg", ["toggleNextBlock", function (e) {
        return {
            restrict: "EA",
            templateUrl: "/static/partials/directiveTemplates/chartStyleTpl/chart_screen_img.html",
            replace: !0,
            link: function (t, a, i) {
                t.screenImg = {
                    url: ""
                }, 
                t.toggleNextBlock = e, 
                t.$on("editChartMeta", function (e, a) {
                    var i = (a.child, a.item);
                    t.screenImg.url = i.url
                }), 
                t.modifyImgData = function () {
                    t.$emit("chartScreenImg", {
                        screenImg: t.screenImg
                    })
                }, 
                t.cancelDocumentEvent = function () {
                    $(document).off("keydown.change_item_pos"), $(document).off("keydown.save_item_pos")
                }, 
                t.keyUpModify = function (e) {
                    13 == (e || window.event).keyCode && t.modifyImgData()
                }
            }
        }
    }])
    .directive("chartScreenVideo", ["toggleNextBlock", function (e) {
        return {
            restrict: "EA",
            templateUrl: "/static/partials/directiveTemplates/chartStyleTpl/chart_screen_video.html",
            replace: !0,
            link: function (t, a, i) {
                t.screenVideo = {
                    src: "",
                    autoplay: !1,
                    loop: !1
                }, 
                t.toggleNextBlock = e, t.$on("editChartMeta", function (e, a) {
                    var i = (a.child, a.item);
                    t.screenVideo.src = i.src, t.screenVideo.autoplay = i.autoplay, t.screenVideo.loop = i.loop
                }), 
                t.modifyVideoData = function () {
                    t.$emit("chartScreenVideo", {
                        screenVideo: t.screenVideo
                    })
                }, 
                t.cancelDocumentEvent = function () {
                    $(document).off("keydown.change_item_pos"), $(document).off("keydown.save_item_pos")
                }, 
                t.keyUpModify = function (e) {
                    13 == (e || window.event).keyCode && t.modifyVideoData()
                }
            }
        }
    }])
    .directive("chartScreenNumerical", ["toggleNextBlock", function (e) {
        return {
            restrict: "EA",
            scope: {
                saveFunc: "&?"
            },
            templateUrl: "/static/partials/directiveTemplates/chartStyleTpl/chart_screen_numerical.html",
            replace: !0,
            link: function (t, a, i) {
                t.chartNumericalSetting = {
                    trendLine: !1,
                    cumulative: !1,
                    innerTotal: !1,
                    dataZoom: !1
                }, t.toggleNextBlock = e
            }
        }
    }])
    .directive("chartStyleText", ["$rootScope", "$timeout", "chartFontFamily", "toggleNextBlock", function ($rootScope, $timeout, chartFontFamily, toggleNextBlock) {
        return {
            restrict: "EA",
            scope: {
                saveFunc: "&?"
            },
            templateUrl: "/static/partials/directiveTemplates/chartStyleTpl/chart_style_text.html",
            replace: !0,
            link: function ($scope, element, attrs) {
                function getDefaultTextStyle(e) {
                    return {
                        title: {
                            fontFamily: "inherit",
                            fontColor: e.curThemeColor.fontColor,
                            fontSize: "14px",
                            fontBold: !1,
                            fontItalic: !1,
                            fontUnderline: !1,
                            fontAlign: "center",
                            lineHeight: "22px",
                            textIndent: "0px"
                        },
                        content: {
                            fontFamily: "inherit",
                            fontColor: e.curThemeColor.fontColor,
                            fontSize: "13px",
                            fontBold: !1,
                            fontItalic: !1,
                            fontUnderline: !1,
                            fontAlign: "left",
                            lineHeight: "22px",
                            textIndent: "0px"
                        }
                    }
                }

                function clearDefaultColor(html) {
                    var copyHtml = html,
                        color = $(copyHtml).find("font").attr("color");
                    return color && (copyHtml = copyHtml.replace(eval("/" + color + "/g"), "")), copyHtml
                }
                var saveParamMap = {
                    fontFamily: "font-family",
                    fontColor: "color",
                    fontSize: "font-size",
                    fontBold: "font-weight",
                    fontItalic: "font-style",
                    fontUnderline: "text-decoration",
                    fontAlign: "text-align",
                    lineHeight: "line-height",
                    textIndent: "text-indent"
                };
                $scope.$on("editChartMeta", function (e, t) {
                    if (t.is_cancel) return void($scope.chartStyleExtendSetting.visible = !1);
                    if (t.child && t.child.meta.ct_id) {
                        var a = t.child.meta;
                        a.style = a.style ? a.style : {}, a.html = clearDefaultColor(a.html), $timeout(function () {
                            $scope.chartStyleTextSetting.saveMeta = a, $scope.chartStyleTextSetting.viewMeta = angular.copy(a), $scope.chartStyleTextSetting.visible = !0, $scope.chartStyleTextSetting.mode = "C101" == a.type ? "content" : "title", $scope.chartStyleTextSetting.init()
                        }, 10)
                    }
                }), "en" == $rootScope.language && (chartFontFamily[0].name = "Default"), $scope.toggleNextBlock = toggleNextBlock, $scope.chartStyleTextSetting = {
                    textStyle: null,
                    visible: !1,
                    mode: "",
                    chartFontFamily: chartFontFamily,
                    viewMeta: {},
                    saveMeta: {},
                    themeColor: {
                        dark: {
                            fontColor: "rgba(255, 255, 255, 0.7)"
                        },
                        light: {
                            fontColor: "#666666"
                        },
                        curThemeColor: {}
                    },
                    init: function () {
                        var e = this.themeColor,
                            t = this.mode;
                        e.curThemeColor = 2 == $rootScope.usedThemeId ? e.light : e.dark;
                        var a = getDefaultTextStyle(e)[t];
                        this.formatInitStyle(this.viewMeta.style, a)
                    },
                    changeFontAlign: function (e) {
                        this.viewMeta.style.fontAlign = e, this.applyConfig()
                    },
                    changeColor: function (e) {},
                    formatHtml: function (e) {
                        var t = e.html,
                            a = e.style,
                            i = $(t);
                        i.each(function (e, t) {
                            $(t).css(a)
                        });
                        var r = $("<div></div>");
                        r.append(i), e.html = r[0].innerHTML
                    },
                    formatSaveStyle: function () {
                        var e = this.viewMeta.style;
                        parseInt(e.lineHeight) < 10 && (e.lineHeight = "10px"), e.fontSize = parseInt(e.fontSize) + "px";
                        var t = {
                            color: e.fontColor,
                            "font-family": e.fontFamily,
                            "font-size": e.fontSize,
                            "font-weight": e.fontBold ? "bold" : "normal",
                            "font-style": e.fontItalic ? "italic" : "normal",
                            "text-decoration": e.fontUnderline ? "underline" : "none",
                            "text-align": e.fontAlign,
                            "line-height": e.lineHeight,
                            "text-indent": e.textIndent
                        };
                        return "title" == $scope.chartStyleTextSetting.mode && (delete t["line-height"], delete t["text-indent"]), t
                    },
                    formatInitStyle: function (e, t) {
                        angular.forEach(saveParamMap, function (a, i) {
                            if (e[a]) switch (i) {
                                case "fontBold":
                                    e[i] = "bold" == e[a];
                                    break;
                                case "fontItalic":
                                    e[i] = "italic" == e[a];
                                    break;
                                case "fontUnderline":
                                    e[i] = "underline" == e[a];
                                    break;
                                default:
                                    e[i] = e[a]
                            } else e[i] = t[i]
                        })
                    },
                    keyUpModify: function (e) {
                        13 == e.keyCode && this.applyConfig()
                    },
                    applyConfig: function (e) {
                        "color" == e && $scope.$digest();
                        var t = this.formatSaveStyle();
                        this.saveMeta.style = $.extend(!0, this.saveMeta.style, t), angular.forEach(saveParamMap, function (e, t) {
                            delete $scope.chartStyleTextSetting.saveMeta.style[t]
                        }), this.formatHtml(this.saveMeta), $scope.saveFunc()
                    }
                }
            }
        }
    }]).directive("chartStyleExtend", ["ngDialog", "$timeout", "$rootScope", "errHint", "$jsTipTranslate", "defaultChartStyleFactory", "chartLegendPos", "chartLineDashStyle", "chartLineWidth", "chartFontSize", "chartFontFamily", "toggleNextBlock", function (e, t, a, i, r, n, o, l, s, d, c, u) {
        return {
            restrict: "EA",
            scope: {
                chartInfo: "=?",
                saveFunc: "&?"
            },
            templateUrl: "/static/partials/directiveTemplates/chartStyleTpl/chart_style_extend.html",
            replace: !0,
            link: function (e, f, p) {
                function g(t) {
                    e.chartStyle;
                    return {
                        x_gridPlot: function () {
                            e.chartStyleExtendSetting.configGridPlotLine("xAxis")
                        },
                        y_gridPlot: function () {
                            e.chartStyleExtendSetting.configGridPlotLine("yAxis")
                        },
                        axis: function () {
                            e.chartStyleExtendSetting.configAxisLine()
                        },
                        legend: function () {
                            e.chartStyleExtendSetting.configLegend()
                        }
                    }[t]
                }
                e.$on("editChartMeta", function (a, i) {
                    if (i.is_cancel) return void(e.chartStyleExtendSetting.visible = !1);
                    if (i.need_reload && i.child && i.child.meta) {
                        var r = i.child.meta.ct_id,
                            n = i.child.meta.tb_id,
                            o = angular.element("#" + r).find(".item-chart").find(".chart").data("chart-data");
                        o && o.info && (e.chartInfo = o.info, t(function () {
                            e.chartStyleExtendSetting.initSettingData(), e.chartStyleExtendSetting.visible = e.chartStyleExtendSetting.canSetGridLine() || e.chartStyleExtendSetting.canSetLegend() || e.chartStyleExtendSetting.canSetAxis(), e.chartStyleExtendSetting.mode = "data_screen_edit", e.chartStyleExtendSetting.ct_id = r, e.chartStyleExtendSetting.tb_id = n
                        }, 10))
                    }
                }), "en" == a.language && (c[0].name = "Default"), e.toggleNextBlock = u, e.chartStyleExtendSetting = {
                    chartLineDashStyle: l,
                    chartLineWidth: s,
                    chartFontSize: d,
                    chartFontFamily: c,
                    visible: !1,
                    mode: "",
                    ct_id: "",
                    tb_id: "",
                    themeColor: {
                        dark: {
                            color: "rgba(255, 255, 255, 0.5)",
                            stroke: "rgba(255, 255, 255, 0.1)"
                        },
                        light: {
                            color: "#666666",
                            stroke: "#cccccc"
                        },
                        curThemeColor: {}
                    },
                    chartStyle: {},
                    originalData: null,
                    defaultStyle: null,
                    canSetGridLine: function () {
                        return !!e.chartInfo && bdpChart.configurable.canEditGridPlotLine(e.chartInfo.chart_type, {
                            info: e.chartInfo
                        })
                    },
                    canSetLegend: function () {
                        return !!e.chartInfo && bdpChart.configurable.canEditChartLegend(e.chartInfo.chart_type, {
                            info: e.chartInfo
                        })
                    },
                    canSetAxis: function (t) {
                        if (!e.chartInfo) return !1;
                        var a = e.chartInfo.chart_type;
                        return "yOptional" == t ? "C250" == a : ["C210", "C211", "C212", "C220", "C240", "C241", "C242", "C250", "C280", "C290", "C320", "C350", "C351", "C352"].indexOf(a) >= 0
                    },
                    initSettingData: function () {
                        var t = this.themeColor;
                        t.curThemeColor = 2 == a.usedThemeId ? t.light : t.dark;
                        var i = n.getDefaultStyle();
                        this.defaultStyle = angular.copy(i), this.originalData = angular.copy(e.chartInfo.style), e.chartInfo.style ? e.chartStyle = $.extend(!0, this.defaultStyle, e.chartInfo.style) : e.chartStyle = angular.copy(this.defaultStyle), bdpChart.helper.transferAxisOldStyle(e.chartStyle.axis)
                    },
                    changeSplitNum: function (t, a) {
                        13 == (t || window.event).keyCode && e.chartStyleExtendSetting.compareGridPlotLineChanged(a) && e.chartStyleExtendSetting.configGridPlotLine(a)
                    },
                    cancelDocumentEvent: function () {
                        $(document).off("keydown.change_item_pos"), $(document).off("keydown.save_item_pos")
                    },
                    compareGridPlotLineChanged: function (t) {
                        var a = e.chartStyle.gridPlotLine[t];
                        if (!e.chartStyleExtendSetting.originalData || !e.chartStyleExtendSetting.originalData.gridPlotLine) return r = !0;
                        var i = e.chartStyleExtendSetting.originalData.gridPlotLine[t],
                            r = !1;
                        if (!i) return r = !0;
                        for (var n in a) a[n] != i[n] && (r = !0);
                        return r
                    },
                    configGridPlotLine: function (a) {
                        if (!a || !e.chartStyleExtendSetting.compareGridPlotLineChanged(a)) return !1;
                        var r = e.chartStyle.gridPlotLine,
                            n = /^(0|[1-9]|10)$/;
                        if (!n.test(r.xAxis.splitNum) || !n.test(r.yAxis.splitNum)) return i(e.tips["dash.advDash.inputPositiveNumberBetween0and10"]), void t(function () {
                            r.xAxis.splitNum = n.test(r.xAxis.splitNum) ? r.xAxis.splitNum : 10, r.yAxis.splitNum = n.test(r.yAxis.splitNum) ? r.yAxis.splitNum : 10
                        }, 500);
                        this.modifySetting()
                    },
                    configLegend: function (t) {
                        var a = e.chartStyle.legend;
                        if (a.itemStyle.lineHeight = parseInt(a.itemStyle.fontSize) + 2 + "px", t && t.pos) {
                            a.pos = t.pos, a.enabled = "null" != t.pos;
                            var i = o[t.pos];
                            a.enabled && (a.layout = i.layout, a.align = i.align, a.verticalAlign = i.verticalAlign)
                        }
                        this.modifySetting()
                    },
                    configAxisLine: function (e) {
                        this.modifySetting()
                    },
                    changeColor: function (e) {},
                    modifyColor: function (e, t) {
                        g(t)(t)
                    },
                    modifySetting: function () {
                        if (e.chartInfo.style = e.chartStyle, "data_screen_edit" == this.mode) {
                            angular.element("#" + this.ct_id).find(".item-chart").find(".chart").data("chart-data").renderChart(), e.saveFunc({
                                chart: {
                                    ct_id: this.ct_id,
                                    style: e.chartInfo.style,
                                    drill_level: e.chartInfo.drill_level || 0
                                }
                            }), e.chartStyleExtendSetting.originalData = angular.copy(e.chartInfo.style)
                        } else e.saveFunc({
                            only_redraw: !0
                        })
                    }
                }, r(["dash.advDash.inputPositiveNumberBetween0and10"], e)
            }
        }
    }]),
    function () {
        angular.module("BC.directives")
        .directive("plotLine", [
            "ngDialog", 
            "$timeout", 
            "chartLineType", 
            "$getCustomFormula", 
            "formulaKeyMap", 
            "operatorHelpLink", 
            "setAdvanceAggregatorName", "$jsTipTranslate", function (e, t, a, i, r, n, o, l) {
            return {
                restrict: "A",
                templateUrl: "/static/js/chart-config/tpl/chart-plot-line.html",
                link: function (s, d, c) {
                    var u = "y";
                    s.formulaMap = r, s.goHelp = function (e) {
                        n(e)
                    };
                    var f = function (e) {
                        function t(e) {
                            var t = "",
                                a = "";
                            return e.nick_name ? t = e.nick_name : (t = e.name, (a = s.setAdvanceAggregatorName(e)) && (t += a)), t
                        }
                        var a = [],
                            i = [],
                            r = [],
                            n = s.chart_ops.meta.level[s.drill_level];
                        n.y_scatter ? angular.map(n.y_scatter || [], function (e) {
                            e.alias_name = t(e), i.push(e)
                        }) : angular.map(n.y || [], function (e) {
                            e.alias_name = t(e), i.push(e)
                        }), s.originFields = angular.copy(i), "C250" == s.selected_type && (angular.map(n.y_optional || [], function (e) {
                            e.alias_name = t(e), a.push(e)
                        }), s.originFieldsRight = angular.copy(a)), s.fields = "y_optional" !== e ? angular.copy(i) : angular.copy(a), "C280" == s.selected_type && (angular.map(n.y || [], function (e) {
                            e.alias_name = t(e), r.push(e)
                        }), s.originFieldsX = angular.copy(r), s.fieldsX = angular.copy(r))
                    };
                    s.initPlotLinesData = function (e) {
                        if (s.chart_ops) {
                            f(e), s.plotLinesLeft = [], s.plotLinesLeftX = [];
                            var t = s.chart_ops.meta.level[s.drill_level];
                            t.guide_line && (s.plotLinesLeft = [].concat(t.guide_line)), s.plotLinesLeft.length ? s.showPlotLines = angular.copy(s.plotLinesLeft) : s.showPlotLines = [], "C250" == s.selected_type && (s.plotLinesRight = [], t.guide_line_right && (s.plotLinesRight = [].concat(t.guide_line_right)), s.plotLinesRight.length ? s.showPlotLinesRight = angular.copy(s.plotLinesRight) : s.showPlotLinesRight = []), "y_optional" !== e ? (s.plotLinesY = angular.copy(s.plotLinesLeft), u = "y") : (s.plotLinesY = angular.copy(s.plotLinesRight), u = "y_optional"), "C280" == s.selected_type && (t.guide_line_x && (s.plotLinesLeftX = [].concat(t.guide_line_x)), s.plotLinesLeftX.length ? s.showPlotLinesX = angular.copy(s.plotLinesLeftX) : s.showPlotLinesX = [], s.plotLinesX = angular.copy(s.plotLinesLeftX))
                        }
                    }, s.lineType = a, s.calcuType = i(["AVG", "MIN", "MAX"]), s.setPlotLine = function (t) {
                        s.initPlotLinesData(t), e.open({
                            templateUrl: "/static/partials/add_plot_line.html",
                            className: "ngdialog-theme-default ng-plot-line-dialog",
                            scope: s
                        }), "C280" == s.selected_type ? 0 == s.plotLinesY.length && 0 == s.plotLinesX.length && (s.addPlotLineY(), s.addPlotLineX()) : 0 == s.plotLinesY.length && s.addPlotLineY()
                    }, s.addPlotLine = function (e, t, a) {
                        e.push({
                            name: a,
                            value_type: "constant",
                            value: "",
                            fid: "",
                            uniq_id: "",
                            formula: "AVG"
                        }), t.length && (e[e.length - 1].fid = t[0].fid, e[e.length - 1].uniq_id = t[0].uniq_id)
                    }, s.addPlotLineY = function () {
                        if ("C280" == s.selected_type) var e = s.tips["chart.lateral"] + "(" + (s.plotLinesY.length + 1) + ")";
                        else if ("y" == u) var e = s.tips["chart.guideLine"] + "(" + (s.plotLinesY.length + 1) + ")";
                        else if ("y_optional" == u) var e = s.tips["chart.guideLine"] + (s.plotLinesY.length + 1);
                        s.addPlotLine(s.plotLinesY, s.fields, e)
                    }, s.addPlotLineX = function () {
                        var e = s.tips["chart.vertical"] + "(" + (s.plotLinesX.length + 1) + ")";
                        s.addPlotLine(s.plotLinesX, s.fieldsX, e)
                    }, s.removeThisLineY = function (e) {
                        s.plotLinesY.splice(e, 1);
                        for (var t = 0; t < s.plotLinesY.length; t++) s.plotLinesY[t].name === s.tips["chart.lateral"] + "(" + (t + 2) + ")" && "C280" == s.selected_type ? s.plotLinesY[t].name = s.tips["chart.lateral"] + "(" + (t + 1) + ")" : s.plotLinesY[t].name === s.tips["chart.guideLine"] + "(" + (t + 2) + ")" && (s.plotLinesY[t].name = s.tips["chart.guideLine"] + "(" + (t + 1) + ")")
                    }, s.removeThisLineX = function (e) {
                        s.plotLinesX.splice(e, 1);
                        for (var t = 0; t < s.plotLinesX.length; t++) s.plotLinesX[t].name === s.tips["chart.vertical"] + "(" + (t + 2) + ")" && (s.plotLinesX[t].name = s.tips["chart.vertical"] + "(" + (t + 1) + ")")
                    }, s.setUniqId = function (e, t) {
                        if ("C243" == s.selected_type)
                            for (var a = 0; a < s.fields.length; a++) s.fields[a].uniq_id == t.uniq_id && (s.plotLinesY[e].uniq_id = s.fields[a].uniq_id, s.plotLinesY[e].fid = s.fields[a].fid)
                    }, s.reCheck = function (e, t) {
                        for (var a = e.length - 1; a > -1; a--)
                            if (e.length > 0) {
                                var i = e[a];
                                if ("" === i.name) return alert(s.tips["chart.lineNameRequired"]), !1;
                                if ("constant" == i.value_type && ("" === i.value || isNaN(Number(i.value)))) return alert(s.tips["chart.lineValueMustBeNumber"]), !1;
                                if ("calculate" == i.value_type && "" == i.uniq_id) return alert(s.tips["chart.lineCalcFidRequired"]), !1;
                                "constant" == i.value_type && (i.value = Number(i.value)), t.push(i)
                            }
                        return !0
                    }, s.save = function () {
                        var a = [];
                        if ("C280" == s.selected_type) {
                            if (!s.reCheck(s.plotLinesY, a) || !s.reCheck(s.plotLinesX, a)) return !1
                        } else if (!s.reCheck(s.plotLinesY, a)) return !1;
                        for (var i = 0; i < a.length; i++)
                            for (var r = i + 1; r < a.length; r++)
                                if (a[i].name == a[r].name) return alert(s.tips["chart.lineNameRepeats"]), !1;
                        angular.forEach(s.fields, function (e) {
                            delete e.alias_name
                        }), angular.forEach(s.fieldsX, function (e) {
                            delete e.alias_name
                        });
                        var n = "y" == u ? "guide_line" : "guide_line_right";
                        t(function () {
                            1 == s.plotLinesY.length && "" == s.plotLinesY.value || (s.chart_ops.meta.level[s.drill_level][n] = s.plotLinesY), "C280" == s.selected_type && (1 == s.plotLinesX.length && "" == s.plotLinesX.value || (s.chart_ops.meta.level[s.drill_level].guide_line_x = s.plotLinesX));
                            var e = s.$bdpChart.data,
                                t = !1;
                            s.plotLinesY.forEach(function (e) {
                                "calculate" === e.value_type && (t = !0)
                            }), "C280" == s.selected_type && s.plotLinesX.forEach(function (e) {
                                "calculate" === e.value_type && (t = !0)
                            }), e[n] = s.plotLinesY, e.guide_line_x = s.plotLinesX, "y" === u ? s.showPlotLines = s.plotLinesY : s.showPlotLinesRight = s.plotLinesY, s.showPlotLinesX = s.plotLinesX, t ? s.saveChartImmediate({
                                not_need_redraw: !1,
                                only_refresh_data: !1,
                                is_drill_chart: !!s.drill_level
                            }) : s.saveChartImmediate({
                                only_redraw: !0,
                                is_drill_chart: !!s.drill_level
                            })
                        }, 100), e.closeAll()
                    }, s.setAdvanceAggregatorName = o, l(["chart.lineNameRequired", "chart.lineValueMustBeNumber", "chart.lineCalcFidRequired", "chart.lateral", "chart.vertical", "chart.lineNameRepeats", "chart.guideLine"], s)
                },
                controller: ["$scope", function (e) {
                    e.$watch("global.watch", function (t) {
                        e.initPlotLinesData("init")
                    })
                }]
            }
        }])
    }(), angular.module("BC.directives")
    .directive("chartFullScreen", ["ngDialog", "$timeout", "$interval", function (e, t, a) {
        function i(a, i, n) {
            function o() {
                function e() {
                    var e = r.find(".chart").data("chart-data");
                    e && ["C300", "C310", "C330", "C340", "C500"].indexOf(e.info.chart_type) >= 0 && ("C300" === e.info.chart_type ? t(function () {
                        e.emit("reflow")
                    }, 0) : e.renderChart())
                }
                var i = a.chartUrl[a.domid].options.ct_id,
                    r = angular.element("#" + i);
                fullScreenDom = a.$curfullScreenChart = r[0], (fullScreenDom.requestFullscreen || fullScreenDom.webkitRequestFullscreen || fullScreenDom.mozRequestFullScreen || fullScreenDom.msRequestFullscreen).apply(fullScreenDom), $(a.$curfullScreenChart).addClass("J-simple-chart-fullscreen"), reflowChart(r), $(document).off("fullscreenchange.dataScreen webkitfullscreenchange.dataScreen mozfullscreenchange.dataScreen msRequestFullscreen.dataScreen").on("fullscreenchange.dataScreen webkitfullscreenchange.dataScreen mozfullscreenchange.dataScreen msRequestFullscreen.dataScreen", function (t) {
                    bdp.bdpDash.getCurFullScreenElement() ? ($(a.$curfullScreenChart).addClass("J-simple-chart-fullscreen"), e()) : ($(a.$curfullScreenChart).removeClass("J-simple-chart-fullscreen"), $(document).off("fullscreenchange.dataScreen webkitfullscreenchange.dataScreen mozfullscreenchange.dataScreen msRequestFullscreen.dataScreen"), e())
                })
            }
            a.$on("ngDialog.opened", function (e, t) {
                $(".fs-queue-show").addClass("active")
            }), a.$curfullScreenDom = null, i.on("click", function () {
                if (a.chartUrl = a.$eval(n.chartUrl), a.domid = a.$eval(n.domid), a.standardItems = a.$eval(n.standardItems), a.autoPlaying = !1, bdp.bdpDash.getCurFullScreenElement()) return void o();
                $("#MEIQIA-BTN-HOLDER") && $("#MEIQIA-BTN-HOLDER").css("display", "none"), $("body").addClass("fs-chart-mode"), r = e.open({
                    templateUrl: "/static/js/dashboard/tpl/dialogTemplates/fullscreen.html",
                    className: "ngdialog-theme-default fullscreen-modal",
                    showClose: !1,
                    disableAnimation: !0,
                    scope: a,
                    preCloseCallback: function () {
                        $(document).off("keydown.fs_key_ctrl"), $("#MEIQIA-BTN-HOLDER") && $("#MEIQIA-BTN-HOLDER").css("display", "block"), $("body").removeClass("fs-chart-mode")
                    },
                    controller: "fullscreenCtrl"
                })
            })
        }
        var r, n = $.cookie("locale"),
            o = "en" == n ? "Full Screen" : "全屏";
        return {
            link: i,
            template: '<a class="bdp-icon-wrap" title="' + o + '"><i class="bdp-icon ico-fullscreen"></i></a>',
            restrict: "EA",
            replace: !0,
            scope: !0
        }
    }]).controller("fullscreenCtrl", ["$scope", "$rootScope", "$timeout", "$interval", "ngDialog", "autoRefreshChart", function (e, t, a, i, r, n) {
        function o(e) {
            var t = [];
            return (e.meta.x || []).forEach(function (e, a) {
                if ("date" === e.data_type) {
                    var i = angular.copy(e);
                    i.type = 0, i.origin_index = a, t.push(i)
                }
            }), (e.meta.compare_axis || []).forEach(function (e, a) {
                if ("date" === e.data_type) {
                    var i = angular.copy(e);
                    i.type = 1, i.origin_index = a, t.push(i)
                }
            }), t
        }

        function l(a, i) {
            var i = d(i, 0),
                r = angular.copy(f[i].children[0]);
            ! function (t, a) {
                _.isFunction(u[t]) && u[t](), u[t] = e.$watch(function () {
                    return e.standardItems[a].children[0]
                }, function (a, i) {
                    if (a !== i) {
                        var n = e.fullscreen["queue_" + t];
                        n.filter_opts = r = angular.copy(a), n.date_fields = o(a)
                    }
                }, !0)
            }(a, i);
            var n = o(r);
            $.extend(e.fullscreen["queue_" + a], {
                index: i,
                name: r.meta.name,
                chart_type: r.meta.type,
                filter_opts: angular.copy(r),
                date_fields: n,
                dom_id: r.dom_id,
                options: {
                    alwaysShowDataLabels: !0,
                    theme: 1 === e.fullDisplayTheme ? "dark" : "default",
                    device: e.fullDisplayDevice || "pc",
                    _t: new Date,
                    ct_id: r.meta.ct_id,
                    dsh_id: c,
                    optional: {
                        chart_jump_info: r.meta.chart_jump
                    }
                },
                lazyload: !1
            }, !0);
            var l = e.chartUrl[f[i].children[0].dom_id].options,
                s = l.optional;
            e.fullscreen["queue_" + a].options.is_tpl = l.is_tpl, s.filter_list && (e.fullscreen["queue_" + a].options.optional.filter_list = s.filter_list), s.dsh_filter && (e.fullscreen["queue_" + a].options.optional.dsh_filter = s.dsh_filter), s.filter_cmp_date_range && (e.fullscreen["queue_" + a].options.optional.filter_cmp_date_range = s.filter_cmp_date_range), s.sdo_id && (e.fullscreen["queue_" + a].options.optional.sdo_id = s.sdo_id), l.rule_id && (e.fullscreen["queue_" + a].options.optional.rule_id = l.rule_id), l.ws_id && (e.fullscreen["queue_" + a].options.optional.ws_id = l.ws_id), e.drillOption && (e.drillOption = void 0), t.fullScreenCacheData = t.fullScreenCacheData || {
                innerFilterList: {},
                advancedSortList: {}
            }, t.fullScreenCacheData.innerFilterList[l.ct_id] = angular.copy(r.meta.filter_list_inner), t.fullScreenCacheData.advancedSortList[l.ct_id] = angular.copy(r.meta.advanced_sort)
        }

        function s(e) {
            var t = $(".J_chart"),
                a = $(".fullscreen-modal"),
                i = a.find(".drill-crumbs-wrap").height(),
                r = $(".J_filterWrap"),
                n = $(".J_filterWrap_hidden");
            r.css({
                visibility: "hidden"
            });
            var o = $(".J_filter", r),
                l = $(".J_dateGranularity", r),
                s = $(".J_filter_hidden", n),
                d = $(".J_dateGranularity_hidden", n),
                c = r.width(),
                u = c / 2,
                f = s.width(),
                p = d.width() + 24,
                g = (f + 2) / c * 100,
                h = p / c * 100;
            o.css({
                width: (g > 100 ? 100 : g) + "%"
            }), l.css({
                width: (h > 100 ? 100 : h) + "%"
            }), f < u && p < u ? o.css({
                width: "50%"
            }) : f >= u && p >= u ? (o.css({
                width: "50%"
            }), l.css({
                width: "50%"
            })) : f + p >= c && f >= u && p <= u ? o.css({
                width: (c - p) / c * 100 + "%"
            }) : f + p >= c && f <= u && p >= u && 0 != f && l.css({
                width: (c - f) / c * 100 + "%"
            }), r.attr("has-add-diff", "true"), r.css({
                visibility: "visible",
                minWidth: "1000px"
            }), t.css({
                top: r.height() + 79 + i
            })
        }

        function d(e, t) {
            return e >= f.length ? e %= f.length : e < 0 && (e = f.length + e), "C101" === f[e].children[0].meta.type && (t >= 0 ? e++ : t < 0 && e--, e = d(e, t)), e < f.length && e >= 0 ? e : d(e)
        }
        for (var c = e.dashSelected, u = {}, f = [], p = 0; p < e.standardItems.length; p++) {
            var g = e.standardItems[p];
            f.push(g)
        }
        var h = function (e, t) {
            return "index" in e && "index" in t ? e.index - t.index : e.row == t.row ? e.col - t.col : e.row < t.row ? -1 : 1
        };
        e.standardItems = e.standardItems.sort(h), f = f.sort(h), e.fullscreen = {
                auto_play_flag: !1,
                isAdvOrScreenFlag: bdp.bdpPageStatus.isUnderDataScreen() || bdp.bdpPageStatus.isUnderAdvDash() || bdp.bdpPageStatus.isUnderAdvDashNormal(),
                index: 0,
                charts: f,
                filter: {},
                queue_show: {},
                queue_next: {}
            }, e.shareAdvDash && 2 == e.shareAdvDash.dashCategory && (e.fullscreen.isAdvOrScreenFlag = !0), 2 == t.dashCategory && (e.fullscreen.isAdvOrScreenFlag = !0), e.fullscreen.ableSlide = !e.fullscreen.isAdvOrScreenFlag, e.fullscreen.ableLeftNav = !e.fullscreen.isAdvOrScreenFlag, t.fullScreenCacheData = {}, t.fullScreenCacheData.innerFilterList = t.fullScreenCacheData.innerFilterList || {}, t.fullScreenCacheData.advancedSortList = t.fullScreenCacheData.advancedSortList || {},
            function () {
                $(document).off("keydown.change_item_pos"), $(document).off("keydown.save_item_pos");
                for (var t = 0, a = 0; a < f.length; a++)
                    if (e.chartUrl[e.domid].options.ct_id === f[a].children[0].meta.ct_id) {
                        t = a;
                        break
                    }
                e.fullscreen.index = t, e.fullscreen.name = f[e.fullscreen.index].children[0].meta.name, l("show", t), e.fullscreen.info = e.fullscreen.queue_show, e.$on("_websocketChartMessage_", function (t, a) {
                    1 == ("string" == typeof a.data ? $.parseJSON(a.data) : a.data).type && n.refresh({
                        drawChartUrl: e.fullscreen.queue_show,
                        type: "fullscreen",
                        evt: t,
                        scope: e,
                        ret: a
                    })
                })
            }(), e.slide = function (t, a) {
                if (t) {
                    var i = d((e.fullscreen.index + t) % f.length, t);
                    if (e.fullscreen.index = i, a && !a.auto) $(".fullscreen-modal").find(".drill-crumbs-wrap").html(""), l("show", i), l("next", i + 1), $(".fs-queue-next").removeClass("active"), $(".fs-queue-show").addClass("active"), e.fullscreen.name = f[e.fullscreen.index].children[0].meta.name;
                    else {
                        var r = $(".fullscreen-chart");
                        if (1 === f.length) return;
                        for (var n = 0; n < r.length; n++) {
                            var o = r.eq(n),
                                s = o[0].className;
                            if (s.indexOf("active") > -1) {
                                if (s.indexOf("fs-queue-show") > -1) {
                                    e.fullscreen.queue_show.options.optional.drill_level > 0 && $(".fullscreen-modal").find(".drill-crumbs-wrap").html("");
                                    var c = $(".fs-queue-next");
                                    o.removeClass("active").html(""), c.addClass("active"), e.fullscreen.name = f[e.fullscreen.index].children[0].meta.name, e.fullscreen.info = e.fullscreen.queue_next, l("show", i + t)
                                } else if (s.indexOf("fs-queue-next") > -1) {
                                    e.fullscreen.queue_next.options.optional.drill_level > 0 && $(".fullscreen-modal").find(".drill-crumbs-wrap").html("");
                                    var u = $(".fs-queue-show");
                                    o.removeClass("active").html(""), u.addClass("active"), e.fullscreen.name = f[e.fullscreen.index].children[0].meta.name, e.fullscreen.info = e.fullscreen.queue_show, l("next", i + t)
                                }
                                break
                            }
                        }
                    }
                    $(".J_filterWrap").css({
                        visibility: "hidden"
                    })
                }
            };
        var m, b = null;
        e.autoPlay = function (t) {
            e.autoPlaying = t, e.watchPlayState(t, !0), $(".J_filterWrap").css({
                visibility: "hidden"
            }), clearTimeout(b);
            var a = $(".fs-chart-main").parent();
            if (t) {
                var i = $('<div class="only-layer" style="position:absolute;z-index:10;left:0;right:0;top:20;bottom:0;"></div>');
                i.on("click", function () {
                    e.autoPlay(!1)
                }), a.append(i)
            } else e.fullscreen.auto_play_flag = !1, a.find(".only-layer").length && a.find(".only-layer").remove(), b = setTimeout(function () {
                s()
            }, 25)
        }, e.watchPlayState = function (t, a) {
            t ? setTimeout(function () {
                e.slide(1, {
                    auto: !1
                }), m = i(function () {
                    e.slide(1, {
                        auto: !0
                    })
                }, 5e3)
            }, 1e3) : i.cancel(m)
        }, e.fullScreenGranularity = function (t, a, i, r, n) {
            i.granularity = r;
            var o = (angular.element(t.target), i.origin_index),
                l = e.fullscreen.queue_show.options.optional.display_granularity || {};
            l[e.drill_level] = l[e.drill_level] || [], l[e.drill_level].some(function (e, t) {
                return e.uniq_id === i.uniq_id && o == e.index
            }) ? l[e.drill_level].forEach(function (e, t) {
                e.uniq_id === i.uniq_id && e.index == o && (e.granularity = i.granularity, e.granularity_name = n || "", e.index = o, e.type = i.type)
            }) : l[e.drill_level].push({
                index: o,
                granularity: i.granularity,
                granularity_name: n || "",
                fid: i.fid,
                uniq_id: i.uniq_id,
                type: i.type
            }), e.fullscreen.queue_show.options.optional.display_granularity = l
        }, e.$on("$destroy", function () {
            i.cancel(m), u.show && u.show(), u.next && u.next()
        }), e.slideNav = function (e, t) {
            if ("show" === t) $(".fullscreen-modal").find(".nav").addClass("open"), $(".nav-handler").css({
                height: 64
            });
            else if ("hide" === t) {
                if (e.clientX < 196) return;
                $(".fullscreen-modal").find(".nav").removeClass("open"), $(".nav-handler").css({
                    height: "100%"
                })
            }
        }, e.toggleDataLabel = function (t) {
            if (e.show_data_label = void 0 !== t ? t : !e.show_data_label, e.show_data_label) $(".fs-data-label").remove();
            else {
                var a = $("<style class='fs-data-label' type='text/css' rel='stylesheet' />").appendTo("head"),
                    i = ".fullscreen-modal .chart .highcharts-data-labels > g, .fullscreen-modal .chart-pie .highcharts-data-label-connector ,.fullscreen-modal .funnel-datalabels, .fullscreen-modal .sunburst-labels {display:none}",
                    r = ".fullscreen-modal .bdp-datalabels {opacity:0; visibility:hidden;}";
                a[0].styleSheet ? a[0].styleSheet.cssText = i + r : a[0].appendChild(document.createTextNode(i + r))
            }
            localStorage.setItem("fs_data_label", 1 & e.show_data_label), e.$broadcast("reflow")
        }, e.toggleChartDescription = function (t) {
            e.show_chart_description = void 0 !== t ? t : !e.show_chart_description, setTimeout(function () {
                s("showRemark"), reflowChart($(".fullscreen-chart").parent(), !0)
            }, 0), localStorage.setItem("fs_chart_description", e.show_chart_description)
        };
        var v = localStorage.getItem("fs_chart_description");
        void 0 != v ? e.toggleChartDescription(1 == v) : e.show_chart_description = !1;
        var y = localStorage.getItem("fs_data_label");
        void 0 != y ? e.toggleDataLabel(1 == y) : e.show_data_label = 0 == $(".fs-data-label").length, e.$watch("show_chart_description", function (t) {
            e.$broadcast("toggleAllPoints", t)
        }), e.fullscreen.isAdvOrScreenFlag || $(document).off("keydown.fs_key_ctrl").on("keydown.fs_key_ctrl", function (t) {
            if (!$(t.target).closest(".string-filter").length) {
                switch (t.keyCode) {
                    case 39:
                    case 40:
                        e.slide(1, {
                            auto: !1
                        });
                        break;
                    case 37:
                    case 38:
                        e.slide(-1, {
                            auto: !1
                        });
                        break;
                    case 27:
                        e.closeThisDialog()
                }
                e.$$phase || e.$apply()
            }
        }), e.revertSelection = function () {
            var e = $(".fs-queue-show").data("chart-data");
            return e && e.exitSelectionView(), !1
        }, e.showMore = function (e) {
            if (!$(e.target).hasClass("J-revert-selection")) {
                var t = $(".J-more-action"),
                    a = $(".J-action-optlist"),
                    i = $(".J-fullscreen-more");
                if (i.addClass("open"), a.addClass("open"), $(".J-action-opt-wrap").css("z-index", "3"), 0 == t.find(".opacity-layer").length) {
                    var r = $('<div class="opacity-layer"></div>');
                    r.on("mouseenter", function () {
                        t.parent().find(".opacity-layer").remove(), a.removeClass("open"), i.removeClass("open"), $(".J-action-opt-wrap").css("z-index", "1")
                    }), t.parent().append(r)
                }
            }
        }
    }]), angular.module("BC.directives")
    .directive("tableStatistic", ["$timeout", "formulaKeyMap", "$jsTipTranslate", function (e, t, a) {
        function i(e, i, r) {
            function n(e, t, a) {
                if (e.tb_conditional_formatting && e.tb_conditional_formatting.length > 0) {
                    var i = e.tb_conditional_formatting.length;
                    if (a)
                        for (var r = i - 1; r >= 0; r--) {
                            var n = e.tb_conditional_formatting[r];
                            "row_summary" === n.fid && n.uniq_id !== t && e.tb_conditional_formatting.splice(r, 1)
                        } else if (t)
                            for (var r = 0; r < i; r++) {
                                var n = e.tb_conditional_formatting[r];
                                if (t && n.uniq_id === t) {
                                    e.tb_conditional_formatting.splice(r, 1);
                                    break
                                }
                            }
                }
            }

            function o(e, t, a) {
                if (e.advanced_sort && e.advanced_sort.length > 0) {
                    var i = e.advanced_sort.length;
                    if (a)
                        for (var r = i - 1; r >= 0; r--) {
                            var n = e.advanced_sort[r];
                            "row_summary" === n.fid && n.uniq_id !== t && e.advanced_sort.splice(r, 1)
                        } else if (t)
                            for (var o = 0; o < i; o++) {
                                var l = e.advanced_sort[o];
                                if (l.uniq_id == t) {
                                    e.advanced_sort.splice(o, 1);
                                    break
                                }
                            }
                }
                e.advanced_sort && 0 !== e.advanced_sort.length || (e.is_advanced_sort = 0)
            }

            function l(e) {
                for (var t = "", a = 0, i = e.y.length; a < i; a++) "row_summary" != e.y[a].fid || e.y[a].parent_uniq_id || (t = e.y[a].uniq_id);
                return t
            }

            function s(e) {
                if (!e || e && 0 === e.length) return !1;
                for (var t = 0, a = e.length; t < a; t++) {
                    if (e[t]) return !0;
                    e[t] = !1
                }
                return !1
            }
            a(["TOTAL"], e), e.$watch("global.watch", function () {
                if (e.chart_ops && e.chart_ops.meta) {
                    var t = e.chart_ops.meta.level[e.drill_level];
                    e.tb_statistic = t.tb_statistic || {
                        col: !1,
                        row: !1,
                        classify: !1,
                        subtotal: !1
                    }, e.tb_statistic.col_pos || (e.tb_statistic.col_pos = "bottom"), e.tb_statistic.row_pos || (e.tb_statistic.row_pos = "right");
                    var a = e.tb_statistic.subtotal_setting = e.tb_statistic.subtotal_setting || {},
                        i = a.dimensions = a.dimensions || [];
                    if (e.tb_statistic.subtotal) {
                        var r = t.x.length;
                        if (i && i.length) {
                            if (i.length < r)
                                for (var s = 0; s < r - i.length; s++) i.push(!1);
                            else i = i.slice(0, r);
                            e.tb_statistic.subtotal_setting.dimensions = i
                        }
                    }
                    var d = l(t);
                    t.tb_statistic ? (t.tb_statistic.row || (n(t, d), o(t, d)), t.tb_statistic.number_row || (n(t, d, !0), o(t, d, !0))) : (n(t, d), o(t, d), n(t, d, !0), o(t, d, !0))
                }
            });
            e.saveTableStatistic = function (t, a) {
                console.log(t);
                var i, r, s = e.chart_ops.meta.level[e.drill_level],
                    d = s.y.length,
                    c = +new Date,
                    u = {
                        check: "num",
                        num: {
                            digit: 0,
                            millesimal: !0
                        },
                        percent: {
                            digit: 0
                        }
                    };
                if (0 == s.y.length) return t.row = !1, t.col = !1, void(t.number_row = !1);
                t.subtotal = !(0 === s.x.length), s.tb_statistic = t;
                var f = l(s);
                if ("col_summary" === a) {
                    if (t.col)
                        for (var p = 0, g = s.y.length; p < g; p++) {
                            var h = s.y[p];
                            "virtual" !== h.data_type && (s.y[p].statistic_method = "SUM")
                        }
                } else if ("row_summary" === a) t.row ? (i = t.row_pos, "left" == i ? r = 0 : "right" == i && (r = s.y.length), e.tb_statistic.row_formula = "SUM", e.tb_statistic.row_setting = {
                    pos: 0 == r ? r : r || null,
                    formatter: u,
                    nick_name: "",
                    unit_adv: "",
                    description: "",
                    uniq_id: c
                }, angular.forEach(s.y, function (e) {
                    "left" === t.row_pos && t.row && e.alignment_method ? t.row_setting.alignment_method = s.y[0].alignment_method : "right" === t.row_pos && t.row && e.alignment_method && (t.row_setting.alignment_method = s.y[d - 1].alignment_method)
                })) : (n(s, f), o(s, f), e.tb_statistic.row_setting = {});
                else if ("number_row_summary" === a)
                    if (t.number_row)
                        for (var m = 0, g = (s.y || []).length; m < g; m++) {
                            var _ = s.y[m];
                            _.number_row_formula = "SUM";
                            var b = _.nick_name || _.name;
                            _.row_setting = _.row_setting ? _.row_setting : {
                                data_type: "virtual",
                                formatter: u,
                                alignment_method: "right",
                                name: b,
                                nick_name: "",
                                unit_adv: "",
                                description: "",
                                fid: "row_summary",
                                parent_uniq_id: _.uniq_id,
                                uniq_id: c + 1e3 * (m + 1)
                            }
                        } else(s.y || []).forEach(function (e, t) {
                            delete e.number_row_formula, delete e.row_setting
                        }), n(s, f, !0), o(s, f, !0);
                    else if ("sub_col_summary" === a && e.tb_statistic.subtotal) {
                    for (var v = t.subtotal_setting.dimensions.slice(0), p = 0, g = s.x.length; p < g; p++) v[p] = !!v[p];
                    t.subtotal_setting.dimensions = v.slice(0), v = []
                }
                e.handleVirtualFieldForTable(s, void 0, c), e.saveChartImmediate({
                    not_need_redraw: !1,
                    only_refresh_data: !1,
                    is_drill_chart: !!e.drill_level
                })
            }, e.canSetNumRow = function () {
                var t = e.chart_ops.meta.level[e.drill_level];
                return t.compare_axis && t.compare_axis.length && t.y.length > 0
            }, e.changeFormula = function (a, i) {
                var r, n = e.chart_ops.meta.level[e.drill_level],
                    o = n.y.length,
                    l = 0,
                    s = 0,
                    d = 0,
                    c = "zh" === bdpChart.language ? "行" : " Row ";
                if (a) {
                    var u = n.tb_statistic && n.tb_statistic.row;
                    n.y.forEach(function (e) {
                        "virtual" !== e.data_type && (s++, e.number_row_formula && e.uniq_id !== i && d++)
                    });
                    var f = n.y.some(function (e, t) {
                            return e.parent_uniq_id === i
                        }),
                        p = a;
                    if ("SUM" == a && (p = "TOTAL"), f) {
                        var g = "";
                        n.y.forEach(function (e, a) {
                            e.uniq_id == i && (g = e.nick_name || e.name), "virtual" == e.data_type && e.parent_uniq_id === i && (e.name = g + "(" + c + t[p] + ")")
                        }), n.tb_conditional_formatting && n.tb_conditional_formatting.length > 0 && e.$emit("emitChangeTableFormatting")
                    } else {
                        for (var h = 0; h < o; h++)
                            if (n.y[h].uniq_id === i) {
                                l = h, h;
                                break
                            }
                        for (var m = 0, _ = l - 1; _ >= 0; _--) n.y[_].number_row_formula && m++;
                        var b = m + s;
                        b > s + d && (b = s + d), u && "left" == n.tb_statistic.row_pos && b++;
                        var v = n.y[l].row_setting;
                        v && (v.name = (n.y[l].nick_name || n.y[l].name) + "(" + c + t[p] + ")", n.y.splice(b, 0, v))
                    }
                } else {
                    for (var h = 0, o = n.y.length; h < o; h++)
                        if (n.y[h].parent_uniq_id === i) {
                            r = n.y[h].uniq_id, n.y.splice(h, 1);
                            break
                        }
                    if (n.tb_conditional_formatting && n.tb_conditional_formatting.length > 0)
                        for (var o = n.tb_conditional_formatting.length, h = o - 1; h >= 0; h--) {
                            var y = n.tb_conditional_formatting[h];
                            y.uniq_id === r && n.tb_conditional_formatting.splice(h, 1)
                        }
                    if (n.advanced_sort && n.advanced_sort.length > 0)
                        for (var o = n.advanced_sort.length, h = o - 1; h >= 0; h--) {
                            var y = n.advanced_sort[h];
                            y.uniq_id === r && n.advanced_sort.splice(h, 1)
                        }
                    n.advanced_sort && 0 !== n.advanced_sort.length || (n.is_advanced_sort = 0)
                }
                e.saveChartImmediate()
            }, e.handleSubtotalTitle = function () {
                var t = e.chart_ops.meta.level[e.drill_level],
                    a = t.x.length,
                    i = e.tb_statistic.subtotal_setting = e.tb_statistic.subtotal_setting || {},
                    r = !1;
                e.tb_statistic.subtotal && (!i.dimensions || i.dimensions.length <= 0) && (i.dimensions = new Array(a)), s(i.dimensions) || (r = !0), e.saveChartImmediate({
                    not_need_redraw: r,
                    only_refresh_data: !0,
                    is_drill_chart: !!e.drill_level
                })
            }
        }
        return {
            link: i,
            templateUrl: "/static/partials/table_statistic.html",
            restrict: "EA"
        }
    }]), angular.module("BC.directives")
    .directive("gaugeSetting", ["ngDialog", "$timeout", "commonService", "errHint", "$jsTipTranslate", "$getCustomFormula", "chartLineType", function (e, t, a, i, r, n, o) {
        return {
            restrict: "A",
            templateUrl: "/static/partials/gauge_setting.html",
            scope: {
                opts: "=",
                save: "=",
                global: "="
            },
            link: function (t, l, s) {
                t.lineType = o, t.calcuType = n(["SUM", "AVG", "MIN", "MAX"]), t.canAddFormula = function (e) {
                    angular.forEach(t.fields, function (a, i) {
                        e === a.fid && (t.opts.meta.level[0].gauge_setting || (t.opts.meta.level[0].gauge_setting = t.gaugeSetting), t.opts.meta.level[0].gauge_setting.goal.is_new = 0 === a.is_build_aggregated || 2 === a.is_build_aggregated)
                    })
                }, t.isEnterKey = function (e, a, i) {
                    13 == e.keyCode && t.lazySaveGauge(a, i)
                }, t.lazySaveGauge = function (e, a) {
                    var r = {
                        not_need_redraw: !1,
                        only_refresh_data: !1,
                        is_drill_chart: !1
                    };
                    if ("" == e.name) return i(t.tips["chart.gaugeTitleRequired"]), e.name = t.originGaugeSetting.name, !1;
                    if ("constant" === e.goal.value_type && ["goal", "rateDigit"].indexOf(a) > -1 && "" !== e.goal.value && (e.goal.value <= 0 || isNaN(e.goal.value))) return i(t.tips["chart.goalValueInvalid"]), !1;
                    if (void 0 === e.rateDigit || e.rateDigit < 0 || e.rateDigit > 4) return i(t.tips["chart.gaugeRateDigitTip"]), !1;
                    if (angular.forEach(t.fields, function (t, a) {
                            t.fid == e.goal.fid && (e.goal.field_name = t.name, e.goal.is_new = 0 === t.is_build_aggregated || 2 === t.is_build_aggregated)
                        }), "calculate" === e.goal.value_type) {
                        if (!e.goal.fid) return i(t.tips["chart.goalFidRequired"]), !1;
                        if (e.goal.is_new && !e.goal.formula) return i(t.tips["chart.goalFormulaRequired"]), !1
                    }
                    if (e.goal.digit < 0 || e.goal.digit > 6) return i(t.tips["chart.numDigitInvalid"]), !1;
                    if (t.opts.meta.level[0].gauge_setting = e || t.gaugeSetting, "title" == a || "unit" == a) {
                        r.not_need_redraw = !0;
                        var n = $(".solidgauge-title");
                        n.find(".title:odd").text(e.name);
                        n.find(".unit").text();
                        if ("" !== t.originGaugeSetting.unit) {
                            var o = t.originGaugeSetting.unit;
                            angular.forEach(n.find(".unit"), function (t, a) {
                                var i = $(t).text().lastIndexOf(o);
                                $(t).text($(t).text().substring(0, i) + e.unit)
                            })
                        } else angular.forEach(n.find(".unit"), function (t, a) {
                            $(t).text($(t).text() + e.unit)
                        })
                    }
                    t.save(r), t.originGaugeSetting = angular.copy(e), t.showGaugeSetting = angular.copy(e)
                }, t.initGaugeData = function () {
                    var e = t.opts.meta.level[0].gauge_setting || {};
                    e.goal && void 0 === e.goal.digit && (e.goal.digit = 0), t.gaugeSetting = {
                        name: e.name || t.opts.meta.level[0].y[0].name,
                        unit: e.unit || "",
                        goal: "object" == typeof e.goal ? e.goal : {
                            digit: 0,
                            value_type: "constant",
                            value: t.opts.meta.level[0].gauge_setting ? t.opts.meta.level[0].gauge_setting.goal.value : ""
                        },
                        rateDigit: e.rateDigit || 0
                    }, t.originGaugeSetting = angular.copy(t.gaugeSetting), a.tb.getInfo(t.opts.tb_id).then(function (e) {
                        t.fields = [], angular.forEach(e.result.schema, function (e, a) {
                            "number" === e.data_type && t.fields.push({
                                name: e.name,
                                fid: e.fid,
                                data_type: e.data_type,
                                is_build_aggregated: e.is_build_aggregated
                            })
                        }), t.canAddFormula(t.gaugeSetting.goal.fid), t.showGaugeSetting = angular.copy(t.gaugeSetting)
                    })
                }, t.goalSetting = function () {
                    t.initGaugeData(), e.open({
                        templateUrl: "/static/partials/gauge_goal_setting.html",
                        className: "ngdialog-theme-default",
                        scope: t
                    })
                }, t.$watch("gaugeSetting.goal.value_type", function (e) {
                    "calculate" === e && t.calcuType[0] && (t.gaugeSetting.goal.formula = t.calcuType[0].type)
                }), t.$watch("global.chartData.total", function (e) {
                    t.showGaugeSetting && e && (t.opts.meta.level[0].gauge_setting || (t.showGaugeSetting.goal.value = e))
                }), t.initGaugeData(), r(["chart.goalFidRequired", "chart.goalFormulaRequired", "chart.gaugeRateDigitTip", "chart.gaugeTitleRequired", "chart.goalValueInvalid", "chart.numDigitInvalid"], t)
            },
            controller: ["$scope", function (e) {}]
        }
    }]), angular.module("BC.directives").directive("resizeWidthFieldsList", [function () {
        return {
            restrict: "A",
            replace: !1,
            link: function (e, t, a) {
                t.on("mousedown", function (a) {
                    var i = $(".chart-left"),
                        r = $(".chart-main"),
                        n = a.pageX - i.outerWidth();
                    a.preventDefault(), $(document).on("mousemove", function (e) {
                        var a = e.pageX - n;
                        a = Math.max(160, a), a = Math.min(300, a), i.css("width", a + "px"), r.css("margin-left", a + "px"), t.css("left", a + "px")
                    }), $(document).on("mouseup", function (t) {
                        $(document).off("mousemove"), $(document).off("mouseup"), e.$apply(function () {
                            e.draw_chart_url.options._t = (new Date).getTime()
                        })
                    })
                })
            }
        }
    }]).directive("resizeWidthFilterList", [function () {
        return {
            restrict: "A",
            replace: !1,
            link: function (e, t, a) {
                t.on("mousedown", function (a) {
                    var i = $(".chart-left-side"),
                        r = $("#chartBox"),
                        n = a.pageX - i.outerWidth();
                    a.preventDefault(), $(document).on("mousemove", function (e) {
                        var a = e.pageX - n;
                        a = Math.max(172, a), a = Math.min(300, a), i.css("width", a + "px"), r.css("left", a + "px"), t.css("left", a + "px")
                    }), $(document).on("mouseup", function (t) {
                        $(document).off("mousemove"), $(document).off("mouseup"), e.$apply(function () {
                            e.draw_chart_url.options._t = (new Date).getTime()
                        })
                    })
                })
            }
        }
    }]).directive("resizeProjectList", ["$timeout", function (e) {
        return {
            link: function (t, a, i) {
                if (localStorage) {
                    var r = localStorage.getItem("project_width");
                    r && e(function () {
                        $(".dash-sidebar").css("width", r + "px"), $(".dash-edit-content").css("padding-left", r + "px"), angular.element(".item-chart").each(function () {
                            reflowChart(angular.element(this), !0)
                        })
                    }, 0)
                }
                a.on("mousedown", function (a) {
                    var i = $(".dash-sidebar"),
                        r = $(".dash-edit-content"),
                        n = a.pageX - i.outerWidth();
                    a.preventDefault(), $(document).on("mousemove.drag_project", function (e) {
                        var t = e.pageX - n;
                        t = Math.max(190, t), t = Math.min(300, t), i.css("width", t + "px"), r.css("padding-left", t + "px"), $(".global-filter-scroll").css("margin-left", t + 24 + "px")
                    }), $(document).on("mouseup.drag_project", function (a) {
                        t.$$phase || (t.$apply(), e(function () {
                            angular.element(".item-chart").each(function () {
                                reflowChart(angular.element(this), !0)
                            })
                        }, 0)), localStorage && localStorage.setItem("project_width", i.width()), $(document).off("mousemove.drag_project"), $(document).off("mouseup.drag_project")
                    })
                })
            }
        }
    }]).directive("resizeMergeTable", function () {
        return {
            restrict: "A",
            link: function (e, t, a) {
                var i = a.leftSelector,
                    r = a.rightSelector;
                if (localStorage) {
                    var n = localStorage.getItem("ds_tree_width");
                    n && (n >>>= 0, setTimeout(function () {
                        $(i).css("width", n + "px"), $(r).css("margin-left", n + 1 + "px")
                    }, 10))
                }
                t.on("mousedown", function (e) {
                    var t = $(i),
                        a = $(r),
                        n = e.pageX - t.outerWidth();
                    e.preventDefault(), $(document).on("mousemove.drag_data_source", function (e) {
                        var i = e.pageX - n;
                        i = Math.max(100, i), i = Math.min(300, i), t.css("width", i + "px"), a.css("margin-left", i + 1 + "px")
                    }), $(document).on("mouseup.drag_data_source", function (e) {
                        localStorage && localStorage.setItem("ds_tree_width", t.width()), $(document).off("mousemove.drag_data_source"), $(document).off("mouseup.drag_data_source")
                    })
                })
            }
        }
    }), angular.module("BC.directives")
    .directive("chartDataInfo", ["$window", "commonService", "ngDialog", "commonHttp", "$filter", "$rootScope", function (e, t, a, i, r, n) {
        return {
            restrict: "A",
            templateUrl: "/static/partials/directiveTemplates/chart-data-info.html",
            controller: ["$scope", "$stateParams", "$window", "$jsTipTranslate", "errHint", "unionService", function (e, o, l, s, d, c) {
                function u(a, i) {
                    e.chartContentLoading = !0, t.tb.getMultiInfo(a).then(function (t) {
                        if (e.chartContentLoading = !1, e.tableInfoList = t.result, e.dimensionArray = [], 1 == e.dataInfo.length) e.dimensionArray.push({
                            field_id: null,
                            title: "",
                            name: "",
                            type: ""
                        }), e.tableInfoList.forEach(function (e) {
                            e.fieldList = [], e.fieldList.push({
                                fid: ""
                            })
                        }), e.setCommonDimensionDialog(i);
                        else if (e.dataInfo.length > 1) {
                            e.previousTableConfig.table.fields.forEach(function (t) {
                                2 !== t.type && 3 !== t.type || e.dimensionArray.push({
                                    field_id: t.field_id,
                                    title: t.title,
                                    name: t.name,
                                    type: t.type
                                })
                            });
                            var a = e.dimensionArray.length;
                            e.tableInfoList.forEach(function (t) {
                                t.fieldList = [], e.previousTableConfig.info.forEach(function (e) {
                                    if (t.tb_id == e.tb_id)
                                        for (var i = 0; i < a; i++) t.fieldList.push({
                                            fid: e.col_fid_list[i]
                                        })
                                })
                            }), e.tableInfoList.forEach(function (e) {
                                if (0 == e.fieldList.length)
                                    for (var t = 0; t < a; t++) e.fieldList.push({
                                        fid: ""
                                    })
                            }), "add" == i || "edit" == i ? e.setCommonDimensionDialog(i) : "delete" == i && e.sendDimensionConfig("delete")
                        }
                    })
                }

                function f() {
                    e.dataInfo.forEach(function (t) {
                        e.folderList.forEach(function (e) {
                            "folder_root" != e.folder_id && e.sub_folders.forEach(function (e) {
                                e.tb_list.forEach(function (e) {
                                    e.tb_id == t.tb_id && (e.checked = !0, e.previous = !0)
                                })
                            }), e.tb_list.forEach(function (e) {
                                e.tb_id == t.tb_id && (e.checked = !0, e.previous = !0)
                            })
                        })
                    })
                }

                function p() {
                    e.chartContentLoading = !0, i.get("/api/folder/list").then(function (t) {
                        e.chartContentLoading = !1, 0 == t.status && (e.folderList = t.result, a.open({
                            template: "/static/partials/dialogTemplates/check-table-list.html",
                            className: "ngdialog-theme-default ngDialog-width-356 ngdialog-check-table",
                            scope: e
                        }), f())
                    })
                }

                function g(i, r) {
                    e.chartContentLoading = !0, t.chart.tableUnion(i).then(function (i) {
                        if (0 == i.status)
                            if (1 != e.dataInfo.length || "add" != r && "delete" != r) a.closeAll(), l.location.reload();
                            else {
                                var n;
                                "add" == r ? n = i.result.tb_id : "delete" == r && (n = e.dataInfo[0].tb_id), t.chart.modifyTb(o.chartId, n).success(function (t) {
                                    e.chartContentLoading = !1, 0 == t.status ? l.location.reload() : d(Number(t.status))
                                })
                            }
                        else e.chartContentLoading = !1
                    })
                }
                t.chart.getDbInfo(o.chartId).success(function (t) {
                    0 == t.status ? e.dataInfo = t.result : errorHandle(t)
                }), e.getDBList = function () {
                    t.tb.getList().then(function (t) {
                        e.db_list = t
                    })
                }, e.previewData = function (i, o) {
                    n.pageLoading = !0, t.tb.preview({
                        tb_id: i
                    }).then(function (l) {
                        n.pageLoading = !1, l && (l.tableName = o, l.latestData = l.data.length, l.totalData = l.count, l.generateCoordinateStatus = l.has_gis, 2 == l.has_gis && t.tb.gisModify({
                            tb_id: i
                        }), l.tableUpdateTime = r("date")(1e3 * l.update_time, "yyyy-MM-dd HH:mm:ss"), l.currentStatus = "", 3 == l.status || 6 == l.status ? l.currentStatus = e.tips["wb.isUpdatingWaiting"] : 2 == l.status && (l.currentStatus = e.tips["wb.updateFailed"]), a.open({
                            template: "/static/partials/dialogTemplates/preview-table-data.html",
                            className: "ngdialog-theme-default chart-preview-data",
                            data: l,
                            scope: e,
                            controller: ["$scope", "$timeout", "$element", function (e, t, a) {
                                function i() {
                                    s = 0, $(n).children("td").each(function (e, t) {
                                        var a = parseInt($(t).width() + 4);
                                        $(l[e]).width(a)
                                    })
                                }
                                var r, n, o, l, s;
                                t(function () {
                                    a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), r = a.find(".table-scroll"), n = a.find(".table-scroll").find("tbody").find("tr")[0], o = a.find(".J-table-fixhead").find("thead").find("tr")[0], l = $(o).children("th"), i(), r.scroll(function (e) {
                                        a.find(".table-fixhead").css({
                                            left: -e.target.scrollLeft + "px"
                                        })
                                    })
                                }, 100);
                                $(window).resize(function () {
                                    clearTimeout(void 0), setTimeout(function () {
                                        a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), i()
                                    }, 10)
                                })
                            }]
                        }))
                    })
                }, e.addWorkTable = function () {
                    1 == e.dataInfo.length ? (p(), e.previousTableConfig = {
                        info: [{
                            tb_id: e.dataInfo[0].tb_id
                        }]
                    }) : e.dataInfo.length > 1 && (e.chartContentLoading = !0, t.tb.getModelStruct(e.tb_id).then(function (t) {
                        e.chartContentLoading = !1, e.previousTableConfig = t.result, p()
                    }))
                }, e.removeWorkTable = function (i, r) {
                    e.currentDeletingTableId = i, a.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: e.tips["chart.confirmDeleteWorktable"]
                        }
                    }).then(function () {
                        var a = {
                            tb_ids: []
                        };
                        e.dataInfo.forEach(function (e) {
                            e.tb_id != i && a.tb_ids.push(e.tb_id)
                        }), a.tb_ids = JSON.stringify(a.tb_ids), e.chartContentLoading = !0, t.tb.getModelStruct(e.tb_id).then(function (t) {
                            e.chartContentLoading = !1, e.previousTableConfig = t.result, u(a, "delete")
                        })
                    }), r.stopPropagation()
                }, e.switchWorkTable = function (r, n) {
                    a.open({
                        template: "/static/partials/choose-table-list.html",
                        className: "ngdialog-theme-default data-source choose-table-list",
                        data: {
                            json_data: {
                                title: e.tips["chart.chooseWorktable"],
                                type: "choose",
                                show_upload: !1
                            },
                            choose_table: {
                                tb_id: ""
                            }
                        },
                        scope: e,
                        controller: ["$scope", function (e) {
                            e.loadingTableList = !0, i.get("/api/folder/list").then(function (t) {
                                e.loadingTableList = !1, 0 == t.status && (e.folderList = t.result, e.original_folderList = angular.copy(t.result), e.$broadcast("updatefolderList", e.original_folderList))
                            }), e.getWorktable = function (a, i) {
                                return !(a.unfolded || a.open === !0 || a.tb_list.length > 0 || a.mark === !1) && (a.mark && a.sub_folders && a.sub_folders.forEach(function (e) {
                                    e.hide = !1
                                }), i && i.stopPropagation(), a.loadingWorktables = !0, t.folder.getWorktable({
                                    folder_id: a.folder_id
                                }).then(function (t) {
                                    a.loadingWorktables = !1, e.saveFolderList.forEach(function (e) {
                                        e.folder_id == a.folder_id && 0 == e.tb_list.length && (t.result.forEach(function (t) {
                                            e.tb_list.push(t)
                                        }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                            i.folder_id == a.folder_id && 0 == i.tb_list.length && (t.result.forEach(function (e) {
                                                i.tb_list.push(e)
                                            }), i.unfolded = !0, i.open = !0, e.open = !0)
                                        })
                                    })
                                }))
                            }
                        }]
                    }), n.stopPropagation()
                }, e.chooseTableOk = function (i) {
                    a.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: e.tips["chart.confirmSwitchTable"]
                        }
                    }).then(function () {
                        a.closeAll(), e.chartContentLoading = !0, t.chart.modifyTb(o.chartId, i.tb_id).success(function (t) {
                            e.chartContentLoading = !1, 0 == t.status ? l.location.reload() : d(Number(t.status))
                        })
                    })
                }, e.openSetCommonDimensionDialog = function (t) {
                    if (e.checkedTableToAdd = [], e.previousTableConfig && e.previousTableConfig.info.length > 0 && e.previousTableConfig.info.forEach(function (t) {
                            e.checkedTableToAdd.push(t.tb_id)
                        }), e.folderList.forEach(function (t) {
                            "folder_root" != t.folder_id && t.sub_folders.forEach(function (t) {
                                t.tb_list.forEach(function (t) {
                                    t.checked && !t.previous && e.checkedTableToAdd.push(t.tb_id)
                                })
                            }), t.tb_list.forEach(function (t) {
                                t.checked && !t.previous && e.checkedTableToAdd.push(t.tb_id)
                            })
                        }), e.checkedTableToAdd.length <= 0) return d(e.tips["chart.chooseAtLeaseOneWorktable"]), !1;
                    a.closeAll(), u({
                        tb_ids: JSON.stringify(e.checkedTableToAdd)
                    }, t)
                }, e.filterSelectType = function (e) {
                    return 2 == e.type || 3 == e.type
                }, e.updateInputValue = function (t, a, i) {
                    var r, n, o = i,
                        l = !1;
                    if (e.tableInfoList[a].fieldList.forEach(function (i, r) {
                            i.fid == o && r != t && (d("您已选择过该字段"), e.tableInfoList[a].fieldList[t].fid = "", l = !0)
                        }), l) return !1;
                    e.tableInfoList[a].schema.forEach(function (e) {
                        e.fid == o && (r = e.name, n = e.type)
                    });
                    var s = 0;
                    if (e.tableInfoList.forEach(function (e) {
                            e.fieldList[t].fid && (s += 1)
                        }), n != e.dimensionArray[t].type && "" != e.dimensionArray[t].type && 1 != s) {
                        var c;
                        2 == e.dimensionArray[t].type ? c = e.tips.text : 3 == e.dimensionArray[t].type && (c = e.tips.date), d(e.tips["chart.chartTitleWarningOne"] + c + e.tips["chart.chartTitleWarningTwo"]), e.tableInfoList[a].fieldList.forEach(function (e) {
                            e.fid == o && (e.fid = "")
                        })
                    }
                    e.dimensionArray[t].name && 1 != s || (e.dimensionArray[t].name = r || "", e.dimensionArray[t].type = n || ""), e.dimensionArray[t].title || (e.dimensionArray[t].title = r || "")
                }, e.editDimension = function () {
                    e.chartContentLoading = !0, t.tb.getModelStruct(e.tb_id).then(function (t) {
                        e.previousTableConfig = t.result, i.get("/api/folder/list").then(function (t) {
                            e.chartContentLoading = !1, 0 == t.status && (e.folderList = t.result, f(), e.openSetCommonDimensionDialog("edit"))
                        })
                    })
                }, e.addNewColumn = function () {
                    var t = {
                        field_id: null,
                        title: "",
                        name: "",
                        type: ""
                    };
                    e.dimensionArray.push(t), e.tableInfoList.forEach(function (e) {
                        e.fieldList.push({
                            fid: ""
                        })
                    });
                    var a = $(".ngdialog-set-common-dimension .ngdialog-message"),
                        i = a.scrollLeft();
                    a.animate({
                        scrollLeft: i + 200
                    }, 100)
                }, e.removeColumn = function (t) {
                    if (1 == e.dimensionArray.length) return d("需至少有一个公共维度"), !1;
                    e.dimensionArray.splice(t, 1), e.tableInfoList.forEach(function (e) {
                        e.fieldList.splice(t, 1)
                    })
                }, e.setCommonDimensionDialog = function (t) {
                    a.open({
                        template: "/static/partials/dialogTemplates/set-common-dimension.html",
                        className: "ngdialog-theme-default ngdialog-width-712 ngdialog-set-common-dimension",
                        scope: e,
                        data: {
                            operationMode: t
                        }
                    })
                }, e.sendDimensionConfig = function (t) {
                    e.union_info = {
                        dimension_num: e.dimensionArray.length,
                        tb_list: [],
                        schema: []
                    };
                    var i = 0,
                        r = !0,
                        n = !0;
                    if (e.dimensionArray.forEach(function (e) {
                            e.title || (n = !1)
                        }), !n) return d(e.tips["chart.fieldTitleRequired"]), !1;
                    if (e.tableInfoList.forEach(function (t) {
                            var a = {
                                tb_id: t.tb_id,
                                tb_name: t.tb_name || t.name,
                                col_fid_list: [],
                                metric_num: 0
                            };
                            t.fieldList.forEach(function (e) {
                                e.fid ? a.col_fid_list.push(e.fid) : r = !1
                            }), t.schema.forEach(function (t) {
                                0 !== t.type && 1 !== t.type || (a.col_fid_list[i + e.union_info.dimension_num] = t.fid, a.metric_num += 1, i += 1)
                            }), e.union_info.tb_list.push(a)
                        }), !r) return d(e.tips["chart.chooseAllFields"]), !1;
                    if (e.union_info.tb_list.forEach(function (t) {
                            for (var a = e.union_info.dimension_num, r = i + e.union_info.dimension_num; a < r; a++) t.col_fid_list[a] = t.col_fid_list[a] ? t.col_fid_list[a] : ""
                        }), e.dimensionArray.forEach(function (t) {
                            var a = {
                                field_id: t.field_id || "",
                                title: t.title,
                                name: t.name,
                                type: t.type
                            };
                            e.union_info.schema.push(a)
                        }), 1 == e.dataInfo.length) e.tableInfoList.forEach(function (t) {
                        t.schema.forEach(function (a) {
                            if (0 === a.type || 1 === a.type) {
                                var i = {
                                    field_id: null,
                                    title: a.name + "_" + t.tb_name,
                                    name: a.original_name + "_" + t.tb_name,
                                    type: a.type
                                };
                                e.union_info.schema.push(i)
                            }
                        })
                    });
                    else {
                        if ("delete" == t) {
                            var o = 0;
                            e.previousTableConfig.info.forEach(function (t) {
                                var a = 0;
                                t.fields.forEach(function (e) {
                                    0 !== e.type && 1 !== e.type || (a += 1)
                                }), t.tb_id == e.currentDeletingTableId && e.previousTableConfig.table.fields.splice(e.dimensionArray.length + o, a), o += a
                            })
                        }
                        e.previousTableConfig.table.fields.forEach(function (t) {
                            if (0 === t.type || 1 === t.type) {
                                var a = {
                                    field_id: t.fid || "",
                                    title: t.title,
                                    name: t.name,
                                    type: t.type
                                };
                                e.union_info.schema.push(a)
                            }
                        });
                        var l = [];
                        e.tableInfoList.forEach(function (t) {
                            var a = !0;
                            e.previousTableConfig.info.forEach(function (e) {
                                e.tb_id == t.tb_id && (a = !1)
                            }), a && l.push(t)
                        }), l.forEach(function (t) {
                            t.schema.forEach(function (a) {
                                if (0 === a.type || 1 === a.type) {
                                    var i = {
                                        field_id: null,
                                        title: a.name + "_" + t.tb_name,
                                        name: a.original_name + "_" + t.tb_name,
                                        type: a.type
                                    };
                                    e.union_info.schema.push(i)
                                }
                            })
                        })
                    }
                    var s = {
                        union_info: JSON.stringify(e.union_info),
                        tb_id: ""
                    };
                    if (e.dataInfo.length > 1 && (s.tb_id = e.tb_id), s.tb_id) {
                        var u = "delete" == t ? 0 : 1;
                        c.tableUnionPreview(JSON.parse(s.union_info), "", s.tb_id, "", u).then(function (i) {
                            0 == i.status && (1 == i.result.can_del ? ("delete" == t && e.dataInfo.forEach(function (t, a) {
                                t.tb_id == e.currentDeletingTableId && e.dataInfo.splice(a, 1)
                            }), g(s, t)) : (e.dependencyFields = i.result.dependency, a.openConfirm({
                                template: "/static/partials/dialogTemplates/delete_table_dependency.html",
                                className: "ngdialog-theme-default ngDialog-width-300",
                                scope: e,
                                data: {
                                    message: e.tips["chart.deleteTableDependencyWarning"]
                                }
                            })))
                        })
                    } else g(s, t)
                }, s(["chart.confirmSwitchTable", "wb.isUpdatingWaiting", "wb.updateFailed", "text", "date", "chart.confirmDeleteWorktable", "chart.chooseWorktable", "chart.chooseAtLeaseOneWorktable", "chart.chooseAllFields", "chart.chartTitleWarningOne", "chart.chartTitleWarningTwo", "chart.deleteTableDependencyWarning", "chart.fieldTitleRequired"], e)
            }]
        }
    }]),
    function () {
        angular.module("BC.directives").directive("customChartDataInfo", ["$window", "commonService", "ngDialog", "commonHttp", "$filter", "$rootScope", function (e, t, a, i, r, n) {
            return {
                restrict: "A",
                templateUrl: "/static/partials/directiveTemplates/custom_chart_data_info.html",
                controller: ["$scope", "$stateParams", "$window", "$jsTipTranslate", "errHint", "unionService", function (e, o, l, s, d, c) {
                    e.toggleMoreAction = function (e) {
                        var t = $(e.target).siblings(".more-dropdown");
                        t.toggleClass("hidden"), t.hasClass("hidden") || setTimeout(function () {
                            $(document).one("click.more-dropdown", function () {
                                t.addClass("hidden")
                            })
                        }, 0)
                    }, e.previewData = function (i, o, l) {
                        n.pageLoading = !0, t.tb.preview({
                            tb_id: i
                        }).then(function (l) {
                            n.pageLoading = !1, l && (l.tableName = o, l.latestData = l.data.length, l.totalData = l.count, l.generateCoordinateStatus = l.has_gis, 2 == l.has_gis && t.tb.gisModify({
                                tb_id: i
                            }), l.tableUpdateTime = r("date")(1e3 * l.update_time, "yyyy-MM-dd HH:mm:ss"), l.currentStatus = "", 3 == l.status || 6 == l.status ? l.currentStatus = e.tips["wb.isUpdatingWaiting"] : 2 == l.status && (l.currentStatus = e.tips["wb.updateFailed"]), a.open({
                                template: "/static/partials/dialogTemplates/preview-table-data.html",
                                className: "ngdialog-theme-default chart-preview-data",
                                data: l,
                                scope: e,
                                controller: ["$scope", "$timeout", "$element", function (e, t, a) {
                                    function i() {
                                        s = 0, $(n).children("td").each(function (e, t) {
                                            var a = parseInt($(t).width() + 4);
                                            $(l[e]).width(a)
                                        })
                                    }
                                    var r, n, o, l, s;
                                    t(function () {
                                        a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), r = a.find(".table-scroll"), n = a.find(".table-scroll").find("tbody").find("tr")[0], o = a.find(".J-table-fixhead").find("thead").find("tr")[0], l = $(o).children("th"), i(), r.scroll(function (e) {
                                            a.find(".table-fixhead").css({
                                                left: -e.target.scrollLeft + "px"
                                            })
                                        })
                                    }, 100);
                                    $(window).resize(function () {
                                        clearTimeout(void 0), setTimeout(function () {
                                            a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), i()
                                        }, 10)
                                    })
                                }]
                            }))
                        })
                    }, e.switchWorkTable = function (t, r) {
                        a.open({
                            template: "/static/partials/choose-table-list.html",
                            className: "ngdialog-theme-default data-source choose-table-list",
                            data: {
                                json_data: {
                                    title: e.tips["chart.chooseWorktable"],
                                    type: "choose",
                                    show_upload: !1
                                },
                                choose_table: {
                                    tb_id: ""
                                }
                            },
                            scope: e,
                            controller: ["$scope", function (e) {
                                e.loadingTableList = !0, i.get("/api/folder/list").then(function (t) {
                                    e.loadingTableList = !1, 0 == t.status && (e.folderList = t.result, e.original_folderList = angular.copy(t.result), e.$broadcast("updatefolderList", e.original_folderList))
                                })
                            }]
                        }), r.stopPropagation()
                    };
                    var u;
                    e.onDragTb = function (e, t, a) {
                        u = a
                    }, e.onDropTb = function (t, a) {
                        u && e.addView(u)
                    }, e.chooseTableOk = function (i) {
                        a.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-300",
                            scope: e,
                            data: {
                                message: e.tips["chart.confirmSwitchTable"]
                            }
                        }).then(function () {
                            a.closeAll(), e.chartContentLoading = !0, t.chart.modifyTb(o.chartId, i.tb_id).success(function (t) {
                                e.chartContentLoading = !1, 0 == t.status ? l.location.reload() : d(Number(t.status))
                            })
                        })
                    }, s(["chart.confirmSwitchTable", "wb.isUpdatingWaiting", "wb.updateFailed", "text", "date", "chart.confirmDeleteWorktable", "chart.chooseWorktable", "chart.chooseAtLeaseOneWorktable", "chart.chooseAllFields", "chart.chartTitleWarningOne", "chart.chartTitleWarningTwo", "chart.deleteTableDependencyWarning", "chart.fieldTitleRequired"], e)
                }]
            }
        }])
    }(),
    function () {
        angular.module("BC.directives").directive("operateName", ["$timeout", "$rootScope", function (e, t) {
            return {
                restrict: "A",
                scope: {
                    onCommit: "&",
                    onDelete: "&",
                    ws: "="
                },
                templateUrl: "/static/partials/directiveTemplates/operateName.html",
                link: function (a, i, r) {
                    function n() {
                        if (a.inputVal) {
                            var e = {
                                ws_id: a.ws.ws_id,
                                name: a.inputVal
                            };
                            a.onCommit(e) && (a.text = e.name), a.mode = "cat"
                        }
                    }
                    a.editable = !1, a.$watch(function () {
                        return t.role
                    }, function (e) {
                        "s_admin" == e && (a.editable = !0)
                    }), a.$watch("ws", function (e) {
                        e && (a.mode = "cat", a.text = a.inputVal = a.ws.name)
                    }), i.find("input").on("click", function (e) {
                        e.stopPropagation()
                    }).on("blur", function () {
                        e(function () {
                            a.mode = "cat"
                        }, 500)
                    }).on("keypress", function (e) {
                        13 === e.keyCode && n()
                    }), a.save = function (e) {
                        e.stopPropagation(), a.ws.name != a.inputVal ? n() : a.mode = "cat"
                    }, a.edit = function (e) {
                        e.stopPropagation(), a.mode = "modify", a.inputVal = a.text
                    }, a.del = function (e) {
                        e.stopPropagation();
                        var t = {
                            ws_id: a.ws.ws_id
                        };
                        a.onDelete(t)
                    }
                }
            }
        }])
    }(),
    function () {
        function e() {
            function e(e, t, a) {}
            return {
                templateUrl: "/static/partials/directiveTemplates/doubleYaxisChartTypeTpl.html",
                restrict: "EA",
                link: e,
                controller: t,
                scope: {
                    chartOps: "=",
                    warnSetting: "=",
                    type: "=",
                    save: "=",
                    drillLevel: "="
                },
                controllerAs: "vm",
                bindToController: !0
            }
        }

        function t(e) {
            e.types = ["C220", "C210", "C211", "C212"], e.meta = e.chartOps.meta, e.yaxis = e.type, e.changeType = function (t) {
                e.meta.level[e.drillLevel].type_optional[e.yaxis] = t, e.save(), e.showType = !1
            }
        }
        angular.module("BC.directives")
        .directive("doubleYaxisChartType", e), t.$inject = ["$scope", "commonHttp"]
    }(), 
    angular.module("BC.directives")
    .directive("errorReport", ["$timeout", "$jsTipTranslate", "$translate", function (e, t, a) {
        return {
            restrict: "A",
            scope: {
                onExcel: "&",
                tbid: "=",
                data: "="
            },
            templateUrl: "/static/partials/directiveTemplates/error_report.html",
            controller: ["$scope", function (e) {
                function t(e) {
                    r.report = e, r.reportType = "", r.reportJoinTable = [], r.reportJoinTableVal = 0;
                    var t = r.reportJoinTable;
                    angular.forEach(e, function (e, a) {
                        e.count = e.duplicated.count + e.empty.count, e.duplicatedCount = e.duplicated.count, e.emptyLen = e.empty.count, t.push({
                            id: a,
                            name: e.left_tb.title + "-" + e.right_tb.title
                        })
                    }), a()
                }

                function a() {
                    if (0 != r.reportJoinTable.length) {
                        var e, t, a = 0,
                            i = 0,
                            n = r.reportType;
                        switch (a = r.report[r.reportJoinTableVal].duplicated.count, i = r.report[r.reportJoinTableVal].empty.count, e = 0, t = 0, n) {
                            case "duplicated":
                                t = a, a = a < 50 ? a : 50, e = a;
                                break;
                            case "empty":
                                t = i, i = i < 50 ? i : 50, e = i;
                                break;
                            default:
                                t = a + i, a = a < 50 ? a : 50, a >= 50 ? i = 0 : a + i > 50 && (i = 50 - a), e = a + i
                        }
                        r.duplicatedIndex = a, r.emptyIndex = i, r.curTotal = e, r.total = t
                    }
                }

                function i(t) {
                    e.errorReport.stage = 1;
                    var a = t.data.check_report.report,
                        i = [];
                    angular.forEach(a, function (e) {
                        i.push(e.left_tb + " -- " + e.right_tb + "重复条数" + e.expand_count)
                    }), e.errorReport.report2 = i
                }
                e.dataType = "", e.errorReport = {};
                var r = e.errorReport;
                e.$watch("data", function (e) {
                    e && (1 == e.stage ? i(e) : t(e))
                }), e.changeType = function () {
                    a()
                }, e.changeSelect = function () {
                    a()
                }, e.exportExcel = function () {
                    e.onExcel()
                }
            }]
        }
    }]), 
    angular.module("BC.directives").directive("navWorkspace", [
        "$window", "$location", "$rootScope", "$stateParams", "commonService", "commonHttp", 
        "$timeout", "ngDialog", "$jsTipTranslate", "$state", "errHint", function (e, t, a, i, r, n, o, l, s, d, c) {
        return {
            restrict: "A",
            transclude: !0,
            replace: !0,
            templateUrl: "/static/js/common/tpl/directive/navWorkspace.html",
            link: function (e, t) {
                s(["dash.projectNameRequired"], e)
            },
            controller: ["$scope", "$rootScope", "$timeout", function (e, a, i) {
                function r(t) {
                    if (t) {
                        var i = a.view,
                            r = [];
                        switch (i) {
                            case "dashboard":
                            case "chart_edit":
                            case "warn":
                            case "personal":
                                r = t.dash;
                                break;
                            case "worktable":
                                r = t.worktable;
                                break;
                            case "template":
                            case "template_config":
                            case "template_rule":
                                r = t.template
                        }
                        e.curWsList = r
                    }
                }

                function o(e) {
                    var t = $(".nav-workspace-list > ul"),
                        a = parseInt(t.css("width"));
                    if (t.get(0).scrollWidth && t.get(0).scrollWidth > a) {
                        var i = e,
                            r = i.offset().left,
                            n = i.offset().left + parseInt(i.css("width"));
                        a + 64 >= r && a + 64 < n && (t.get(0).scrollLeft = n - (a + 64)), a + 64 < r && (t.get(0).scrollLeft = n - (a + 64))
                    }
                }
                e.$watch(function () {
                    return a.workspaceList
                }, function (t) {
                    t && i(function () {
                        a.workspaceList = a.workspaceList || [];
                        var t = a.workspaceList.length,
                            i = $(".nav-workspace-list > ul > li");
                        angular.forEach(i, function (a, i) {
                            $(a).css("z-index", t--), $(a).hasClass("active") && e.scrollLeftToNav($(a))
                        })
                    }, 200)
                }), a.$watch("workspaceList", function (e) {
                    e && r(e)
                }, !0), r(a.workspaceList), "dashboard" == a.view && a.$watch("wsId", function (t) {
                    var i = void 0;
                    t ? i = void 0 : e.curWsList && e.curWsList.map(function (e) {
                        e.ws_id == t && (i = e.admin)
                    }), a.wsAdmin = i
                }), e.tabWorkspace = function (i, r, o) {
                    if (r != a.wsId) {
                        if ("warning" == a.view) return void c("预警信息界面暂不支持切换工作区");
                        a.wsId = r;
                        var l = "";
                        t.path().indexOf("dash_edit") > -1 ? l = r ? "ws_dash" : "dash_edit" : t.path().indexOf("data_source") > -1 ? l = r ? "data_source_ws" : "data_source" : t.path().indexOf("template_home") > -1 ? l = r ? "template_home_ws" : "template_home" : t.path().indexOf("template_config") > -1 ? l = r ? "template_home_ws" : "template_home" : t.path().indexOf("template_rule") > -1 ? l = r ? "template_home_ws" : "template_home" : t.path().indexOf("warn") > -1 && (l = r ? "ws_dash" : "dash_edit"), a.wsAdmin = o, d.go(l, {
                            wsId: r
                        }), e.scrollLeftToNav($(i.target).parent(".workspace-nav").parent("li")), a.unread = 0, n.get("/api/warn/amount").then(function (e) {
                            "0" === e.status && (a.unread = e.result.unread)
                        })
                    }
                }, e.scrollLeftToNav = o
            }]
        }
    }]),
    function () {
        function e(e) {
            function t(t, a, i) {
                function r(e) {
                    var t = {},
                        a = -30 * Math.PI / 180;
                    l.width = e.width * Math.cos(a) + Math.abs(e.height / Math.sin(a)), l.height = e.width * Math.abs(Math.sin(a)) + Math.abs(e.height / Math.cos(a)), t.x = -l.height * Math.abs(Math.sin(a)) + 20, t.y = l.height - e.height;
                    var i = l.getContext("2d");
                    i.textAlign = "left", i.font = "normal " + e.fontSize + "px Microsoft Yahei";
                    var r = "rgba(0,0,0,0.08)";
                    "dash" !== e.mode && (r = "rgba(255,255,255,0.08)"), i.fillStyle = r, i.textBaseline = "top", i.rotate(a), i.fillText(e.text, t.x, t.y);
                    var n = Canvas2Image.convertToPNG(l, l.width, l.height).src;
                    return i.clearRect(0, 0, l.width, l.height), n
                }

                function n() {
                    var t = $(a).find("span"),
                        i = {};
                    return e.permision.isAuthorized ? i.text = e.global.authInfoName || "" : i.text = e.global.domain + "_" + e.global.username, i.fontSize = 16, t.text(i.text), t.css({
                        "font-size": i.fontSize + "px",
                        "font-family": "Microsoft Yahei"
                    }), i.width = t.width(), i.height = t.height(), i
                }

                function o() {
                    var t = n();
                    e.global.dshWatermarkImg = r({
                        text: t.text,
                        width: t.width,
                        height: t.height,
                        fontSize: t.fontSize,
                        mode: "dash"
                    }), e.global.fullscreenWatermarkImg = r({
                        text: t.text,
                        width: t.width,
                        height: t.height,
                        fontSize: t.fontSize,
                        mode: "fullscreen"
                    });
                    var i = ".water-mark-dark{background:url(" + e.global.dshWatermarkImg + ")} .water-mark-white{background:url(" + e.global.fullscreenWatermarkImg + ")}";
                    $(document).find("head").append('<style id="watermarkStyle">' + i + "</style>"), $(a).remove()
                }
                var l = $(a).find("canvas")[0];
                e.$watch("global.watterMark", function (e) {
                    e && o()
                })
            }
            return {
                restrict: "A",
                template: "<canvas></canvas><span></span>",
                link: t
            }
        }
        angular.module("BC.directives").directive("waterMark", e), 
        e.$inject = ["$rootScope"]
    }(),
    function () {
        function e(e, t, a, i, r, n, o, l) {
            function s(l, s, d) {
                function c() {
                    l.showDateAdvanceEdit ? l.view = "dateAdvance" : (l.view = "globalFilter", l.GF.getFilterItems(), l.showBaseLoading = !1)
                }

                function u(e) {
                    l.fieldMap = {}, angular.forEach(e.tb_list, function (e, t) {
                        angular.forEach(e.fields, function (e, t) {
                            l.fieldMap[e.fid] = e.data_type
                        })
                    })
                }
                var f = 0;
                l.showDateAdvanceEdit = !1, l.view = "globalFilter", l.new_add_df_name = "", l.prevGlobalSave = function () {
                    function e(t) {
                        return t.map(function (t) {
                            var a = t.df_id,
                                i = l.filterStatus[a];
                            t.df_id = 0 === a.indexOf("new") ? "" : a, t.name = i.name, t.config = i.config, t.data_type = i.data_type, "string" == i.data_type ? t.type = 1 : t.type = 2, t.selected_charts = [], t.selected_tables = {}, angular.forEach(i.charts, function (e, a) {
                                !!e.selected && t.selected_charts.push(e.ct_id)
                            }), angular.forEach(i.tables, function (e, a) {
                                !!e.show && (t.selected_tables[e.tb_id] = e.selected)
                            }), o = t.data_type, s = t.config.granularity, "date" == o && "" == s ? (t.config.default_select = !1, t.config.range && (t.config.default_select = !0)) : t.config.range = "", t.items && t.items.length > 0 ? t.items = e(t.items) : t.items = []
                        }), t
                    }

                    function a(e) {
                        for (var t = 0; t < e.length; t++) {
                            var i = e[t],
                                n = Object.keys(i.selected_tables);
                            i.selected_tables[n[0]] || (r(i.name + ": " + l.tips["dash.gfTableAndFieldRequired"]), d = !1);
                            var o = l.fieldMap[i.selected_tables[n[0]]];
                            for (var s in i.selected_tables) i.selected_tables.hasOwnProperty(s) && o !== l.fieldMap[i.selected_tables[s]] && (r(i.name + ": " + l.tips["dash.gfFieldTypeMustBeSame"]), d = !1);
                            i.items && i.items.length > 0 && a(i.items)
                        }
                    }
                    var n = angular.copy(l.filterData.dsh_filter_list),
                        o = "",
                        s = "";
                    n = e(n);
                    var d = !0;
                    if (a(n), d) return l.showBaseLoading = !0, i.post("/api/dsh_filter/commit", {
                        dsh_id: t.dashId,
                        data: angular.toJson(n)
                    }).then(function (e) {
                        return "0" == e.status || (r(Number(e.status)), !1)
                    })
                }, l.goDateAdvanceEdit = function () {
                    var e = l.prevGlobalSave();
                    e && e.then(function (e) {
                        if (e) {
                            if (!l.new_add_df_name) return l.showDateAdvanceEdit = !0, $(".ngdialog-close").css("display", "none"), l.$broadcast("showDateAdvanceEdit", l.showDateAdvanceEdit), void c();
                            a.dash_global_filter.list({
                                dash_id: t.dashId,
                                rule_id: l.ruleId
                            }).success(function (e) {
                                if (l.showBaseLoading = !1, "0" == e.status) {
                                    l.GF.initChartsAndTables(e.result), l.getInitialData = !1;
                                    var t = e.result.dsh_filter_list;
                                    t && t.length > 0 && (angular.forEach(e.result.dsh_filter_list, function (e) {
                                        e.name == l.new_add_df_name && (l.filterView.selected_opt = e.df_id)
                                    }), l.showDateAdvanceEdit = !0, $(".ngdialog-close").css("display", "none"), l.$broadcast("showDateAdvanceEdit", l.showDateAdvanceEdit), c())
                                } else r(Number(e.status))
                            })
                        }
                    })
                }, l.$on("hideDateAdvanceEdit", function (e, t) {
                    t && (l.showDateAdvanceEdit = !1, c())
                }), l.allCharts = {}, l.getInitialData = !0, l.filterData = {}, l.filterView = {
                    model: "",
                    editFilter: {}
                }, l.goHelp = function (e) {
                    n(e)
                }, l.GF = {
                    add: function () {
                        l.filterView.isCreating || (l.filterView.editName = ""), l.filterView.isCreating = !0, setTimeout(function () {
                            $("#add_input").focus()
                        }, 300), f++
                    },
                    initChartTableMap: function () {
                        l.chartTableMap = {};
                        var e;
                        angular.forEach(l.dashStandardItems, function (t, a) {
                            e = t.children[0].meta, l.chartTableMap[e.ct_id] = e.tb_id || e.tb_ids
                        })
                    },
                    initChartsAndTables: function (e, t) {
                        function a(e) {
                            for (var t = 0, i = e.length; t < i; t++) {
                                var r = e[t];
                                l.filterStatus[r.df_id] = {
                                    name: r.name,
                                    charts: angular.copy(l.charts),
                                    tables: angular.copy(l.tables),
                                    config: r.config || {},
                                    data_type: ""
                                }, r.hasOwnProperty("items") || (r.items = []), 2 == r.type ? l.filterStatus[r.df_id].data_type = "date" : 1 == r.type && (l.filterStatus[r.df_id].data_type = "string"), l.GF.initSelectedStatus(r), r.items && r.items.length > 0 && a(r.items)
                            }
                            return e
                        }
                        l.charts = [];
                        var i;
                        angular.forEach(l.dashStandardItems, function (e, t) {
                            i = e.children[0].meta, 0 != i.ct_type && 7 != i.ct_type && 8 != i.ct_type || l.charts.push({
                                name: i.name,
                                ct_id: i.ct_id,
                                tb_id: i.tb_id,
                                is_gis: "C400" == i.type,
                                selected: !1
                            })
                        }), l.tables = [], angular.forEach(e.tb_list, function (e, t) {
                            l.tables.push({
                                show: !1,
                                name: e.name,
                                fields: e.fields,
                                tb_id: e.tb_id,
                                selected: ""
                            })
                        }), l.filterStatus = {}, l.filterData = e, u(e), l.GF.initChartTableMap(), l.filterData.dsh_filter_list.length && (a(l.filterData.dsh_filter_list), t && (l.filterView.selected_opt = l.filterData.dsh_filter_list[0].df_id))
                    },
                    initSelectedStatus: function (e) {
                        angular.forEach(l.charts, function (t, a) {
                            l.filterStatus[e.df_id].charts[a].selected = $.inArray(t.ct_id, e.selected_charts) > -1
                        }), angular.forEach(l.tables, function (t, a) {
                            l.filterStatus[e.df_id].tables[a].show = !!e.selected_tables[t.tb_id], l.filterStatus[e.df_id].tables[a].selected = e.selected_tables[t.tb_id] || ""
                        })
                    },
                    updateStatus: function (e) {
                        var t = l.filterStatus[l.filterView.selected_opt].charts,
                            a = l.filterStatus[l.filterView.selected_opt].tables,
                            i = l.chartTableMap[e.ct_id],
                            r = function (e) {
                                for (var t = 0; t < a.length; t++) i.indexOf(a[t].tb_id) >= 0 && (a[t].show = e)
                            };
                        if (e.selected) l.changeCheckAll(!0), r(!0);
                        else {
                            l.changeCheckAll(!1);
                            for (var n = 0; n < t.length; n++)
                                if (r(!1), t[n].tb_id && i.indexOf(t[n].tb_id) >= 0 && t[n].selected) return r(!0), !1
                        }
                        l.GF.checkDataType()
                    },
                    checkAllCharts: function (e) {
                        l.allCharts[l.filterView.selected_opt] = e, l.isSelectingAllCharts = !0, angular.forEach(l.filterStatus[l.filterView.selected_opt].charts, function (t) {
                            t.selected = e, l.GF.updateStatus(t)
                        }), l.allCharts[l.filterView.selected_opt] && "" != selectFilter.data_type && l.GF.getFilterItems(), l.isSelectingAllCharts = !1
                    },
                    list: function (e) {
                        a.dash_global_filter.list({
                            dash_id: t.dashId,
                            rule_id: l.ruleId
                        }).success(function (t) {
                            "0" == t.status ? (l.GF.initChartsAndTables(t.result, e), l.getInitialData = !1, l.filterData.dsh_filter_list.length > 0 && l.changeCheckAll(!0)) : r(Number(t.status))
                        })
                    },
                    info: function (e, t) {
                        t && t.stopPropagation(), l.filterView.selected_opt = e, e.indexOf("df_") >= 0 && (l.new_add_df_name = ""), l.changeCheckAll(!0), l.fieldSortValueCache && l.fieldSortValueCache[e] && (l.fieldSortValueCache[e].need = !0)
                    },
                    modify: function () {
                        function i(e) {
                            for (var t = 0; t < e.length; t++) {
                                var a = e[t],
                                    n = Object.keys(a.selected_tables);
                                a.selected_tables[n[0]] || (r(a.name + ": " + l.tips["dash.gfTableAndFieldRequired"]), c = !1);
                                var o = l.fieldMap[a.selected_tables[n[0]]];
                                for (var s in a.selected_tables) a.selected_tables.hasOwnProperty(s) && o !== l.fieldMap[a.selected_tables[s]] && (r(a.name + ": " + l.tips["dash.gfFieldTypeMustBeSame"]), c = !1);
                                a.items && a.items.length > 0 && i(a.items)
                            }
                        }

                        function n(e) {
                            return angular.forEach(e, function (e) {
                                var t = e.df_id,
                                    a = l.filterStatus[t];
                                e.df_id = 0 === t.indexOf("new") ? "" : t, e.name = a.name, e.config = a.config, e.data_type = a.data_type, "string" == a.data_type ? e.type = 1 : e.type = 2, e.selected_charts = [], e.selected_tables = {}, angular.forEach(a.charts, function (t, a) {
                                    !!t.selected && e.selected_charts.push(t.ct_id)
                                }), angular.forEach(a.tables, function (t, a) {
                                    !!t.show && (e.selected_tables[t.tb_id] = t.selected)
                                }), s = e.data_type, d = e.config.granularity, "date" == s && "" == d ? e.config.default_select = !!e.config.range : e.config.range = "", "string" == s && l.fieldSortValueCache[t] && l.fieldSortValueCache[t].sortRange && l.fieldSortValueCache[t].sortRange.length > 0 && (e.template = l.fieldSortValueCache[t].sortRange), e.items && e.items.length > 0 ? e.items = n(e.items) : e.items = []
                            }), e
                        }
                        l.globalDashFilterItems = {};
                        var o = angular.copy(l.filterData.dsh_filter_list),
                            s = "",
                            d = "",
                            c = !0;
                        o = n(o), i(o), c && a.dash_global_filter.modify({
                            dash_id: t.dashId,
                            dash_filter_list: angular.toJson(o)
                        }).success(function (i) {
                            "0" == i.status ? (r(l.tips.saveSuccess), e.closeAll(), a.dash_global_filter.item({
                                dash_id: t.dashId
                            }).then(function (e) {
                                "0" === e.status ? (l.originalGlobalFilter = angular.copy(e.result), l.globalDashFilter = bdp.utils.handleGlobalFilterLevel(e.result)) : r(Number(e.status))
                            }), angular.forEach(l.drawChartUrl, function (e, t) {
                                e.lazyload || (e.options.optional._t = new Date, e.options.read_cache = !1, delete e.options.optional.dsh_filter)
                            }), localforage.setItem("CACHE_DASH_DATA", {})) : r(Number(i.status))
                        })
                    },
                    del: function (e, t, a) {
                        function i(e) {
                            for (var t = 0, r = e.length; t < r; t++) {
                                if (e[t].df_id == a) {
                                    if (e[t].items && e[t].items.length > 0) {
                                        var n = angular.copy(e[t].items);
                                        angular.forEach(n, function (t) {
                                            e.push(t)
                                        })
                                    }
                                    e.splice(t, 1);
                                    break
                                }
                                e[t].items && e[t].items.length > 0 && i(e[t].items)
                            }
                            return e
                        }
                        confirm(l.tips["dash.gfConfirmRemove"]) && (i(l.filterData.dsh_filter_list), delete l.filterStatus[a], a === l.filterView.selected_opt && (l.filterView.selected_opt = l.filterData.dsh_filter_list.length ? l.filterData.dsh_filter_list[0].df_id : ""))
                    },
                    checkDataType: function () {
                        function e(t) {
                            for (var a = 0, i = t.length; a < i; a++) {
                                if (t[a].df_id == l.filterView.selected_opt) return t[a];
                                t[a].items && t[a].items.length > 0 && e(t[a].items)
                            }
                            return {}
                        }
                        for (var t in l.filterStatus)
                            if (t == l.filterView.selected_opt) selectFilter = l.filterStatus[t];
                            else {
                                var a = e(l.filterStatus);
                                a.hasOwnProperty("df_id") && (selectFilter = a)
                            }
                        var i = selectFilter.tables,
                            r = [];
                        angular.forEach(i, function (e, t) {
                            var a = l.fieldMap[e.selected];
                            e.show && r.indexOf(a) < 0 && r.push(a)
                        }), 1 === r.length && r[0] ? (selectFilter.data_type = r[0], selectFilter.config && !isObjectEmpty(selectFilter.config) || (selectFilter.config = {
                            granularity: "",
                            default_select: !1,
                            show_all: !0
                        }), l.isSelectingAllCharts || l.GF.getFilterItems()) : (l.range = [], selectFilter.data_type = "")
                    },
                    getFilterItems: function () {
                        var e = l.filterView.selected_opt,
                            i = l.filterStatus[e],
                            n = {};
                        if (angular.forEach(i.tables, function (e, t) {
                                !!e.show && (n[e.tb_id] = e.selected)
                            }), l.range = [], "string" == i.data_type && l.fieldSortValueCache[e] && l.fieldSortValueCache[e].need && l.fieldSortValueCache[e].sortRange.length) return l.range = l.fieldSortValueCache[e].sortRange || [], void(l.fieldSortValueCache[e].need = !1);
                        e = 0 === e.indexOf("new") ? "" : e, l.showLoading = !0, a.dash_global_filter.range({
                            dash_id: t.dashId,
                            rule_id: l.ruleId,
                            df_id: e,
                            selected_tables: angular.toJson(n),
                            granularity: i.config.granularity
                        }).success(function (e) {
                            if ("0" === e.status) {
                                if (l.showLoading = !1, l.range = e.result.range || [], !l.filterStatus[l.filterView.selected_opt]) return;
                                if ("date" == l.filterStatus[l.filterView.selected_opt].data_type && "" == l.filterStatus[l.filterView.selected_opt].config.granularity && (l.filterStatus[l.filterView.selected_opt].config.default_select = !1), "string" == l.filterStatus[l.filterView.selected_opt].data_type && delete l.fieldSortValueCache[l.filterView.selected_opt], 0 == l.range.length) l.filterStatus[l.filterView.selected_opt].config.range = "";
                                else {
                                    var t = !1,
                                        a = l.filterStatus[l.filterView.selected_opt].data_type,
                                        i = l.filterStatus[l.filterView.selected_opt].config.granularity;
                                    "date" == a && "" == i && (angular.forEach(l.range, function (e) {
                                        e.opt_id == l.filterStatus[l.filterView.selected_opt].config.range && (t = !0)
                                    }), t || (l.filterStatus[l.filterView.selected_opt].config.range = "", l.filterStatus[l.filterView.selected_opt].config.show_all = !0))
                                }
                            } else r(Number(e.status))
                        })
                    },
                    level: function (e, t, a) {
                        e && e.stopPropagation();
                        var i = t.index(),
                            r = t.$parentNodeScope;
                        "down" === a ? i && (t.prev().$modelValue.items.push(t.$modelValue), t.remove()) : "up" === a && r && t.$last && (r.$parentNodesScope.$modelValue.push(t.$modelValue), t.remove())
                    }
                }, l.$watch("filterView.selected_opt", function (e, t) {
                    e && l.GF.checkDataType()
                }), s.on("click", function () {
                    l.GF.list(!0), l.fieldSortValueCache = {}, e.open({
                        template: "/static/js/global-filter/global-filter-config.html",
                        className: "ngdialog-theme-default global-filter-model",
                        scope: l,
                        preCloseCallback: function (e) {
                            l.filterData = {}, l.filterView.selected_opt = "", l.fieldSortValueCache = {}, l.filterView.isCreating = !1, l.filterView.model = "", l.range = []
                        }
                    })
                }), l.confirmName = function (e, t, a, i) {
                    function n(e) {
                        e.map(function (e) {
                            if (e.df_id != t && e.name == l.filterView.editName) return void(s = !0);
                            e.items && e.items.length > 0 && n(e.items)
                        })
                    }

                    function o(e) {
                        e.map(function (e) {
                            e.df_id == t && (e.name = l.filterView.editName), e.items && e.items.length > 0 && o(e.items)
                        })
                    }
                    if (i && i.stopPropagation(), "" === l.filterView.editName || !defined(l.filterView.editName)) return r(l.tips["dash.gfNameRequired"]), !1;
                    var s = !1;
                    if (n(l.filterData.dsh_filter_list), s) return void r(l.tips["dash.gfNameDuplicate"]);
                    "create" === e ? (l.filterView.isCreating = !1, l.isCreating = !1, l.filterData.dsh_filter_list.push({
                        df_id: "new" + f,
                        name: l.filterView.editName,
                        items: []
                    }), l.filterStatus["new" + f] = {}, l.filterStatus["new" + f].config = {
                        granularity: "",
                        default_select: !1,
                        show_all: !0
                    }, l.filterStatus["new" + f].charts = angular.copy(l.charts), l.filterStatus["new" + f].tables = angular.copy(l.tables), l.filterStatus["new" + f].name = l.filterView.editName, l.GF.info("new" + f), l.new_add_df_name = l.filterView.editName) : (o(l.filterData.dsh_filter_list), l.filterStatus[t].name = l.filterView.editName, l.filterView.editFilter[t] = !1, l.GF.info(t)), l.filterView.model = "createInfo", l.filterView.editName = ""
                }, l.keyupFun = function (e, t, a, i) {
                    13 == e.keyCode && l.confirmName(t, a, i)
                }, l.cancelEditStatus = function () {
                    function e(t) {
                        t.map(function (t) {
                            l.filterView.editFilter[t.df_id] = !1, t.items && t.items.length > 0 && e(t.items)
                        })
                    }
                    l.filterData.dsh_filter_list && l.filterData.dsh_filter_list.length > 0 && e(l.filterData.dsh_filter_list), l.filterView.model = "createInfo"
                }, l.editFilterName = function (e, t, a) {
                    e && e.stopPropagation(), l.filterView.isCreating || (l.cancelEditStatus(), l.filterView.editFilter[t] = !0, l.filterView.editName = a)
                }, l.stopPropagation = function (e) {
                    e.stopPropagation()
                }, l.changeShowAllItem = function () {
                    l.filterStatus[l.filterView.selected_opt].config.show_all = !l.filterStatus[l.filterView.selected_opt].config.show_all;
                    var e = l.filterStatus[l.filterView.selected_opt].data_type,
                        t = l.filterStatus[l.filterView.selected_opt].config.granularity,
                        a = l.filterStatus[l.filterView.selected_opt].config.show_all,
                        i = l.filterStatus[l.filterView.selected_opt].config.range;
                    "date" == e && "" == t && !i && !a && l.range.length > 0 && (l.filterStatus[l.filterView.selected_opt].config.range = l.range[0].opt_id)
                }, l.changeCheckAll = function (e) {
                    if (e) {
                        var t = 0;
                        angular.forEach(l.filterStatus[l.filterView.selected_opt].charts, function (e) {
                            e.selected && t++
                        }), l.allCharts[l.filterView.selected_opt] = t == l.filterStatus[l.filterView.selected_opt].charts.length
                    } else l.allCharts[l.filterView.selected_opt] = !1
                }, l.globalFilterTree = {
                    dragStart: function (e) {},
                    dragMove: function (e) {},
                    dragStop: function () {
                        function e(a) {
                            angular.forEach(a, function (a) {
                                t[a.df_id] = l.filterStatus[a.df_id], a.items && a.items.length > 0 && e(a.items)
                            })
                        }
                        var t = {},
                            a = l.filterData.dsh_filter_list;
                        angular.forEach(a, function (e) {
                            t[e.df_id] = l.filterStatus[e.df_id]
                        }), e(a), l.filterStatus = t
                    }
                }, l.sortGlobalStringFilter = {
                    items: ".J-sortable-string",
                    start: function () {},
                    update: function (e, t) {
                        l.fieldSortValueCache[l.filterView.selected_opt] = {
                            need: !1,
                            sortRange: l.range
                        }
                    },
                    stop: function (e, t) {}
                }, o(["dash.gfTableAndFieldRequired", "dash.gfFieldTypeMustBeSame", "dash.gfConfirmRemove", "dash.gfNameRequired", "dash.gfNameDuplicate", "saveSuccess"], l)
            }
            return {
                restrict: "A",
                scope: {
                    originalGlobalFilter: "=",
                    globalDashFilter: "=",
                    ruleId: "=",
                    drawChartUrl: "=",
                    dashStandardItems: "=",
                    globalDashFilterItems: "="
                },
                link: s
            }
        }
        angular.module("BC.directives").directive("globalFilterSet", e), 
        e.$inject = ["ngDialog", "$stateParams", "commonService", "commonHttp", "errHint", "operatorHelpLink", "$jsTipTranslate", "$rootScope"]
    }(),
    function () {
        function e(e, t, a, i, r, n, o, l, s, d, c) {
            function u(t, c, u) {
                function f(e, a, i) {
                    var r = a.df_id,
                        n = $(".project-nav").width() + 64,
                        o = e.pageX < n + 200 ? {
                            left: 0
                        } : {
                            right: 0
                        },
                        l = bdp.utils.getArrayTextWidth(i, a);
                    o.width = l, t.adjustWidth[r] = o
                }

                function p(e, t) {
                    var i = angular.fromJson(window.localStorage.getItem("global_filter_memory")) || [],
                        n = !1,
                        o = a.wsId || "";
                    if (angular.forEach(i, function (a) {
                            a.name == e.name && a.ws_id == o && (a.range = t, a.data_type = e.data_type, "date" == e.data_type ? a.granularity = e.config.granularity || "" : "string" == e.data_type && (a.granularity = "", a.range_type = e.range_type), a.setDashId = r.dashId, n = !0)
                        }), !n) {
                        var l = {
                            name: e.name,
                            range: t,
                            ws_id: a.wsId || "",
                            granularity: e.config.granularity || "",
                            data_type: e.data_type,
                            range_type: "",
                            setDashId: r.dashId
                        };
                        "string" == e.data_type && e.hasOwnProperty("range_type") && (l.range_type = e.range_type), i.push(l)
                    }
                    window.localStorage.setItem("global_filter_memory", angular.toJson(i))
                }
                t.advanceView = {}, t.showQueryfilter = {}, t.queryString = {}, t.globalDashFilterItems = t.globalDashFilterItems || {};
                t.adjustWidth = {}, t.originalRange = [];
                var g;
                t.dateTimeByHalfHour = d, t.refreshCharts = function (e, a, i) {
                    e.range = i, e.show = !1, e.showName = "" !== a ? a : e.name, p(e, i), t.globalDashFilterItems[e.df_id] = {
                        granularity: e.config.granularity || "",
                        df_id: e.df_id,
                        range: i,
                        data_type: e.data_type,
                        show_name: e.showName,
                        real_name: a,
                        rela_charts: e.rela_ct_ids,
                        range_type: e.range_type
                    }, angular.forEach(t.drawChartUrl, function (e, a) {
                        e.global_filter_value = [];
                        var i = [];
                        angular.forEach(t.globalDashFilterItems, function (t, a) {
                            t.rela_charts.indexOf(e.options.ct_id) > -1 && i.push({
                                df_id: t.df_id,
                                range: t.range,
                                data_type: t.data_type,
                                granularity: t.granularity,
                                range_type: t.range_type
                            })
                        }), i.length > 0 && (e.options.optional.dsh_filter = i, delete e.options.optional.filter_list, e.options.read_cache = !1, e.options.optional._t = new Date)
                    }), setTimeout(function () {
                        t.scrollHandler.init(t.scrollHandler.scrollWidth)
                    }, 10)
                }, t.saveDateRange = function (e) {
                    var a = t.globalDashFilter[e.data.index],
                        r = "",
                        n = e.sDate ? e.sDate + " " + e.sDateHour : null,
                        o = e.eDate ? e.eDate + " " + e.eDateHour : null;
                    if (!n && !o) return l(t.tips["chart.dateRangeRequired"]), !1;
                    if (n && o) {
                        if (!e.sDateHour) return l(t.tips["filter.startDateErr2"]), !1;
                        if (!e.eDateHour) return l(t.tips["filter.endDateErr2"]), !1;
                        if (new Date(n) - new Date(o) > 0) return l(t.tips["filter.dateRangeInvalid"]), !1
                    } else {
                        if (n && !o && !e.sDateHour) return l(t.tips["filter.startDateErr2"]), !1;
                        if (!n && o && !e.eDateHour) return l(t.tips["filter.endDateErr2"]), !1
                    }
                    n ? (r += n, r += o ? "~" + o : "~" + t.tips["chart.notLimit"]) : (r += t.tips["chart.notLimit"] + "~", r += o), i.close(g.id), g = null, t.refreshCharts(a, r, [n, o])
                }, t.queryKwd = {}, t.globalFilterModule = {
                    showDatePicker: function (e, a) {
                        if (navigator.userAgent.indexOf("Firefox") >= 0 && a[0] && a[0].indexOf("opt_") >= 0);
                        else if (navigator.userAgent.indexOf("Firefox") >= 0 && a && a.length > 0) {
                            var r = null,
                                n = null;
                            a[0] && (r = a[0].split("-"), r[1] < 10 && (r[1] = "0" + parseInt(r[1])), r[2] < 10 && (r[2] = "0" + parseInt(r[2])), r = r[0] + "-" + r[1] + "-" + r[2]), a[1] && (n = a[1].split("-"), n[1] < 10 && (n[1] = "0" + parseInt(n[1])), n[2] < 10 && (n[2] = "0" + parseInt(n[2])), n = n[0] + "-" + n[1] + "-" + n[2]), a = [r, n]
                        }
                        if (a.length > 1) {
                            var o = a[0] ? a[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                l = a[1] ? a[1].split(" ")[1] || "23:59:59" : "23:59:59";
                            a = a.concat([o, l])
                        } else 1 === a.length && a[0].indexOf("opt_") > -1 ? a = [+new Date, +new Date, "00:00:00", "23:59:59"] : 0 === a.length && (a = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                        g = i.open({
                            template: "/static/partials/dialogTemplates/custom_date_modal.html",
                            className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                            data: {
                                index: e,
                                range: a
                            },
                            scope: t
                        })
                    },
                    getItemList: function (e, a, i) {
                        t.setParentAndChildMap();
                        var o = t.getParentFilterRange(a.df_id);
                        a.show = !i && !a.show, (a.show || i) && (t.showLoading = !0, t.queryKwd[a.df_id] = "", n.dash_global_filter.range({
                            dash_id: r.dashId,
                            rule_id: t.ruleId,
                            df_id: a.df_id,
                            granularity: a.config.granularity || "",
                            range: angular.toJson(o)
                        }).success(function (r) {
                            if (0 == r.status) {
                                t.showLoading = !1;
                                var n = r.result.range;
                                !i && f(e, a, n), t.showQueryfilter[a.df_id] = r.result.total > 100, t.queryString[a.df_id] = {
                                    show: !t.showQueryfilter[a.df_id],
                                    keyword: "",
                                    list: n,
                                    total: r.result.total
                                }, i && (i(a, n, r.result.total), t.originalRange = n)
                            } else l(Number(r.status))
                        }))
                    },
                    openAdvanceModal: function (e, a, r) {
                        for (var n, e = angular.copy(e), o = 0; o < t.globalDashFilter.length; o++)
                            if (t.globalDashFilter[o].df_id === e.df_id) {
                                n = o;
                                break
                            }
                        var l = void 0 == e.range ? [] : e.range;
                        t.globalDashFilter[n].showName;
                        t.globalFilterMultiple = {
                            index: n,
                            df_id: e.df_id,
                            name: e.name,
                            data_type: e.data_type,
                            keyword: "",
                            filterKwd: "",
                            config: e.config,
                            searchList: [],
                            total: r,
                            addList: l,
                            range_type: e.hasOwnProperty("range_type") ? e.range_type : "1"
                        }, angular.forEach(a, function (e) {
                            $.inArray(e, l) > -1 ? t.globalFilterMultiple.searchList.push({
                                name: e,
                                select: !0
                            }) : t.globalFilterMultiple.searchList.push({
                                name: e,
                                select: !1
                            })
                        }), t.disabled_compare = !0, i.open({
                            template: "/static/js/global-filter/global-filter-string-multiple.html",
                            className: "ngdialog-theme-default str-filter-model global-str",
                            scope: t
                        })
                    },
                    addAdvanceItem: function (a, i) {
                        i && i.stopPropagation();
                        var r = !1;
                        if ($.inArray(a.name, t.globalFilterMultiple.addList) > -1 && (r = !0), r) return void l(t.tips["filter.hasTheFilter"]);
                        t.globalFilterMultiple.addList.push(a.name), e(function () {
                            var e = $(".add-list").find("ul"),
                                t = e[0].scrollHeight;
                            e.animate({
                                scrollTop: t
                            })
                        }, 300)
                    },
                    delAdvanceItem: function (e, a) {
                        a && a.stopPropagation();
                        for (var i = t.globalFilterMultiple.searchList, r = 0, n = i.length; r < n; r++)
                            if (i[r].name == t.globalFilterMultiple.addList[e]) {
                                i[r].select = !1;
                                break
                            }
                        t.globalFilterMultiple.addList.splice(e, 1)
                    },
                    delAll: function () {
                        t.globalFilterMultiple.addList = []
                    },
                    addAll: function () {
                        if (0 == t.globalFilterMultiple.addList.length) return void angular.forEach(t.globalFilterMultiple.searchList, function (e) {
                            t.globalFilterMultiple.addList.push(e.name)
                        });
                        angular.forEach(t.globalFilterMultiple.searchList, function (e) {
                            $.inArray(e.name, t.globalFilterMultiple.addList) < 0 && t.globalFilterMultiple.addList.push(e.name)
                        })
                    },
                    saveAdvance: function () {
                        var e = t.globalDashFilter[t.globalFilterMultiple.index],
                            a = t.globalFilterMultiple.addList,
                            i = a.join(",");
                        e.range_type = t.globalFilterMultiple.range_type, t.refreshCharts(e, i, a)
                    },
                    enterToQuery: function (e) {
                        13 == e.e.keyCode && (e.is_advance ? t.globalFilterMultiple.filterKwd = t.globalFilterMultiple.keyword : t.queryString[e.filter.df_id].keyword = t.queryKwd[e.filter.df_id], e.real_search && this.query(e.filter, e.is_advance))
                    },
                    query: function (e, a) {
                        t.showLoading = !0, t.setParentAndChildMap();
                        var i = t.getParentFilterRange(e.df_id),
                            r = e.df_id,
                            n = t.queryKwd[r] || t.globalFilterMultiple && t.globalFilterMultiple.keyword;
                        if (a ? t.globalFilterMultiple.filterKwd = n : t.queryString[e.df_id].keyword = n, n) {
                            var s = {
                                keyword: n,
                                rule_id: t.ruleId,
                                df_id: e.df_id,
                                granularity: e.config.granularity || "",
                                parent_range: angular.toJson(i)
                            };
                            a && (t.globalFilterMultiple.loading = !0), o.post("/api/dsh_filter/enum_search", s).then(function (e) {
                                if (t.showLoading = !1, 0 == e.status)
                                    if (a) {
                                        var i = [];
                                        angular.forEach(e.result, function (e) {
                                            i.push({
                                                name: e,
                                                select: !1
                                            })
                                        }), t.globalFilterMultiple.loading = !1, t.globalFilterMultiple.searchList = i
                                    } else t.tempQueryList = angular.copy(t.queryString[r].list), t.queryString[r].list = e.result, t.queryString[r].show = !0;
                                else l(Number(e.status))
                            })
                        } else if (t.showLoading = !1, a) {
                            var d = [];
                            angular.forEach(t.originalRange, function (e) {
                                d.push({
                                    name: e,
                                    select: !1
                                })
                            }), t.globalFilterMultiple.searchList = d
                        }
                    },
                    delQueryField: function (e) {
                        t.tempQueryList && (t.queryString[e].list = t.tempQueryList || []), t.queryKwd[e] = ""
                    }
                }, t.setParentAndChildMap = function () {
                    function e(a, o) {
                        angular.forEach(a, function (a) {
                            r = [], angular.forEach(i, function (e) {
                                e.df_id == o.df_id && (r = e.range, n = e.hasOwnProperty("range_type") ? e.range_type : "1")
                            }), "string" == o.data_type && (o.config.granularity = ""), t.parentAndChildMap.push({
                                parent_df_id: o.df_id,
                                parent_name: o.name,
                                parent_granularity: o.config.granularity,
                                parent_range: r,
                                parent_data_type: o.data_type,
                                parent_range_type: n,
                                self_df_id: a.df_id,
                                self_name: a.name
                            }), a.items && a.items.length > 0 && e(a.items, a)
                        })
                    }
                    t.parentAndChildMap = [];
                    var a = angular.copy(t.originalGlobalFilter),
                        i = t.globalDashFilter,
                        r = [],
                        n = "1";
                    e(a, {
                        df_id: "",
                        name: "",
                        range: [],
                        data_type: "",
                        config: {
                            granularity: ""
                        },
                        range_type: "1"
                    })
                }, t.getParentFilterRange = function (e) {
                    function a(e) {
                        angular.forEach(t.parentAndChildMap, function (t) {
                            e == t.self_df_id && t.parent_df_id && (i.push({
                                df_id: t.parent_df_id,
                                range: t.parent_range,
                                data_type: t.parent_data_type,
                                name: t.parent_name,
                                granularity: t.parent_granularity || "",
                                range_type: t.parent_range_type
                            }), a(t.parent_df_id))
                        })
                    }
                    var i = [];
                    return a(e), angular.forEach(i, function (e) {
                        delete e.name
                    }), i
                }, t.setParentAndChildMap(), t.resetRangeType = function (e) {
                    e.range_type = "1", $(".J_dash_edit_content").length && $(".J_dash_edit_content").attr("issetFilter", "1")
                }, t.scrollHandler = {
                    scrollCount: 0,
                    scrollWidth: 0,
                    firstIndex: 0,
                    nextIndex: 0,
                    itemWidthArr: [],
                    rightShadow: 24,
                    getItemWidth: function () {
                        for (var e = c.find(".global-filter").find(".filter-i"), t = [], a = 0; a < e.length; a++) t.push(e[a].scrollWidth + 24);
                        this.itemWidthArr = [];
                        for (var a = 0; a < t.length; a++) 0 === a ? this.itemWidthArr.push(t[0]) : this.itemWidthArr.push(this.itemWidthArr[a - 1] + t[a])
                    },
                    _setFirstIndex: function (e) {
                        var t = this.itemWidthArr.length;
                        if (e - this.rightShadow >= this.itemWidthArr[t - 1]) return this.firstIndex = t - 1, void(this.scrollWidth = this.itemWidthArr[this.firstIndex - 1] || 0);
                        for (var a = 0; a < t; a++)
                            if (e - this.rightShadow <= this.itemWidthArr[a]) {
                                this.firstIndex = a, this.scrollWidth = this.itemWidthArr[this.firstIndex - 1] || 0;
                                break
                            }
                    },
                    _setNextIndex: function (e, t) {
                        for (var a = this.firstIndex; a < this.itemWidthArr.length; a++)
                            if (this.nextIndex = 0, e + t - this.rightShadow <= this.itemWidthArr[a]) {
                                this.nextIndex = a;
                                break
                            }
                        0 === this.nextIndex && (this.nextIndex = this.itemWidthArr.length)
                    },
                    init: function (e) {
                        this.getItemWidth();
                        var t = c.find(".global-filter"),
                            a = t.innerWidth();
                        this._setFirstIndex(e), this._setNextIndex(e, a)
                    },
                    scroll: function (e) {
                        this.scrollCount = this.scrollCount + e, this.getItemWidth();
                        var t = c.find(".global-filter"),
                            a = t[0].scrollWidth,
                            i = t.innerWidth();
                        if (e > 0 ? this.scrollWidth = (this.scrollWidth || 0) + i : this.scrollCount ? this.scrollWidth = (this.scrollWidth || 0) - .5 * i : this.scrollWidth = 0, this.scrollCount < 0 || a + this.rightShadow <= i || this.scrollWidth >= a + i - 56) return void(this.scrollCount = this.scrollCount - e);
                        this.scrollWidth >= 0 && (this._setFirstIndex(this.scrollWidth), this._setNextIndex(this.scrollWidth, i));
                        var r = 0 === this.scrollWidth ? 32 : 56 - this.scrollWidth;
                        t.animate({
                            left: r
                        })
                    }
                }, setTimeout(function () {
                    t.scrollHandler.init(0)
                });
                var h = t.$watch(function () {
                    return t.globalDashFilter.length
                }, function (e, a) {
                    e !== a && setTimeout(function () {
                        t.scrollHandler.scroll(-t.scrollHandler.scrollCount)
                    })
                });
                $(window).on("resize.globalFilter", $.debounce(300, function () {
                    t.scrollHandler.init(t.scrollHandler.scrollWidth)
                })), $("body").on("dashboard-scroll-start.globalFilter", function () {
                    var e = t.globalDashFilter;
                    if ($(".J_globle_filter_layer").addClass("ng-hide"), $.isArray(e))
                        for (var a = 0, i = e.length; a < i; a++) e[a].show = !1
                }), t.$on("$destroy", function () {
                    $(window).off("resize.globalFilter"), $("body").off("dashboard-scroll-start.globalFilter"), h()
                }), s(["chart.notLimit", "chart.dateRangeRequired", "filter.hasTheFilter", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2"], t)
            }
            return {
                restrict: "A",
                templateUrl: "/static/js/global-filter/global-filter.html",
                scope: {
                    originalGlobalFilter: "=",
                    globalDashFilter: "=",
                    globalDashFilterItems: "=",
                    ruleId: "=",
                    showLoading: "=",
                    drawChartUrl: "=",
                    filterStatus: "=",
                    onSharePage: "="
                },
                link: u
            }
        }
        angular.module("BC.directives")
        .directive("globalFilter", e), 
        e.$inject = ["$timeout", "$interval", "$rootScope", "ngDialog", "$stateParams", "commonService", "commonHttp", "errHint", "$jsTipTranslate", "dateTimeByHalfHour", "$location"]
    }(), 
    angular.module("BC.directives")
    .directive("expressionFilter", expressionFilter)
    .directive("expressionFuncTip", expressionFuncTip)
    .directive("formulaExpression", formulaExpression)
    .directive("formulaExpressionReadonly", formulaExpressionReadonly), 
    expressionFuncTip.$inject = ["$rootScope"], 
    expressionFilter.$inject = ["$rootScope"], 
    expressionFilterCtrl.$inject = ["$rootScope", "$scope", "getFunctionList", "$timeout", "commonService", "$jsTipTranslate", "errHint"], 
    formulaExpression.$inject = ["$rootScope"], 
    formulaExpressionReadonly.$inject = [], 
    angular.module("BC.directives")
    .directive("gisEditGuide", ["$rootScope", "$timeout", "$translate", function (e, t, a) {
        return {
            restrict: "A",
            replace: !1,
            scope: {
                veilEle: "@",
                stepNum: "="
            },
            link: function (i, r, n) {
                var o = [{
                        tips: a.instant("chart.modifyWorksheetTip"),
                        deviation: {
                            top: -2,
                            right: 2,
                            bottom: 2,
                            left: -2
                        },
                        tipsOptions: {
                            direction: "bottom",
                            tipsDeviation: -12
                        }
                    }, {
                        tips: a.instant("chart.trajctoryLayerTip"),
                        deviation: {
                            top: 0,
                            right: 48,
                            bottom: 0,
                            left: 0
                        }
                    }, {
                        tips: a.instant("chart.timeAnimationTip"),
                        deviation: {
                            top: 10,
                            right: -10,
                            bottom: -10,
                            left: -10
                        },
                        tipsOptions: {
                            direction: "bottom",
                            tipsDeviation: 135
                        }
                    }],
                    l = o[i.stepNum];
                t(function () {
                    window.bdpGuideVeil.creatVeil(i.veilEle, {
                        mask: !0,
                        deviation: l.deviation
                    }).creatTips(l.tips, i.nextStep, l.tipsOptions), $("." + i.veilEle).one("click.gisEditGuide", function (e) {
                        i.nextStep()
                    })
                }, 0, !1), i.$on("$destroy", function () {
                    window.bdpGuideVeil.remove()
                }), i.nextStep = function () {
                    window.bdpGuideVeil.remove(), e.gisEditGuide += 1, e.$$phase || e.$apply()
                }
            }
        }
    }])
    .directive("chartTemplateGuide", ["$rootScope", "$http", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "/static/js/user-guide/chart-template-guide.html",
            link: function (e, a, i) {
                e.guide = userGuideFlags.get("ctpl"), e.view = i.view, e.nextStep = function (a) {
                    a = a || 1, e.guide += a;
                    var i = userGuideFlags.set("ctpl", e.guide);
                    t.post("/api/user/guide_set", {
                        guide: i
                    }).success(function (e) {
                        if (0 == e.status) return !0;
                        errorHandle(e)
                    })
                }
            }
        }
    }])
    .directive("vaSettingGuide", ["ngDialog", "$rootScope", "$translate", "guideService", "$timeout", function (e, t, a, i, r) {
        return {
            restrict: "A",
            replace: !1,
            scope: !0,
            link: function (r, n, o) {
                var l = t.language,
                    s = 1 == t.usedThemeId ? "dark" : "light",
                    d = '<p class="mb24">' + a.instant("chart.freeAnalyticsSettingGuide") + "</p>";
                d += '<img height="105" src="/static/images/va-guide/va-setting-guide-' + s + "-" + l + '.png" />';
                var c = '<div class="ngdialog-title">' + a.instant("newFeatureHint") + '</div><div class="ngdialog-message">' + d + '</div><div class="ngdialog-buttons"><input type="button" class="ngdialog-button ngdialog-button-secondary" value="' + a.instant("iKnow") + '" ng-click="closeThisDialog();" /></div>';
                e.open({
                    template: c,
                    plain: !0,
                    className: "ngdialog-theme-default va-setting-guide",
                    showClose: !0
                }), BDPLogger.log("vaSettingGuide", {
                    category: "user_interact",
                    action: "guide",
                    opt_label: "openDialog",
                    opt_value: 1
                }), i.setGuideApi("vaSettingGuide", 0)
            }
        }
    }]).directive("maskGuide", ["$rootScope", "guideService", "$translate", "$timeout", function (e, t, a, i) {
        return {
            restrict: "A",
            replace: !1,
            scope: {
                ngMgIf: "=",
                ngMgCallback: "&",
                ngMgKey: "@",
                ngMgKeyindex: "@"
            },
            link: function (r, n, o) {
                function l(e, t, a) {
                    var i = null;
                    return t && "[object Array]" === Object.prototype.toString.call(a[e]) ? (i = angular.copy(a[e][t]), i.tooltips.options.showIndex && (i.tooltips.options.indexText = t - 0 + 1 + "/" + a[e].length)) : i = angular.copy(a[e]), i.tooltips.tipsText = d(i.tooltips.tipsText), i.tooltips.options.btnText = d(i.tooltips.options.btnText), i
                }

                function s(e, t) {
                    var a = null;
                    return t.Veil.eleClass ? "[object Array]" === Object.prototype.toString.call(t.Veil.eleClass) ? (a = t.Veil.eleClass, a.push($(e))) : a = [t.Veil.eleClass, $(e)] : a = $(e), a
                }

                function d(e) {
                    return "function" == typeof e ? a.instant(e()) : e
                }
                var c = r.$watch("ngMgIf", function (a, o) {
                    1 == a ? i(function () {
                        var a = l(r.ngMgKey, r.ngMgKeyindex, t),
                            i = s(n, a);
                        window.bdpGuideVeil.creatVeil(i, a.Veil.options).creatTips(a.tooltips.tipsText, function () {
                            window.bdpGuideVeil.remove(), r.ngMgCallback && r.ngMgCallback(), a.tooltips.callback && a.tooltips.callback(), e.$$phase || (e.$apply(), r.$digest())
                        }, a.tooltips.options), r.$on("$destroy", function () {
                            window.bdpGuideVeil.remove(), c()
                        })
                    }, 0, !1) : window.bdpGuideVeil.remove()
                })
            }
        }
    }]).directive("flashGuide", ["$rootScope", "guideService", "$timeout", "$rootScope", "$translate", function (e, t, a, e, i) {
        return {
            restrict: "A",
            replace: !1,
            scope: {
                ngFgIf: "=",
                ngFgCallback: "&",
                ngFgKey: "@",
                ngFgKeyindex: "@"
            },
            link: function (r, n, o) {
                function l(e, t, a) {
                    var i = null;
                    return i = t && "[object Array]" === Object.prototype.toString.call(a[e]) ? angular.copy(a[e][t]) : angular.copy(a[e]), i.tipsText = s(i.tipsText), i.options.btnText = s(i.options.btnText), i
                }

                function s(e) {
                    return "function" == typeof e ? i.instant(e()) : e
                }
                var d, c = r.$watch("ngFgIf", function (i, o) {
                    1 == i ? a(function () {
                        n = $(n);
                        var a = l(r.ngFgKey, r.ngFgKeyindex, t);
                        d = window.bdpGuideVeil.creatDotGuide(n, a.tipsText, function () {
                            i(), r.ngFgCallback && r.ngFgCallback(), a.callback && a.callback()
                        }, a.options, r.ngFgKey);
                        var i = e.$on("$translateChangeSuccess", function () {
                            a = l(r.ngFgKey, r.ngFgKeyindex, t), d.remove(), d = window.bdpGuideVeil.creatDotGuide(n, a.tipsText, function () {
                                i(), r.ngFgCallback && r.ngFgCallback(), a.callback && a.callback()
                            }, a.options, r.ngFgKey)
                        });
                        r.$on("$destroy", function () {
                            d.remove(), i(), c()
                        })
                    }, 0, !1) : d && d.remove()
                })
            }
        }
    }])
    .directive("guideNavigator", ["$rootScope", "$timeout", "$jsTipTranslate", function (e, t, a) {
        return {
            restrict: "A",
            templateUrl: "/static/js/user-guide/guide_navigator.html",
            replace: !0,
            link: function (e, t, a) {
                var i = $("body")[0].getBoundingClientRect(),
                    r = $(".highcharts-navigator")[0].getBoundingClientRect(),
                    n = $(".canSetNavigator")[0].getBoundingClientRect(),
                    o = $(".canSetNavigator").nextAll(),
                    l = 0;
                $.each(o, function (e, t) {
                    l += o[e].clientHeight
                }), e.bodyDomWidth = i.width, e.bodyDomHeight = i.height, e.borderTop = r.bottom - r.height - 10, e.borderRight = i.width - r.right - 32, e.borderBottom = i.height - r.bottom - 10, e.borderLeft = r.left - 32, e.tipTop = r.bottom - r.height - 10 - 90 - 20, e.tipLeft = r.left + r.width / 2 - 129, e.borderTop2 = i.height - l - 50, e.borderRight2 = i.width - n.right + 32, e.borderBottom2 = l + 5, e.borderLeft2 = n.left - 4, e.tipTop2 = e.borderTop2 - 14, e.tipRight2 = n.width + 32
            },
            controller: ["$rootScope", "$scope", "$timeout", "$jsTipTranslate", function (e, a, i, r) {
                t(function () {
                    a.maskStyle = {
                        width: a.bodyDomWidth + "px",
                        height: a.bodyDomHeight + "px",
                        "border-style": "solid",
                        "border-width": a.borderTop + "px " + a.borderRight + "px " + a.borderBottom + "px " + a.borderLeft + "px "
                    }, a.naviTipStyle = {
                        top: a.tipTop + "px",
                        left: a.tipLeft + "px"
                    }, a.maskStyle2 = {
                        position: "fixed",
                        left: "0px",
                        top: "0px",
                        width: a.bodyDomWidth + "px",
                        height: a.bodyDomHeight + "px",
                        "border-style": "solid",
                        "border-width": a.borderTop2 + "px " + a.borderRight2 + "px " + a.borderBottom2 + "px " + a.borderLeft2 + "px"
                    }, a.naviTipStyle2 = {
                        top: a.tipTop2 + "px",
                        right: a.tipRight2 + "px"
                    }
                }, 0), 
                a.isStepOne = !0, 
                a.isStepTwo = !1, 
                a.naviGo = function () {
                    t(function () {
                        $(".chart-right").scrollTop(1e5)
                    }, 0), a.isStepOne = !1, a.isStepTwo = !0
                }, 
                a.closeGuide = function () {
                    a.isStepTwo = !1, window.localStorage.setItem("hasUseNavigator", 1)
                }, 
                t(function () {
                    a.closeGuide()
                }, 5e3), 
                r(["chart.guideNavigatorStepOne", "chart.goOn", "chart.guideNavigatorStepTwo", "chart.gotIt"], a)
            }]
        }
    }]),
    function () {
        function e(e, t, a, i, r, n, o) {
            function l(e, t, o) {
                function l(t) {
                    for (var a = e.info[t], i = 0; i < a.length; i++) {
                        if ("" === a[i].name) return alert(e.tips["granularity.nullNameCheck"]), !1;
                        for (var r = i + 1; r < a.length; r++)
                            if (a[i].name === a[r].name) return alert(e.tips["granularity.duplicatedNameCheck"] + '"' + a[r].name + '"'), !1
                    }
                    return !0
                }

                function s(e) {
                    for (var t in e) e.hasOwnProperty(t) && e[t].map(function (e, t) {
                        delete e.endDateInfo, delete e.granularityMap, delete e.granularityMapDay
                    });
                    return e
                }
                var d;
                e.selected = "year", e.granularityMap = {
                    month: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
                    day: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
                    day_of_week: [1, 2, 3, 4, 5, 6, 7]
                }, 
                e.updateDay = function (e) {
                    var t = e.month;
                    e.day;
                    2 == t ? e.granularityMapDay = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28] : [4, 6, 9, 11].indexOf(t) > -1 ? e.granularityMapDay = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30] : e.granularityMapDay = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
                }, 
                i.post("/api/date_granularity/list", {
                    tb_id: e.tbId
                })
                .then(function (t) {
                    0 == t.status && (e.info = t.result, e.getInitialData = !1, d = angular.copy(t.result))
                }), 
                e.setting = {
                    open: function () {
                        e.preCloseDialog = !1, 
                        e.getInitialData = !e.info, 
                        a.open({
                            template: "/static/js/date-granularity/set_modal.html",
                            className: "ngdialog-theme-default global-filter-model granularity-modal",
                            scope: e,
                            preCloseCallback: function (t) {
                                if (e.preCloseDialog) return !0;
                                var i = s(d),
                                    r = s(angular.copy(e.info));
                                if (angular.toJson(i) !== angular.toJson(r)) {
                                    return a.openConfirm({
                                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                                        className: "ngdialog-theme-default ngDialog-width-300",
                                        scope: e,
                                        data: {
                                            message: e.tips["chart.notSave"],
                                            okClick: function () {}
                                        }
                                    }).then(function () {
                                        return e.info = angular.copy(d), !0
                                    })
                                }
                            }
                        })
                    },
                    getInfo: function (t) {
                        if (setTimeout(function () {
                                $(".date-granularity-rule-list").scrollTop(0)
                            }, 0), !l(e.selected)) return !1;
                        e.selected = t
                    },
                    add: function (t) {
                        if (e.info[t].length > 9) return void r(e.tips["granularity.tooMuchRules"]);
                        var a = {
                            name: ""
                        };
                        switch (t) {
                            case "year":
                                a.month = 1, a.day = 1;
                                break;
                            case "month":
                                a.day = 1;
                                break;
                            case "week":
                                a.day_of_week = 1
                        }
                        e.info[t].push(a), scrollToBottom($(".date-granularity-rule-list"))
                    },
                    del: function (t, a) {
                        e.info[t].splice(a, 1)
                    },
                    modify: function () {
                        if (e.preCloseDialog = !0, e.preCloseDialogSure = !0, !l(e.selected)) return !1;
                        e.info = s(e.info);
                        var t = !1;
                        for (var n in e.info) e.info[n].length > 10 && (t = !0);
                        if (t) return void r(e.tips["granularity.tooMuchRules"]);
                        i.post("/api/date_granularity/commit", {
                            tb_id: e.tbId,
                            data: angular.toJson(e.info)
                        }).then(function (t) {
                            0 == t.status && (d = angular.copy(e.info), a.closeAll())
                        })
                    },
                    reset: function () {
                        e.info = angular.copy(d)
                    }
                }, n(["chart.notSave", "granularity.nullNameCheck", "granularity.duplicatedNameCheck", "granularity.tooMuchRules"], e)
            }
            return {
                restrict: "A",
                templateUrl: "/static/js/date-granularity/granularity.html",
                scope: {
                    tbId: "=",
                    field: "=",
                    axis: "=",
                    setGranularity: "="
                },
                link: l
            }
        }
        angular.module("BC.directives")
        .directive("dateGranularity", e), 
        e.$inject = ["$timeout", "$rootScope", "ngDialog", "commonHttp", "errHint", "$jsTipTranslate", "granularityMap"]
    }(),
    function () {
        function e(e, t, a, i, r, n) {
            function o(e, t, a) {}
            return {
                restrict: "A",
                templateUrl: "/static/partials/directiveTemplates/stringDataShowType.html",
                scope: {
                    tbId: "=",
                    field: "=",
                    axis: "=",
                    setDataShowType: "="
                },
                link: o
            }
        }
        angular.module("BC.directives").directive("stringDataShowType", e), 
        e.$inject = ["$timeout", "ngDialog", "commonHttp", "errHint", "$jsTipTranslate", "dataShowTypeMap"]
    }(),
    function () {
        function e(e, t, a, i, r) {
            function n(t, a, i) {
                t.axis = i.axis, 
                t.meta = t.chart_ops.meta.level[t.drill_level], 
                t.setAxisSort = function (e, a, i, r) {
                    i.show_formula = !1;
                    var n, o = t.chart_ops.meta.level[t.drill_level];
                    o.tb_statistic && o.tb_statistic.row_setting;
                    "x" === r ? n = o.x[e] : "compare_axis" === r && (n = o.compare_axis[e]), o.is_advanced_sort = 0, "x" === r ? o.sort = {
                        fid: n.fid,
                        axis: "x",
                        uniq_id: n.uniq_id,
                        type: a
                    } : "compare_axis" === r && (o.compare_axis[e].compare_sort = {
                        fid: n.fid,
                        axis: "compare_axis",
                        uniq_id: n.uniq_id,
                        type: a
                    }), t.saveChartImmediate()
                }, 
                t.canSetSort = function () {
                    var e = ["C200", "C210", "C211", "C212", "C220", "C240", "C241", "C242", "C243", "C250", "C261", "C290", "C310", "C330", "C350", "C351", "C352", "C320"],
                        a = t.chart_ops.meta.chart_type || (t.chart_ops.meta.level[t.drill_level] ? t.chart_ops.meta.level[t.drill_level].chart_type : "");
                    return e.indexOf(a) > -1
                }, 
                t.setAlignmentMethod = function (e, a) {
                    var i = $(e.target).parents(".data-tag").parent().index();
                    t.chart_ops.meta.level[t.drill_level].x[i].alignment_method = a, t.saveChartImmediate()
                }, 
                t.setAutoWordwrap = function (e, a, i, r) {
                    var n = t.chart_ops.meta.level[t.drill_level],
                        l = $(e.target).parents(".data-tag").parent().index(),
                        s = "on" === a ? 1 : 0;
                    if ("compare_axis" == i && "virtual" == r.data_type) {
                        return n.virtual_wordwrap = {
                            is_auto_wordwrap: s,
                            index: l
                        }, t.saveChartImmediate(), void o(s)
                    }
                    n[i][l].is_auto_wordwrap = s, t.saveChartImmediate(), o(s)
                }, 
                t.setNickName = function (a, i) {
                    var r = $(a.target).parents(".data-tag").parent().index(),
                        n = t.is_gis ? t.viewData.currentLayer : t.chart_ops.meta.level[t.drill_level],
                        o = angular.copy(n.x[r]);
                    e.open({
                        template: "/static/partials/dialogTemplates/nick_name.html",
                        className: "ngdialog-theme-default nick-model",
                        data: {
                            origin_name: o.nick_name,
                            field_index: r,
                            field: o,
                            dimension: "dimension",
                            save: t.saveNickName
                        }
                    })
                }, 
                t.saveNickName = function (e, a, i) {
                    var r = t.is_gis ? t.viewData.currentLayer : t.chart_ops.meta.level[t.drill_level],
                        n = r.tb_statistic && r.tb_statistic.row_setting,
                        o = r.x[a],
                        l = o.fid,
                        s = o.uniq_id;
                    if (o.nick_name = e.nick_name, o.description = e.description, "row_summary" == l && (n.nick_name = e.nick_name, n.description = e.description), r.advanced_sort && r.advanced_sort.length > 0)
                        for (var d = 0, c = r.advanced_sort.length; d < c; d++) {
                            var u = r.advanced_sort[d],
                                f = u.fid,
                                p = u.uniq_id,
                                g = u.axis;
                            if ("x" == g)
                                if (s) {
                                    if (p === s) {
                                        !0, u.name = o.nick_name || u.originName;
                                        break
                                    }
                                } else if (l = f) {
                                !0, u.name = o.nick_name || u.originName;
                                break
                            }
                        }
                    t.saveChartImmediate()
                }
            }

            function o(e) {
                BDPLogger.log("WrapText", {
                    category: "user_interact",
                    action: "is_wrap_text",
                    opt_label: JSON.stringify({
                        ct_id: r.chartId,
                        is_wrap_text: e
                    })
                })
            }
            return {
                restrict: "A",
                templateUrl: "/static/partials/directiveTemplates/dimensionCompareSort.html",
                scope: !0,
                link: n
            }
        }
        angular.module("BC.directives")
        .directive("dimensionCompareSort", e), 
        e.$inject = ["ngDialog", "commonService", "errHint", "$jsTipTranslate", "$stateParams"]
    }(),
    function () {
        ! function () {
            angular.module("BC.personal", [])
        }(),
        function () {
            angular.module("BC.personal")
            .directive("copyShareLink", ["errHint", "$timeout", function (e, t) {
                return {
                    scope: {
                        copyUrl: "="
                    },
                    link: function (a, i) {
                        t(function () {
                            i.zclip({
                                path: "/static/js/lib/jquery-ui/ZeroClipboard.swf",
                                copy: function () {
                                    return a.copyUrl
                                },
                                afterCopy: function () {
                                    t(function () {
                                        e("复制成功")
                                    }, 0)
                                }
                            })
                        }, 500)
                    }
                }
            }])
        }(),
        function () {
            angular.module("BC.personal")
            .directive("socialShare", ["ngDialog", "$q", "shareService", "$window", "$rootScope", function (e, t, a, i, r) {
                function n(t, n) {
                    function o() {
                        t.vmStatus.upgrade = !1, e.open({
                            templateUrl: "/static/js/personal/share/social-share-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-460",
                            scope: t,
                            preCloseCallback: function () {
                                t.vmStatus.creatShareSuc = !1
                            }
                        })
                    }

                    function l(e) {
                        if ("private" == e && t.memberData && t.memberData.vipLevel < 2) return t.vmStatus.upgrade = !0, !1;
                        var i = {
                            dashId: t.dashSelected,
                            description: t.share.description,
                            shareType: e
                        };
                        return a.creatSdoId(i).then(function (e) {
                            e.sdo_id ? (t.vmStatus.creatShareSuc = !0, t.share.descriptionOriginal = angular.copy(t.share.description), t.outerShareInfo.password = e.password || "", t.outerShareInfo.short_url = e.short_url, t.outerShareInfo.sdo_id = e.sdo_id) : t.share.shareUrl = ""
                        })
                    }

                    function s() {
                        return a.modifyShareDesc(t.outerShareInfo.sdo_id, t.share.description).then(function (e) {
                            e && (t.share.descriptionOriginal = angular.copy(t.share.description))
                        })
                    }

                    function d() {
                        t.share.shareUrl && i.open(t.share.shareUrl)
                    }

                    function c(e, i, r) {
                        switch (i) {
                            case "wechat":
                                a.shareToWechat(e, i, r, t.share.shareUrl);
                                break;
                            case "qzone":
                            case "tsina":
                                a.shareToPlugins(i, r, t.share.shareUrl)
                        }
                    }

                    function u() {
                        e.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-300",
                            scope: t,
                            data: {
                                message: "取消此次分享？"
                            }
                        }).then(function (e) {
                            f()
                        })
                    }

                    function f() {
                        var i = t.outerShareInfo.sdo_id;
                        i && a.cancelShare(i).then(function (a) {
                            0 == a.data.status && (t.outerShareInfo = {}, e.closeAll())
                        })
                    }
                    t.share = {
                            description: "",
                            descriptionOriginal: "",
                            shareUrl: "",
                            shareUrlCopy: ""
                        }, t.vmStatus = {
                            upgrade: !1,
                            creatShareSuc: !1
                        }, t.showShareDialog = o, t.creatShare = l, t.modifyShareDesc = s, t.gotoSharePage = d, t.cancelSharePop = u, t.shareDashboardTo = c,
                        function () {
                            t.memberData = r.memberData, t.outerShareInfo && t.outerShareInfo.description && (t.share.description = t.outerShareInfo.description, t.share.descriptionOriginal = t.outerShareInfo.description), t.$watch("outerShareInfo.sdo_id", function (e) {
                                if (!e) return !1;
                                var i = a.generateShareUrl(t.outerShareInfo.short_url, t.outerShareInfo.password);
                                t.share.shareUrl = i.url, t.share.shareUrlCopy = i.copyUrl
                            })
                        }()
                }
                return {
                    scope: {
                        outerShareInfo: "=",
                        dashSelected: "=",
                        dashTitle: "="
                    },
                    restrict: "EA",
                    templateUrl: "/static/js/personal/share/social-share.html",
                    replace: !0,
                    link: n
                }
            }])
        }(),
        function () {
            function e(e, t, a) {
                function i(a) {
                    return e.post("/api/outer_share/generate", {
                        dsh_id: a.dashId,
                        description: a.description,
                        private: "public" == a.shareType ? 0 : 1
                    }).then(function (e) {
                        return 0 == e.data.status ? e.data.result : (t(e.data.errstr), null)
                    })
                }

                function r(t) {
                    return e.get("/api/outer_share/delete?sdo_id=" + t)
                }

                function n(a, i) {
                    return e.post("/api/outer_share/modify_desc", {
                        sdo_id: a,
                        description: i
                    }).then(function (e) {
                        return 0 == e.data.status ? e.data : (t(e.data.errstr), null)
                    })
                }

                function o(e, t, a, i) {
                    bdp.loadjs({
                        src: ["https://s1.bdp.cn/static/js/lib/jquery-qrcode/jquery.qrcode_fa248c8.js", "https://s1.bdp.cn/static/js/lib/jquery-qrcode/qrcode_2cfb76d.js"],
                        callback: function () {
                            var t = e.target,
                                a = $('<div class="share-wechat-pop"><div class="qrcode-wrap"></div><div class="foot">扫描二维码分享至微信</div><em class="arrow-left"></em></div>').appendTo("body"),
                                r = $(t).offset();
                            a.css({
                                position: "absolute",
                                zIndex: 99999,
                                top: r.top,
                                left: r.left + $(t).width() + 10
                            }).find(".close-btn").on("click", function () {
                                a.remove()
                            }), a.find(".qrcode-wrap").qrcode({
                                width: 100,
                                height: 100,
                                text: i
                            }), $(t).on("mouseleave.showQrCode", function () {
                                a.remove()
                            })
                        }
                    })
                }

                function l(e, t, i) {
                    i || alert("获取分享链接失败");
                    var r = angular.extend({}, d, {
                            to: e,
                            url: i,
                            product: "BDP",
                            title: encodeURIComponent("快来看看分享自BDP个人版的数据报表“" + t + "”吧，图表直观又酷炫。在BDP，每周1分钟轻松搞定数据报表，从此和加班say goodbye！（来自@BDP个人版）")
                        }),
                        n = "http://share.baidu.com/s?",
                        o = [];
                    for (var l in r)
                        if (r.hasOwnProperty(l))
                            if ("pic" == l && angular.isArray(r[l])) {
                                var s;
                                s = "tsina" == e ? r[l].join("||") : r[l][0], o.push(l + "=" + s)
                            } else o.push(l + "=" + r[l]);
                    n += o.join("&"), a.open(n)
                }

                function s(e, t) {
                    var a = location.protocol + "//" + location.host + e;
                    return {
                        url: a,
                        copyUrl: t ? "链接：" + a + "\n密码：" + t : a
                    }
                }
                var d = {
                    type: "text",
                    pic: [location.origin + "/static/images/bdp-dashboard-overview.png", location.origin + "/static/images/login_logo.png"],
                    title: encodeURIComponent("我在 #BDP# 制作了一个酷炫的数据仪表盘，里面全都是数据干货，快来点击围观！"),
                    desc: "BDP",
                    sign: "off",
                    searchPic: 0,
                    relateUid: 0
                };
                this.creatSdoId = i, this.cancelShare = r, this.modifyShareDesc = n, this.shareToWechat = o, this.shareToPlugins = l, this.generateShareUrl = s
            }
            angular.module("BC.personal").service("shareService", ["$http", "errHint", "$window", e])
        }(),
        function () {
            angular.module("BC.personal").factory("dotGuide", ["$rootScope", function (e) {
                return {
                    data_source: {
                        dataProcess: {
                            videoSrc: "/pmresources/dotGuideVideo/dataProcess.mp4",
                            tooltipText: "数据处理，包含多表关联、追加合并、SQL建表等多种数据处理方式，用于对已有工作表进行加工和建模。",
                            paramVal: "table_guide",
                            guideNum: 1,
                            nextGuideNum: 2
                        },
                        addWbField: {
                            videoSrc: "/pmresources/dotGuideVideo/addWbField.mp4",
                            tooltipText: "工作表计算字段，即用函数创建一个新字段。",
                            paramVal: "table_guide",
                            guideNum: 2,
                            nextGuideNum: 3
                        },
                        replace: {
                            videoSrc: "/pmresources/dotGuideVideo/replace.mp4",
                            tooltipText: "替换数据是指替换工作表中全部或部分数据记录。替换工作表数据后，所有用这张工作表做的图表，数据也会自动更新，无需重复做图。",
                            paramVal: "table_guide",
                            guideNum: 3,
                            nextGuideNum: 4
                        },
                        append: {
                            videoSrc: "/pmresources/dotGuideVideo/append.mp4",
                            tooltipText: "追加数据是指往已有的工作表上追加数据记录行。追加成功后，所有用这张工作表做的图表，数据也会自动更新，无需重复做图。",
                            paramVal: "table_guide",
                            guideNum: 4,
                            nextGuideNum: 5
                        },
                        worktablEidt: {
                            videoSrc: null,
                            tooltipText: "鼠标滑过工作表时，右侧会出现更多<i class='bdp-icon ico-more'></i>按钮，点击可对工作表进行编辑、删除等操作。",
                            paramVal: "table_guide",
                            guideNum: 5,
                            nextGuideNum: 0
                        }
                    },
                    chart_edit: {
                        drillChart: {
                            videoSrc: "/pmresources/dotGuideVideo/drillChart.mp4",
                            tooltipText: "维度支持钻取，可用于在同一张图表上逐层向下查看数据，如省—市—区的数据。",
                            paramVal: "chart_guide",
                            guideNum: 1,
                            nextGuideNum: 2
                        },
                        biaxialDiagram: {
                            videoSrc: "/pmresources/dotGuideVideo/biaxialDiagram.mp4",
                            tooltipText: "添加另一个Y轴，可使用双轴图展示数据。",
                            paramVal: "chart_guide",
                            guideNum: 2,
                            nextGuideNum: 3
                        },
                        advancedComputing: {
                            videoSrc: null,
                            tooltipText: null,
                            paramVal: "chart_guide",
                            guideNum: 4,
                            nextGuideNum: 5
                        },
                        addChartField: {
                            videoSrc: "/pmresources/dotGuideVideo/addChartField.mp4",
                            tooltipText: "计算字段即用函数创建一个新的字段用来做图，分组字段即把某个已有字段按一定规律进行分组。",
                            paramVal: "chart_guide",
                            guideNum: 3,
                            nextGuideNum: 4
                        },
                        sort: {
                            videoSrc: null,
                            tooltipText: null,
                            paramVal: "chart_guide",
                            guideNum: 5,
                            nextGuideNum: 0
                        }
                    },
                    dash_edit: {
                        design: {
                            videoSrc: null,
                            tooltipText: "点击“图文模式”，不仅可以在仪表盘添加文本框，还可以对图表的图例、数值标签等显示效果进行设置，让仪表盘更加图文并茂。",
                            paramVal: "dashboard_guide",
                            guideNum: 2,
                            nextGuideNum: 3
                        },
                        dashEdit: {
                            videoSrc: null,
                            tooltipText: "鼠标滑过图表时，右上角会出现更多<i class='bdp-icon ico-more'></i>按钮，点击可对图表进行导出图片、导出excel、删除图表等操作。",
                            paramVal: "dashboard_guide",
                            guideNum: 1,
                            nextGuideNum: 2
                        },
                        share: {
                            videoSrc: "/pmresources/dotGuideVideo/share.mp4",
                            tooltipText: "通过分享功能，可以把当前做好的数据仪表盘分享给工作伙伴。",
                            paramVal: "dashboard_guide",
                            guideNum: 3,
                            nextGuideNum: 0
                        }
                    }
                }
            }])
            .directive("dotGuide", [
                "commonService", "$http", "commonHttp", "$timeout", "ngDialog", "$location", "$position", 
                "$stateParams", "$rootScope", "errHint", "$jsTipTranslate", "capacityHint", "dotGuide", function (e, t, a, i, r, n, o, l, s, d, c, u, f) {
                return {
                    restrict: "A",
                    templateUrl: "/static/js/common/tpl/guide/dot_guide.html",
                    scope: {
                        dotMask: "=",
                        watchStatus: "=",
                        guideItem: "@",
                        guideType: "@",
                        btnClass: "@",
                        addClass: "="
                    },
                    link: function (e, a, r) {
                        function n() {
                            $("body").off("click.changeDotStep").on("click.changeDotStep", "." + e.btnClass, function (e) {
                                o()
                            })
                        }

                        function o() {
                            e.showDotGuideTip = !1, i(function () {
                                e.watchStatus = e.dotGuideData[e.guideItem].nextGuideNum
                            }, 0), $("." + e.btnClass).off("click.changeDotStep");
                            var a = {};
                            a[e.dotGuideData[e.guideItem].paramVal] = e.dotGuideData[e.guideItem].nextGuideNum, t.post("/api/user/guide_set", a).success(function (e) {
                                return 0 == e.status || (errorHandle(e), !1)
                            })
                        }
                        e.dotGuideData = f[e.guideType], $(a).addClass(e.addClass);
                        var l = e.$watch("watchStatus", function (t) {
                            switch (e.guideItem) {
                                case "advancedComputing":
                                    t === e.dotGuideData[e.guideItem].guideNum && (n(), l());
                                    break;
                                default:
                                    l()
                            }
                        });
                        e.clickShowInfo = function () {
                            if (!e.dotGuideData[e.guideItem].tooltipText) return !1;
                            e.dotMask = !0, i(function () {
                                e.showDotGuideTip = !0, e.dotMask && $("." + e.btnClass).off("click.changeDotStep").on("click.changeDotStep", function (e) {
                                    o()
                                })
                            }, 0)
                        }, $.inArray(e.guideItem, ["design", "share"]) > -1 && ($("body").on("dashboard-scroll-start.dotGuide", function () {
                            $(".J_dash_dot_guide").addClass("ng-hide"), e.showDotGuideTip = !1, e.dotMask = !1
                        }), e.$on("$destroy", function () {
                            $("body").off("dashboard-scroll-start.dotGuide")
                        })), e.seeHelpVideo = function () {
                            o();
                            var t = '                        <div class="guide-video dot-guide-video" style="z-index:1000000001">                             <span class="video-close bdp-icon removeVideo" title="关闭">                                 <i class="bdp-icon ico-cancel-white"></i>                              </span>                             <video class="slow-in" id="guide_video" src="' + e.dotGuideData[e.guideItem].videoSrc + '" controls="controls"></video>                         </div>                    ';
                            $("body").append(t), $(".removeVideo").off("click.removeDotVideo").on("click.removeDotVideo", function (e) {
                                e.preventDefault(), $(".dot-guide-video").remove(), $(".removeVideo").off("click.removeDotVideo")
                            })
                        }, e.iKnowClick = function () {
                            o()
                        }
                    }
                }
            }])
        }(), 
        angular.module("BC.personal").directive("personalBroadcast", ["commonService", "$rootScope", function (e, t) {
                return {
                    restrict: "A",
                    templateUrl: "/static/js/common/tpl/notice_broadcast.html",
                    replace: !1,
                    scope: !0,
                    link: function (a, i, r) {
                        function n() {
                            $.cookie("invitationActivity", "0");
                            var t = {
                                new_version: 0
                            };
                            e.guide.guideSet(t).then(function (e) {
                                return 0 == e.status || (errorHandle(e), !1)
                            })
                        }
                        a.closeBroadcast = function () {
                            t.personalInfo.new_version = !1, n()
                        }, a.toLearn = function () {
                            window.open("/hd/invite/index.html"), t.personalInfo.new_version = !1, n()
                        }
                    }
                }
            }]),
            function () {
                angular.module("BC.personal").controller("noviceGuideCtrl", ["$scope", "ngDialog", function (e, t) {
                    function a() {
                        o.mode.currentStep == o.mode.maxStep || (o.mode.currentStep += 1, o.noviceLogger("nextStep"))
                    }

                    function i(e) {
                        o.mode.currentStep = e
                    }

                    function r() {
                        o.mode.videoActve = !1, $(".novice-active" + o.mode.currentStep).find("video").each(function (e, t) {
                            t.pause()
                        })
                    }

                    function n(e) {
                        BDPLogger.log("noviceGuide", {
                            category: "user_interact",
                            action: "guide",
                            opt_label: o.mode.currentStep + "-" + e,
                            opt_value: 1
                        })
                    }
                    var o = this;
                    o.mode = {
                            videoList: [1, 2, 3, 4, 5, 6],
                            videoActve: !1,
                            currentStep: 0,
                            maxStep: void 0
                        }, o.nextStep = a, o.stepTo = i, o.stopVideo = r, o.noviceLogger = n,
                        function () {
                            o.mode.maxStep = o.mode.videoList.length, o.mode.currentStep = 1, setTimeout(function () {
                                $(".novice-video").on("playing.noviceGuide", function (t) {
                                    t.preventDefault(), o.mode.videoActve = !0, e.$digest(), o.noviceLogger("videoPlay")
                                }).on("ended.noviceGuide", function (t) {
                                    t.preventDefault(), o.mode.videoActve = !1, e.$digest(), o.noviceLogger("videoEnded")
                                }).on("pause.noviceGuide", function (e) {
                                    e.preventDefault(), o.noviceLogger("videoPause")
                                }), $(".video-mask").on("click.playVideo", function (e) {
                                    e.preventDefault(), $(this).siblings("video")[0].play()
                                })
                            }, 10)
                        }()
                }])
            }(),
            function () {
                angular.module("BC.personal")
                .directive("noviceGuide", ["ngDialog", "$rootScope", function (e, t) {
                    return {
                        restrict: "A",
                        replace: !1,
                        scope: !0,
                        link: function (t, a, i) {
                            a.on("click.noviceGuide", function (a) {
                                a.preventDefault(), e.open({
                                    template: "/static/js/personal/novice-guide/novice-guide.html",
                                    className: "ngdialog-theme-default novice-guide",
                                    scope: t,
                                    showClose: !1
                                }), BDPLogger.log("noviceGuide", {
                                    category: "user_interact",
                                    action: "guide",
                                    opt_label: "openDialog",
                                    opt_value: 1
                                })
                            })
                        }
                    }
                }])
            }()
    }(),
    function () {
        function e(e) {
            return {
                restrict: "A",
                scope: {
                    show: "="
                },
                templateUrl: "/static/partials/directiveTemplates/ksturl_tip.html",
                link: function (e, t, a) {
                    e.hideLayer = function () {
                        e.show = !1
                    }
                }
            }
        }

        function t(e) {
            return {
                restrict: "A",
                scope: {
                    show: "="
                },
                templateUrl: "/static/database/view/baidustatistics_tip.html",
                link: function (e, t, a) {
                    e.hideLayer = function () {
                        e.show = !1
                    }
                }
            }
        }
        angular.module("BC.directives")
        .directive("ksturlTip", e)
        .directive("baidustatisticsTip", t), 
        e.$inject = ["$rootScope"], 
        t.$inject = ["$rootScope"]
    }(), 
    angular.module("BC.directives")
    .directive("pagination", ["commonService", "errHint", "$jsTipTranslate", function (e, t, a) {
        return {
            restrict: "A",
            templateUrl: "/static/partials/directiveTemplates/pagination.html",
            scope: {
                currPage: "=",
                totalPage: "=",
                onCommit: "&"
            },
            link: function (e) {
                e.pageListPos = function (e) {
                    var t = $(e.target).offset(),
                        a = $(window).height(),
                        i = 30;
                    a - t.top < 110 && (i = -80), $(".page-list").css({
                        top: i
                    }), e.stopPropagation()
                }, e.goToFirstPage = function () {
                    1 == e.currPage ? t(e.tips["pagination.isAlreadyFirstPage"]) : (e.currPage = 1, e.onCommit({
                        page: e.currPage
                    }))
                }, e.goToLastPage = function () {
                    e.currPage == e.totalPage ? t(e.tips["pagination.isAlreadyLastPage"]) : (e.currPage = e.totalPage, e.onCommit({
                        page: e.currPage
                    }))
                }, e.goToPrevPage = function () {
                    1 == e.currPage ? t(e.tips["pagination.isAlreadyFirstPage"]) : (e.currPage--, e.onCommit({
                        page: e.currPage
                    }))
                }, e.goToNextPage = function () {
                    e.currPage == e.totalPage ? t(e.tips["pagination.isAlreadyLastPage"]) : (e.currPage++, e.onCommit({
                        page: e.currPage
                    }))
                }, a(["pagination.isAlreadyFirstPage", "pagination.isAlreadyLastPage"], e)
            }
        }
    }]),
    function () {
        angular.module("bdp.charts")
        .directive("markPoint", function () {
            return {
                link: function (e) {
                    e.addMarkPoint = function () {
                        e.checkYAxisUniqId().then(function () {
                            e.inAddingMarkPoint = !0, setTimeout(function () {
                                $(document).on("click.cancelMarkPoint", function () {
                                    e.endAddMarkPoint(), e.$$phase || e.$apply()
                                });
                                var t = $(".chart-args").height(),
                                    a = $(".chart-left").width() + $(".chart-left-side").width() + 10;
                                $(".add-point-mask .mask-top").css({
                                    height: t,
                                    lineHeight: t + "px"
                                }), $(".add-point-mask .mask-left").css({
                                    width: a
                                })
                            }, 0)
                        })
                    }, e.endAddMarkPoint = function () {
                        e.inAddingMarkPoint = !1, $(document).off("click.cancelMarkPoint")
                    }
                },
                controller: ["$scope", "$q", "commonService", "ngDialog", function (e, t, a, i) {
                    var r = !1;
                    e.checkYAxisUniqId = function () {
                        var a = t.defer();
                        if (r) a.resolve();
                        else {
                            var i = e.chart_ops.meta.level[e.drill_level],
                                n = i.y[0] || i.y_optional[0];
                            if (n && !n.uniq_id) {
                                var o = +new Date;
                                angular.forEach(i.y, function (e) {
                                    e.uniq_id = o++
                                }), angular.forEach(i.y_optional, function (e) {
                                    e.uniq_id = o++
                                }), e.saveChartImmediate().then(a.resolve, a.reject)
                            } else a.resolve()
                        }
                        return r = !0, a.promise
                    }, e.editMarkPoint = function (t, a, r) {
                        r && r.stopPropagation(), i.open({
                            template: "/static/partials/dialogTemplates/mark_point_model.html",
                            className: "ngdialog-theme-default ngdialog-small",
                            scope: e,
                            data: {
                                point: angular.extend({}, t, {
                                    ct_id: a
                                }),
                                type: "modify"
                            },
                            controller: "EditMarkPointCtrl"
                        })
                    }, e.removeMarkPoint = function (t, i) {
                        return a.fieldComment.del(t, i.fc_id).then(function () {
                            e.saveChartImmediate()
                        })
                    }, e.removeMarkPointById = function (t, i, r) {
                        return r.stopPropagation(), a.fieldComment.del(t, i).then(function () {
                            e.saveChartImmediate()
                        })
                    }, e.markPoint_conf = [], e.show_makePoint_model = function (t) {
                        e.$broadcast("displayMarkPointModel", t)
                    }
                }]
            }
        })
        .directive("chartMarkPoints", function () {
            return {
                replace: !0,
                templateUrl: "/static/js/dashboard/tpl/markPointTooltip.html",
                link: function (e) {
                    e.setTooltipPos = function (t, a) {
                        a.show = !0, a.popover = {}, a.pos.top < 15 || "edit" === e.mode && a.pos.top < 40 ? a.popover.pos = "bottom" : a.popover.pos = "top"
                    }
                }
            }
        })
    }(),
    function () {
        "use strict";

        function e(e, a) {
            function i(t, i, r) {
                function n() {
                    e.role;
                    a(function () {
                        var e = $(i[0]).find("ul"),
                            t = $(i[0]).find(".ico-more").offset(),
                            a = {},
                            r = e.height(),
                            n = $(window).height();
                        a.left = t.left - 80, r + t.top + 24 > n ? a.top = t.top - r - 24 : a.top = t.top + 24, e.css({
                            top: a.top,
                            left: a.left,
                            visibility: "visible"
                        })
                    }, 0)
                }
                var o = t.operate;
                t.toggleList = function () {
                    o.show = !o.show, o.show && n()
                }, t.$watch("operate.show", function (e, i) {
                    if (e !== i && 1 == e) {
                        var r = angular.element(".side-menu-list").scrollTop();
                        a(function () {
                            angular.element(".side-menu-list").on("scroll.userOperate", function (e) {
                                Math.abs(r - $(e.target).scrollTop()) > 8 && (t.operate.show = !1, t.$digest())
                            })
                        }, 0)
                    } else e !== i && 0 == e && angular.element(".side-menu-list").off("scroll.userOperate")
                })
            }
            return {
                templateUrl: "/static/user/operate/user_operate.html",
                restrict: "EA",
                replace: !0,
                link: i,
                controller: t
            }
        }

        function t(e) {
            e.operate = {}
        }
        angular.module("BC.directives")
        .directive("userOperate", ["$rootScope", "$timeout", e]), 
        t.$inject = ["$scope"]
    }(),
    function () {
        function e(e, t, a) {
            function i(e, t, i) {
                function r() {
                    var t = e.query.val,
                        i = 0;
                    if (t) {
                        n(t, e.folderList);
                        for (var r = 0, l = e.folderList.length; r < l; r++)
                            if (!e.folderList[r].hide) {
                                i = r;
                                break
                            }
                    } else o();
                    angular.forEach(e.folderList, function (a) {
                        a.hide || (e.hideAll = !1), angular.forEach(a.sub_folders, function (e) {
                            e.hit_top = !1, a.name.toLowerCase().indexOf(t.toLowerCase()) > -1 && (e.hit_top = !a.hide), angular.forEach(e.tb_list, function (i) {
                                i.hit_top = !1, a.name.toLowerCase().indexOf(t.toLowerCase()) > -1 ? i.hit_top = !a.hide : e.name.toLowerCase().indexOf(t.toLowerCase()) > -1 && (i.hit_top = !e.hide)
                            })
                        }), angular.forEach(a.tb_list, function (e) {
                            e.hit_top = !1, a.name.toLowerCase().indexOf(t.toLowerCase()) > -1 && (e.hit_top = !a.hide)
                        })
                    }), e.$apply(), a(function () {
                        e.folderList.length > 0 && e.initFolder({
                            index: i
                        })
                    }, 10)
                }

                function n(e, t) {
                    function a(t) {
                        if (t.name.toLowerCase().indexOf(e.toLowerCase()) > -1) return void(t.hide = !1);
                        t.sub_folders && t.sub_folders.length > 0 && t.sub_folders.map(a);
                        var i = function (t) {
                            var a = 0;
                            return t.map(function (t) {
                                t.name.toLocaleLowerCase().indexOf(e.toLocaleLowerCase()) > -1 ? (t.hide = !1, a++) : t.hide = !0
                            }), 0 == a
                        }(t.tb_list);
                        if (i) {
                            if (!t.sub_folders || 0 == t.sub_folders.length) return void(t.hide = i);
                            ! function (e) {
                                if (0 == e.length) return !0;
                                var t = 0;
                                return e.map(function (e) {
                                    e.hide && t++
                                }), t == e.length
                            }(t.sub_folders) ? t.hide = !1: t.hide = !0
                        } else t.hide = i
                    }
                    t.map(a)
                }

                function o() {
                    function t(e) {
                        e.hide = !1
                    }

                    function a(e) {
                        e.hide = !1, e.sub_folders && e.sub_folders.length > 0 && e.sub_folders.map(a), e.tb_list && e.tb_list.length > 0 && e.tb_list.map(t)
                    }
                    e.folderList.map(a)
                }
                var l = null;
                e.query = {}, e.hideAll = !1, angular.element(t).on("keyup.searchTable", function (t) {
                    clearTimeout(l), e.query.val = t.target.value, l = setTimeout(r, 100)
                })
            }
            return {
                restrict: "A",
                link: i,
                scope: {
                    folderList: "=",
                    initFolder: "&"
                }
            }
        }
        angular.module("BC.directives")
        .directive("userSearchWb", e), e.$inject = ["$rootScope", "$filter", "$timeout"]
    }(),
    function () {
        function e(e) {
            function t(e, t, a) {
                function i() {
                    if (e.folderList && e.wbList) {
                        var t = angular.copy(e.folderList),
                            a = e.wbList,
                            i = [];
                        a.map(function (e) {
                            i.push(e.tb_id)
                        }), e.data.sharedFolderList = function () {
                            function e(e) {
                                var t = [];
                                return e.map(function (e) {
                                    var r = $.inArray(e.tb_id, i);
                                    if (r > -1) {
                                        var n = a[r];
                                        t.push({
                                            tb_type: e.tb_type,
                                            type: e.type,
                                            name: n.name,
                                            sh_id: n.sh_id,
                                            tb_id: n.tb_id,
                                            filter: n.filter,
                                            col_filter: n.col_filter,
                                            is_col_filter: n.is_col_filter
                                        })
                                    }
                                }), t
                            }

                            function r(t, a, i) {
                                t.tb_list = e(t.tb_list), t.sub_folders && t.sub_folders.length > 0 && n(t.sub_folders, r), 0 != t.tb_list.length || t.sub_folders && 0 != t.sub_folders.length || i.splice(a, 1)
                            }
                            var n = bdp.utils.descMap;
                            return n(t, r), t
                        }(), e.setCurFolder(0)
                    }
                }
                e.curFolder = {}, e.curFolderItem = null, e.data = {}, e.$watch("folderList", function (e) {
                    e && i()
                }), e.$watch("wbList", function (e) {
                    e && i()
                }), e.openFolder = function (t, a) {
                    e.setCurFolder(t, a)
                }, e.setCurFolder = function (t, a) {
                    var i = e.curFolder;
                    i.index = t, i.subIndex = a;
                    var r;
                    r = void 0 === a ? e.data.sharedFolderList[t] : e.data.sharedFolderList[t].sub_folders[a], e.curFolderItem = r
                }
            }
            return {
                restrict: "A",
                templateUrl: "/static/user/wb/user_wb.html",
                link: t,
                scope: {
                    wbList: "=",
                    folderList: "="
                }
            }
        }

        function t(e, t) {
            function a(e, a, i) {
                function r() {
                    if (e.folderList && e.wbList) {
                        var t = angular.copy(e.folderList),
                            a = e.wbList,
                            i = [];
                        a.map(function (e) {
                                i.push(e.tb_id)
                            }),
                            function () {
                                function e(e) {
                                    e.map(function (e) {
                                        var t = $.inArray(e.tb_id, i);
                                        if (t > -1) {
                                            var r = a[t];
                                            e.sh_id = r.sh_id, e.filter = r.filter, e.col_filter = r.col_filter, e.is_col_filter = r.is_col_filter, e.choose = !0
                                        }
                                    })
                                }

                                function r(t, a) {
                                    e(t.tb_list), t.sub_folders && t.sub_folders.length > 0 && t.sub_folders.map(r)
                                }
                                t.map(r)
                            }(), e.data.sharedList = e.sharedList = t, e.setCurFolder(0),
                            function () {
                                function e(t, i, r) {
                                    t.sub_folders && a(t.sub_folders, e), 0 != t.tb_list.length || t.sub_folders && 0 != t.sub_folders.length || r.splice(i, 1)
                                }
                                var a = bdp.utils.descMap;
                                a(t, e)
                            }(), bdp.bdpTables.initFolderListChoose(e.data.sharedList)
                    }
                }

                function n(t, a) {
                    function i(e, t) {
                        t.map(function (t) {
                            t.choose = e
                        })
                    }
                    var r, n = [];
                    n = void 0 === a ? e.data.sharedList[t] : e.data.sharedList[t].sub_folders[a], r = n.choose, n.className = "", i(r, n.tb_list), void 0 === a && n.sub_folders && n.sub_folders.length > 0 && n.sub_folders.map(function (e) {
                        e.choose = r, i(r, e.tb_list)
                    }), bdp.bdpTables.initFolderListChoose(e.data.sharedList, t)
                }
                e.curFolder = {}, e.curFolderItem = null, e.data = {}, e.$watch("folderList", function (e) {
                    e && r()
                }), e.$watch("wbList", function (e) {
                    e && r()
                }), e.openFolder = function (t, a) {
                    e.setCurFolder(t, a)
                }, e.setCurFolder = function (t, a) {
                    var i = e.curFolder;
                    i.index = t, i.subIndex = a;
                    var r;
                    r = void 0 === a ? e.data.sharedList[t] : e.data.sharedList[t].sub_folders[a], e.curFolderItem = r
                }, e.checkAll = function (e, t) {
                    n(e, t)
                }, e.checkone = function (t) {
                    bdp.bdpTables.initFolderListChoose(e.data.sharedList, t)
                }, e.editWorktableFilter = function (a) {
                    a.filter = a.filter || {}, t.open({
                        template: "/static/partials/dialogTemplates/worktable-filter.html",
                        scope: e,
                        data: {
                            editTbModel: a,
                            belongId: e.belongId,
                            belongType: e.belongType
                        },
                        className: "ngdialog-theme-default ngdialog-worktable-filter J-worktable-filter",
                        controller: "WorktableFilterCtrl"
                    })
                }
            }
            return {
                restrict: "A",
                templateUrl: "/static/user/wb/user_modify_wb.html",
                link: a,
                scope: {
                    wbList: "=",
                    folderList: "=",
                    sharedList: "=",
                    belongId: "=",
                    belongType: "="
                }
            }
        }
        angular.module("BC.directives")
        .directive("userWb", e), 
        e.$inject = ["$rootScope"], 
        angular.module("BC.directives")
        .directive("userModifyWb", t), 
        t.$inject = ["$rootScope", "ngDialog"]
    }(), 
    angular.module("BC.directives")
    .directive("bubbleSize", function () {
        return {
            templateUrl: "/static/partials/directiveTemplates/bubbleSize.html",
            link: function (e, t) {},
            controller: "bubbleSizeCtrl"
        }
    })
    .controller("bubbleSizeCtrl", ["$scope", "ngDialog", "$getCustomFormula", "errHint", "commonService", "$jsTipTranslate", function (e, t, a, i, r, n) {
        function o(e, t) {
            return e.x1 < t.x1 + (t.x2 - t.x1) / 2 && t.x2 - (t.x2 - t.x1) / 2 < e.x2 && e.y1 < t.y1 + (t.y2 - t.y1) / 2 && e.y2 - (t.y2 - t.y1) / 2 < e.y2
        }

        function l(t) {
            return e.drill_level > 0 ? r.chart.getSizeGroups(e.ct_id, t, e.drill_level, e.drill_field, e.drill_value) : r.chart.getSizeGroups(e.ct_id, t)
        }

        function s(e, t, a) {
            if (e < 2) return [t[1] + 2];
            for (var i = d3.scale.linear().domain([1, e]).range(t), r = [], n = 0; n < e; n++) r.push(Math.round(i(n + 1)) + 2);
            return a ? r.reverse() : r
        }
        e.$watch("chart_ops.meta.level[drill_level]", function (t) {
            e.currentMeta = t, t.bubble_setting && (e.bubbleSetting = t.bubble_setting)
        }), e.onDrop = function (t, a) {
            var r = e.dragField,
                n = e.currentMeta.y.concat(e.currentMeta.y_scatter || []);
            if (0 == n.length) return i(e.tips["chart.dragFieldToAxis"]), !1;
            if ("date" == r.data_type) return void i(e.tips["chart.canNotSetOnDate"]);
            for (var o = 0; o < n.length; o++)
                if (!n[o].aggregator && 1 != n[o].is_build_aggregated && (1 == r.is_build_aggregated || "number" != r.data_type)) return void i(e.tips["chart.invalidSetting"]);
            var l = e.initFormula(r, e.currentMeta);
            e.bubbleSetting = {
                fid: r.fid,
                field: r,
                aggregator: l.defaults,
                size_range: [3, 8]
            }, e.showBubbleSettingDialog()
        }, e.$on("onDropToSize", function (t, a) {
            e.onDrop(a.dropEvent, a.ui)
        }), e.$watch("bubble_size_groups", function (t) {
            t && t.length && (e.size_groups = t, e.bubble_size_preview = s(t.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
        }), e.initFormula = function (e, t) {
            if (1 == e.is_build_aggregated) return {
                defaults: "",
                formulaList: []
            };
            var i = t.y.concat(t.y_scatter || []);
            if ("number" == e.data_type) {
                for (var r = 0; r < i.length; r++)
                    if (i[r].aggregator || 1 == i[r].is_build_aggregated) return {
                        defaults: "SUM",
                        formulaList: a(["SUM", "AVG", "MAX", "MIN", "COUNT", "COUNT_DISTINCT"])
                    };
                return {
                    defaults: "",
                    formulaList: []
                }
            }
            return {
                defaults: "COUNT",
                formulaList: a(["COUNT", "COUNT_DISTINCT"])
            }
        }, e.startDrag = function () {
            angular.element(".chart-left-side,.chart-main").css({
                overflow: "visible"
            })
        }, e.removePosition = function () {
            angular.element(".scatter-bubble-layer").css({
                overflow: "visible"
            })
        }, e.del = function (t, a) {
            angular.element(".scatter-bubble-layer,.chart-left-side,.chart-main").css({
                overflow: ""
            });
            var i = a.helper.position(),
                r = $(".scatter-bubble-layer"),
                n = {
                    width: r.width(),
                    height: r.height()
                },
                l = {
                    width: a.helper.width(),
                    height: a.helper.height()
                };
            if (o({
                    x1: 0,
                    y1: 0,
                    x2: n.width,
                    y2: n.height
                }, {
                    x1: i.left,
                    y1: i.top,
                    x2: l.width + i.left,
                    y2: l.height + i.top
                })) return void a.helper.css({
                left: 0,
                top: 0
            });
            delete e.bubbleSetting, delete e.currentMeta.bubble_setting, delete e.size_groups, e.saveChartImmediate(), t.stopPropagation()
        }, e.clickPanel = function () {
            e.showColorSettingModalByField()
        }, e.showBubbleSettingDialog = function () {
            t.open({
                className: "ngdialog-theme-default ngdialog-bubble-setting",
                templateUrl: "/static/partials/dialogTemplates/bubble_size_setting.html",
                scope: e,
                controller: ["$scope", function (e) {
                    l(e.bubbleSetting).then(function (t) {
                        t && (e.size_groups = t.bubble_size_groups, e.bubble_size_preview = s(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                    }), e.changeAggr = function () {
                        l(e.bubbleSetting).then(function (t) {
                            t && (e.size_groups = t.bubble_size_groups, e.bubble_size_preview = s(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                        })
                    }, e.formulaList = e.initFormula(e.bubbleSetting.field, e.currentMeta).formulaList, e.toggleReverse = function () {
                        e.bubble_size_preview = s(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse)
                    }, e.$watch("bubbleSetting.size_range", function (t) {
                        t && e.size_groups && (e.bubble_size_preview = s(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                    }, !0)
                }]
            })
        }, e.confirm = function () {
            e.currentMeta.bubble_setting = e.bubbleSetting, e.saveChartImmediate()
        }, e.clickPanel = e.showBubbleSettingDialog, n(["chart.dragFieldToAxis", "chart.canNotSetOnDate", "chart.invalidSetting"], e)
    }]), 
    angular.module("BC.directives")
    .directive("gisBubbleSize", function () {
        return {
            templateUrl: "/static/partials/directiveTemplates/bubbleSize.html",
            link: function (e, t) {},
            controller: "gisBubbleSizeCtrl"
        }
    })
    .controller("gisBubbleSizeCtrl", ["$scope", "ngDialog", "$getCustomFormula", "errHint", "commonService", function (e, t, a, i, r) {
        function n(e, t) {
            return e.x1 < t.x1 + (t.x2 - t.x1) / 2 && t.x2 - (t.x2 - t.x1) / 2 < e.x2 && e.y1 < t.y1 + (t.y2 - t.y1) / 2 && e.y2 - (t.y2 - t.y1) / 2 < e.y2
        }

        function o(t) {
            return r.chart.getGisSizeGroups(e.chartId, t, e.currentLayerIndex)
        }

        function l(e, t, a) {
            if (e < 2) return [t[1] + 2];
            for (var i = d3.scale.linear().domain([1, e]).range(t), r = [], n = 0; n < e; n++) r.push(Math.round(i(n + 1)) + 2);
            return a ? r.reverse() : r
        }
        e.$watch("chart_ops.meta.layers[currentLayerIndex]", function (t) {
            e.currentMeta = t, t && t.bubble_setting && (e.bubbleSetting = t.bubble_setting)
        }), e.onDrop = function (t, a) {
            var r = e.dragField;
            if ("date" == r.data_type) return void i("不能对日期字段进行尺寸设置");
            if ("1" == r.is_build_aggregated && "string" == r.data_type) return void i("不能对文本类型的聚合字段进行尺寸设置");
            var n = e.initFormula(r, e.currentMeta);
            e.bubbleSetting = {
                fid: r.fid,
                field: r,
                aggregator: n.defaults,
                size_range: [3, 8]
            }, e.showBubbleSettingDialog()
        }, e.$on("onDropToSize", function (t, a) {
            e.onDrop(a.dropEvent, a.ui)
        }), e.$watch("bubble_size_groups", function (t) {
            t && t.length && (e.size_groups = t, e.bubble_size_preview = l(t.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
        }), e.initFormula = function (e, t) {
            if (1 == e.is_build_aggregated) return {
                defaults: "",
                formulaList: []
            };
            var i = t.y;
            return "number" == e.data_type ? i[0] && i[0].aggregator ? {
                defaults: "SUM",
                formulaList: a(["SUM", "AVG", "MAX", "MIN", "COUNT", "COUNT_DISTINCT"])
            } : {
                defaults: "",
                formulaList: []
            } : {
                defaults: "COUNT",
                formulaList: a(["COUNT", "COUNT_DISTINCT"])
            }
        }, e.startDrag = function () {
            angular.element(".chart-left-side,.gis-main").css({
                overflow: "visible"
            })
        }, e.removePosition = function () {
            angular.element(".scatter-bubble-layer").css({
                overflow: "visible"
            })
        }, e.del = function (t, a) {
            angular.element(".scatter-bubble-layer,.chart-left-side,.gis-main").css({
                overflow: ""
            });
            var i = a.helper.position(),
                r = $(".scatter-bubble-layer"),
                o = {
                    width: r.width(),
                    height: r.height()
                },
                l = {
                    width: a.helper.width(),
                    height: a.helper.height()
                };
            if (n({
                    x1: 0,
                    y1: 0,
                    x2: o.width,
                    y2: o.height
                }, {
                    x1: i.left,
                    y1: i.top,
                    x2: l.width + i.left,
                    y2: l.height + i.top
                })) return void a.helper.css({
                left: 0,
                top: 0
            });
            delete e.bubbleSetting, delete e.currentMeta.bubble_setting, delete e.size_groups, e.saveChartImmediate(), t.stopPropagation()
        }, e.clickPanel = function () {
            e.showColorSettingModalByField()
        }, e.showBubbleSettingDialog = function () {
            t.open({
                className: "ngdialog-theme-default ngdialog-bubble-setting",
                templateUrl: "/static/partials/dialogTemplates/bubble_size_setting.html",
                scope: e,
                controller: ["$scope", function (e) {
                    o(e.bubbleSetting).then(function (t) {
                        t && (e.size_groups = t.bubble_size_groups, e.bubble_size_preview = l(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                    }), e.changeAggr = function () {
                        o(e.bubbleSetting).then(function (t) {
                            t && (e.size_groups = t.bubble_size_groups, e.bubble_size_preview = l(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                        })
                    }, e.formulaList = e.initFormula(e.bubbleSetting.field, e.currentMeta).formulaList, e.toggleReverse = function () {
                        e.bubble_size_preview = l(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse)
                    }, e.$watch("bubbleSetting.size_range", function (t) {
                        t && e.size_groups && (e.bubble_size_preview = l(e.size_groups.length, e.bubbleSetting.size_range, e.bubbleSetting.reverse))
                    }, !0)
                }]
            })
        }, e.confirm = function () {
            var a = e.dragField;
            if (a && "1" == a.is_build_aggregated && "number" == a.data_type)
                for (var i = e.viewData.currentLayer, r = 0; r < i.y.length; r++) 2 == i.y[r].is_build_aggregated || 0 == i.y[r].is_build_aggregated ? "number" === i.y[r].data_type ? i.y[r].aggregator = "SUM" : i.y[r].aggregator = "COUNT" : 1 == i.y[r].is_build_aggregated && (i.y[r].aggregator = "");
            e.currentMeta.bubble_setting = e.bubbleSetting, e.saveChartImmediate(), t.closeAll()
        }, e.clickPanel = e.showBubbleSettingDialog
    }]),
    function () {
        function e() {
            function e(e, t, a) {
                e.data = {}, e.curFolder = {}, e.$watch("wbList", function (t) {
                    t && (e.wbList.map(function (e) {
                        e.name || (e.name = "根目录")
                    }), e.data.wbList = e.wbList, e.setCurFolder(0))
                }), e.openFolder = function (t, a) {
                    e.setCurFolder(t, a)
                }, e.setCurFolder = function (t, a) {
                    var i = e.curFolder;
                    i.index = t, i.subIndex = a;
                    var r;
                    r = void 0 === a ? e.data.wbList[t] : e.data.wbList[t].sub_folders[a], e.curFolderItem = r
                }
            }
            return {
                restrict: "A",
                templateUrl: "/static/workspace/wb/manage_work_tables.html",
                link: e,
                scope: {
                    wbList: "="
                }
            }
        }
        angular.module("BC.directives").directive("wpWb", e), e.$inject = []
    }(),
    function () {
        function e() {
            function e(e, t, a) {
                e.data = {}, e.curFolder = {}, e.$watch("wbList", function (t) {
                    t && (e.data.wbList = e.wbList, e.setCurFolder(e.data.wbList[0]))
                }), e.openFolder = function (t) {
                    e.setCurFolder(t)
                }, e.setCurFolder = function (t) {
                    if (t) {
                        var a = t.subs || t.dsh_list;
                        angular.forEach(a, function (e) {
                            e.attribute || (e.attribute = e.dsh_id ? "dashboard" : "project")
                        }), e.curFolderItem = t
                    }
                }
            }
            return {
                restrict: "A",
                templateUrl: "/static/workspace/wb/manage_dash_lists.html",
                link: e,
                scope: {
                    wbList: "="
                }
            }
        }
        angular.module("BC.directives").directive("wpDl", e), e.$inject = []
    }(),
    function () {
        function e(e) {
            function t(t, a, i) {
                t.data = {}, t.curFolder = {}, t.selectDash = [], t.$watch("wsProj", function (e) {
                    e && (t.data.wsProj = t.wsProj, t.addParent(t.data.wsProj), t.setCurFolder(0))
                }), t.openFolder = function (a) {
                    t.setCurFolder(a), t.openStateItem = [], t.curOpenItemId = a.proj_id, e.findParId(a, t.openStateItem)
                }, t.addParent = function (e) {
                    angular.forEach(e, function (e) {
                        var a = e.subs;
                        if (a) {
                            var i = e;
                            angular.forEach(a, function (a) {
                                a.parent = i, a.subs && t.addParent(e.subs)
                            })
                        }
                    })
                }, t.setCurFolder = function (a) {
                    a.subs && (t.curFolderItem = e.getSubsByType(a))
                }, t.countChoChild = function (e) {
                    var t = e.subs;
                    if (t) {
                        var a = 0;
                        angular.forEach(t, function (e) {
                            e.check && a++
                        })
                    }
                    e.checkChild = a
                }, t.makeParent = function (e, a) {
                    var i = (e.check, e.parent);
                    i && (t.countChoChild(i), i.is_all = i.checkChild == i.subs.length ? 1 : 0, i.check = a || !!i.is_all, i.parent && t.makeParent(i, a))
                }, t.checkone = function (e) {
                    t.makeParent(e), t.selectDash.push(e)
                }, t.checkAll = function (e) {
                    function a(e) {
                        e && e.forEach(function (e) {
                            e.check = i, i || (e.is_all = 1), e.subs ? a(e.subs) : e.dsh_id && t.selectDash.push(e)
                        })
                    }
                    var i = e.check;
                    e.proj_id;
                    a(e.subs), t.makeParent(e)
                }
            }
            return {
                restrict: "A",
                templateUrl: "/static/workspace/wb/manage_add_dashboard.html",
                link: t,
                scope: {
                    wsProj: "="
                }
            }
        }
        angular.module("BC.directives")
        .directive("wpAd", e), 
        e.$inject = ["multipleProService"]
    }(), 
    angular.module("BC.directives")
    .directive("bdpPage", function () {
        return {
            templateUrl: "/static/partials/directiveTemplates/page.html",
            link: function (e, t) {},
            controller: "pageCtrl",
            scope: {
                curPage: "=",
                total: "="
            }
        }
    }), pageCtrl.$inject = ["$scope", "$timeout"],
    function () {
        angular.module("BC.directives")
        .directive("freeDrillSetting", ["ngDialog", function (e) {
            return {
                link: function (t, a) {
                    t.subDates = ["year", "quarter", "month", "week", "day", "hour", "minute", "second"], 
                    t.sortFreeDrillFields = {
                        items: ".J-sortable-freedrill-field",
                        start: function () {},
                        update: function (e, t) {},
                        stop: function (e, a) {
                            t.freeDrillFieldIds = t.freeDrillFields.map(function (e) {
                                return e.fid
                            })
                        }
                    }, 
                    t.onFreeDrillSettingChanged = function () {
                        var e = {
                            category: "user_interact",
                            action: "chart_edit",
                            opt_label: JSON.stringify({
                                ct_id: t.chart_id,
                                type: t.viewMeta.free_drill_setting.enabled ? "enable" : "disable"
                            })
                        };
                        BDPLogger.log("change_free_drill", e), t.chart_ops.meta.level.forEach(function (e) {
                            e != t.viewMeta && (e.free_drill_setting = t.viewMeta.free_drill_setting)
                        }), t.viewMeta.free_drill_setting.enabled && t.showFreeDrillSetting(), t.saveChartImmediate({
                            only_save_meta: !0,
                            closeDialog: !1
                        })
                    }, 
                    t.changeFreeDrillLimited = function (e) {
                        t.free_drill_limited = e
                    }, 
                    t.showFreeDrillSetting = function () {
                        if (void 0 === t.viewMeta.free_drill_setting.limited && (t.viewMeta.free_drill_setting.limited = !1), t.free_drill_limited = t.viewMeta.free_drill_setting.limited, t.freeDrillFields = [], t.$bdpChart && t.$bdpChart.info.free_drill_setting) {
                            var a = t.$bdpChart.info.free_drill_setting.field_list;
                            if (a && a.length) {
                                var i = t.field_list.map(function (e) {
                                    return e.fid
                                });
                                a = a.map(function (e) {
                                    var a = i.indexOf(e.fid);
                                    return angular.copy(t.field_list[a])
                                }), t.freeDrillFields = a
                            }
                        }
                        t.freeDrillFieldIds = t.freeDrillFields.map(function (e) {
                            return e.fid
                        });
                        var r = t.viewMeta.x.concat(t.viewMeta.compare_axis || []).map(function (e) {
                            return "date" !== e.data_type ? e.fid : ""
                        });
                        t.optionalFreeDrillFields = t.field_list.filter(function (e) {
                            return "number" !== e.data_type && r.indexOf(e.fid) < 0 && angular.copy(e)
                        }), 
                        e.open({
                            template: "/static/partials/dialogTemplates/free-drill-setting.html",
                            className: "ngdialog-theme-default free-drill-setting",
                            scope: t
                        })
                    }, 
                    t.addFreeDrillField = function (e, a) {
                        var i = t.optionalFreeDrillFields[e];
                        t.freeDrillFields.push(angular.copy(i)), t.freeDrillFieldIds.push(i.fid)
                    }, 
                    t.deleteFreeDrillField = function (e) {
                        t.freeDrillFields.splice(e, 1)[0], t.freeDrillFieldIds.splice(e, 1)
                    }, 
                    t.addAllOptionalFields = function () {
                        var e = t.optionalFreeDrillFields.filter(function (e) {
                            return !(e.hide_by_query || t.freeDrillFieldIds.indexOf(e.fid) > -1) && angular.copy(e)
                        });
                        t.freeDrillFields = t.freeDrillFields.concat(e), t.freeDrillFieldIds = t.freeDrillFields.map(function (e) {
                            return e.fid
                        })
                    }, 
                    t.deleteAllDrillFields = function () {
                        var e = t.freeDrillFields.filter(function (e) {
                            return !!e.hide_by_query && e
                        });
                        t.freeDrillFields = e, t.freeDrillFieldIds = t.freeDrillFields.map(function (e) {
                            return e.fid
                        })
                    }, 
                    t.saveFreeDrillSetting = function () {
                        var e = t.freeDrillFields.map(function (e) {
                            return {
                                fid: e.fid,
                                data_type: e.data_type,
                                granularity: e.granularity
                            }
                        });
                        t.viewMeta.free_drill_setting = {
                            enabled: !0,
                            limited: t.free_drill_limited,
                            field_list: e
                        }, t.saveChartImmediate()
                    }
                }
            }
        }])
    }(), 
    angular.module("BC.directives")
    .constant("EleBorderTypes", {
        zh: [{
            name: "无",
            value: "NONE"
        }, {
            name: "自定义边框",
            value: "CUSTOM"
        }, {
            name: "预设边框T1(蓝色)",
            value: "t1"
        }, {
            name: "预设边框T2(蓝色)",
            value: "t2"
        }, {
            name: "预设边框T3(蓝色)",
            value: "t3"
        }, {
            name: "预设边框T1(紫色)",
            value: "t1-purple"
        }, {
            name: "预设边框T2(紫色)",
            value: "t2-purple"
        }, {
            name: "预设边框T3(紫色)",
            value: "t3-purple"
        }, {
            name: "预设边框T1(绿色)",
            value: "t1-green"
        }, {
            name: "预设边框T2(绿色)",
            value: "t2-green"
        }, {
            name: "预设边框T3(绿色)",
            value: "t3-green"
        }, {
            name: "预设边框T1(红色)",
            value: "t1-red"
        }, {
            name: "预设边框T2(红色)",
            value: "t2-red"
        }, {
            name: "预设边框T3(红色)",
            value: "t3-red"
        }, {
            name: "预设边框T1(墨绿)",
            value: "t1-blackish-green"
        }, {
            name: "预设边框T2(墨绿)",
            value: "t2-blackish-green"
        }, {
            name: "预设边框T3(墨绿)",
            value: "t3-blackish-green"
        }, {
            name: "预设边框T4(墨绿)",
            value: "t4-blackish-green"
        }],
        en: [{
            name: "None",
            value: "NONE"
        }, {
            name: "Custom",
            value: "CUSTOM"
        }, {
            name: "Template T1(Blue)",
            value: "t1"
        }, {
            name: "Template T2(Blue)",
            value: "t2"
        }, {
            name: "Template T3(Blue)",
            value: "t3"
        }, {
            name: "Template T1(Purple)",
            value: "t1-purple"
        }, {
            name: "Template T2(Purple)",
            value: "t2-purple"
        }, {
            name: "Template T3(Purple)",
            value: "t3-purple"
        }, {
            name: "Template T1(Green)",
            value: "t1-green"
        }, {
            name: "Template T2(Green)",
            value: "t2-green"
        }, {
            name: "Template T3(Green)",
            value: "t3-green"
        }, {
            name: "Template T1(Red)",
            value: "t1-red"
        }, {
            name: "Template T2(Red)",
            value: "t2-red"
        }, {
            name: "Template T3(Red)",
            value: "t3-red"
        }, {
            name: "Template T1(BlackishGreen)",
            value: "t1-blackish-green"
        }, {
            name: "Template T2(BlackishGreen)",
            value: "t2-blackish-green"
        }, {
            name: "Template T3(BlackishGreen)",
            value: "t3-blackish-green"
        }, {
            name: "Template T4(BlackishGreen)",
            value: "t4-blackish-green"
        }]
    })
    .constant("BorderLineStyle", {
        zh: [{
            name: "无",
            value: "NONE"
        }, {
            name: "实线",
            value: "solid"
        }, {
            name: "点虚线",
            value: "dotted"
        }, {
            name: "长虚线",
            value: "dashed"
        }],
        en: [{
            name: "None",
            value: "NONE"
        }, {
            name: "Solid",
            value: "solid"
        }, {
            name: "Dotted",
            value: "dotted"
        }, {
            name: "Dashed",
            value: "dashed"
        }]
    })
    .constant("screenLineWidth", [{
        name: "1px",
        value: "1px"
    }, {
        name: "2px",
        value: "2px"
    }, {
        name: "3px",
        value: "3px"
    }, {
        name: "4px",
        value: "4px"
    }, {
        name: "5px",
        value: "5px"
    }, {
        name: "6px",
        value: "6px"
    }, {
        name: "7px",
        value: "7px"
    }, {
        name: "8px",
        value: "8px"
    }, {
        name: "9px",
        value: "9px"
    }])
    .constant("screenElePadding", {
        text: {
            paddingTop: 8,
            paddingBottom: 4,
            paddingLeft: 24,
            paddingRight: 24
        },
        chart: {
            paddingTop: 32,
            paddingBottom: 40,
            paddingLeft: 32,
            paddingRight: 40
        },
        img: {
            paddingTop: 0,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0
        }
    })
    .directive("datascreenPageEle", [
        "$rootScope", "EleBorderTypes", "BorderLineStyle", "errHint", "toggleNextBlock", "screenElePadding", "defaultChartStyleFactory", 
        "$timeout", "$jsTipTranslate", function (e, t, a, i, r, n, o, l, s) {
        return {
            restrict: "EA",
            scope: !0,
            templateUrl: "/static/partials/directiveTemplates/dataScreen/pageEle.html",
            replace: !0,
            link: function (d, c, u) {
                d.EleBorderTypes = angular.copy(t.zh), d.EleBorderLineStyle = a.zh, "en" == e.language && (d.EleBorderTypes = angular.copy(t.en), d.EleBorderLineStyle = a.en), d.toggleNextBlock = r, d.screenElePadding = n, bdp.bdpPageStatus.isUnderAdvDashEdit() && (d.EleBorderTypes = d.EleBorderTypes.splice(0, 2)), d.modifyEleStyle = function (e, t) {
                    var a = d.oldEleStyle;
                    a && a.bgColor && t === a.bgColor || (d.eleStyle.customBorder && d.eleStyle.customBorder.width < 0 && (d.eleStyle.customBorder.width = 0),
                        (e || JSON.stringify(a) != JSON.stringify(d.eleStyle)) && (d.$emit("datascreenPageEle", {
                            eleStyle: d.eleStyle,
                            opt: {
                                save: !0
                            }
                        }), l(function () {
                            if (d.oldEleStyle.height != d.eleStyle.height || d.oldEleStyle.width != d.eleStyle.width) {
                                var e = angular.element("#" + d.eleStyle.ct_id).find(".item-chart").find(".chart").data("chart-data");
                                e && e.renderChart()
                            }
                            $.extend(!0, d.oldEleStyle, d.eleStyle)
                        }, 0)))
                }, d.keyUpModify = function (e, t, a) {
                    13 == (e || window.event).keyCode && d.modifyEleBox(t, a)
                }, d.cancelDocumentEvent = function () {
                    $(document).off("keydown.change_item_pos"), $(document).off("keydown.save_item_pos")
                }, d.modifyEleBox = function (e, t) {
                    var a = +d.eleStyle[e],
                        r = d.oldEleStyle[e],
                        n = !0;
                    if (!t && a == r || void 0 === e || void 0 === a) return d.eleStyle[e] = r, !1;
                    if (isNaN(a) || null == d.eleStyle[e]) return i(d.tips["dash.advDash.valueInvalid"]), d.eleStyle[e] = r, !1;
                    var o, l = d.resolution;
                    switch (e) {
                        case "top":
                        case "height":
                            o = l.height;
                            break;
                        case "left":
                        case "width":
                        default:
                            o = l.width;
                            break;
                        case "paddingTop":
                        case "paddingBottom":
                            d.eleStyle[e] < 0 || isNaN(d.eleStyle[e]) || null == d.eleStyle[e] ? (i(d.tips["dash.advDash.inputPositiveNumber"]), d.eleStyle[e] = r, n = !1) : d.eleStyle[e] >= d.eleStyle.height && (i(d.tips["dash.advDash.cannotExceedChartSize"]), d.eleStyle[e] = r, n = !1);
                            break;
                        case "paddingLeft":
                        case "paddingRight":
                            d.eleStyle[e] < 0 || isNaN(d.eleStyle[e]) || null == d.eleStyle[e] ? (i(d.tips["dash.advDash.inputPositiveNumber"]), d.eleStyle[e] = r, n = !1) : d.eleStyle[e] >= d.eleStyle.width && (i(d.tips["dash.advDash.cannotExceedChartSize"]), d.eleStyle[e] = r, n = !1)
                    }
                    return !!n && (a < 0 || a > o ? (i(d.tips["dash.advDash.cannotExceedPageSize"]), d.eleStyle[e] = r, !1) : void d.modifyEleStyle(t))
                }, d.changeLockPos = function () {
                    d.$emit("datascreenEleLockPos", {
                        lock: d.lockPos,
                        ct_id: d.eleStyle.ct_id
                    })
                }, d.$on("editChartMeta", function (e, t) {
                    var a = t.item;
                    if (!(!a || t.opts && t.opts.is_redraw)) {
                        var i = o.getDefaultStyle(t.child.meta.type);
                        d.defaultChartStyle = angular.copy(i), d.curEleData = t.item;
                        var r = {};
                        "C101 C105".indexOf(d.curEleData.children[0].meta.type) >= 0 ? r = n.text : "C102 C103".indexOf(d.curEleData.children[0].meta.type >= 0) && (r = n.img), [0, 7, 8].indexOf(d.curEleData.children[0].meta.ct_type) >= 0 && (r = n.chart), d.eleStyle = $.extend(!0, {
                            bgColor: "rgba(0, 0, 0, 0)",
                            borderType: "NONE",
                            customBorder: {
                                width: 1,
                                style: "solid",
                                color: "#000000"
                            },
                            paddingTop: r.paddingTop,
                            paddingBottom: r.paddingBottom,
                            paddingLeft: r.paddingLeft,
                            paddingRight: r.paddingRight
                        }, {
                            top: a.top,
                            left: a.left,
                            width: a.width,
                            height: a.height,
                            bgColor: a.bgColor,
                            borderType: a.borderType,
                            customBorder: a.customBorder,
                            paddingTop: a.paddingTop,
                            paddingBottom: a.paddingBottom,
                            paddingLeft: a.paddingLeft,
                            paddingRight: a.paddingRight
                        }), d.eleStyle.ct_id = t.child.meta.ct_id, d.lockPos = t.lock_status && t.lock_status[d.eleStyle.ct_id], d.oldEleStyle = angular.copy(d.eleStyle), d.lockPos = t.lock_status && t.lock_status[d.eleStyle.ct_id], t.need_reload && d.elePartialsConf.init(t.child)
                    }
                }), d.elePartialsConf = {
                    meta: {},
                    canSetStatus: {
                        displaySetting: !1,
                        title: !1,
                        total: !1,
                        dataLabels: !1
                    },
                    style: {},
                    canSetTotal: function () {
                        var e = angular.element("#" + this.meta.ct_id).find(".item-chart").find(".chart").data("chart-data"),
                            t = this.meta.type;
                        this.canSetStatus.total = this.meta.show_total && bdpChart.configurable.canEditChartSummary(t, e)
                    },
                    canSetTitle: function () {
                        this.canSetStatus.title = this.meta.ct_id.indexOf("text_") < 0 && ["C101", "C102", "C103", "C104", "C105"].indexOf(this.meta.type) < 0
                    },
                    canSetDataLabels: function () {
                        var e = this.meta.type;
                        this.canSetStatus.dataLabels = bdpChart.configurable.canEditChartDataLabels(e)
                    },
                    canSetDisplaySetting: function () {
                        this.canSetStatus.displaySetting = this.canSetStatus.total || this.canSetStatus.title || this.canSetStatus.dataLabels
                    },
                    reset: function () {
                        d.elePartialsConf.canSetStatus = {
                            displaySetting: !1,
                            title: !1,
                            total: !1,
                            dataLabels: !1
                        }
                    },
                    init: function (e) {
                        if (this.meta = e.meta, this.reset(), e.meta && 0 == e.meta.ct_type) {
                            var t = e.meta.ct_id,
                                a = angular.element("#" + t).find(".item-chart").find(".chart").data("chart-data");
                            if (a && a.info) {
                                var i = a.info.style;
                                d.elePartialsConf.style = i ? {
                                    title: i.title,
                                    labels: i.labels
                                } : {
                                    title: d.defaultChartStyle.title,
                                    labels: d.defaultChartStyle.labels
                                }
                            }
                        }
                        l(function () {
                            d.elePartialsConf.canSetTotal(), d.elePartialsConf.canSetTitle(), d.elePartialsConf.canSetDataLabels(), d.elePartialsConf.canSetDisplaySetting()
                        })
                    },
                    modifyDashChartStyle: function (e) {
                        var t = angular.element("#" + this.meta.ct_id).find(".item-chart").find(".chart").data("chart-data");
                        t.info.style ? t.info.style = $.extend(!0, t.info.style, this.style) : t.info.style = angular.copy(this.style), "labels" == e && (t.info.style.labels.changed = !0), "title" == e && (t.info.style.title.enabled = !0), t && t.destroy(), t && t.renderChart(), "labels" == e && (delete this.style.labels.changed, this.meta.style && this.meta.style.labels && delete this.meta.style.labels.changed), this.meta.style ? $.extend(!0, this.meta.style, this.style) : this.meta.style = this.style, d.$emit("datascreenPageEle", {
                            eleStyle: this.style,
                            opt: {
                                save: !0,
                                isChart: !0,
                                drill_level: t.info.drill_level || 0
                            }
                        })
                    },
                    saveDashSetting: function (e) {
                        var t = angular.element("#" + this.meta.ct_id).find(".item-chart").find(".chart").data("chart-data");
                        "labels" != e || d.elePartialsConf.meta.dash_setting.show_datalabels || t.info.style && t.info.style.labels && delete t.info.style.labels, "title" != e || d.elePartialsConf.meta.dash_setting.show_total || (t.info.style && t.info.style.title && delete t.info.style.title, t.info.style.title.enabled = !0), d.$emit("changeDashSetting", {
                            type: e
                        })
                    }
                }, s(["dash.advDash.valueInvalid", "dash.advDash.inputPositiveNumber", "dash.advDash.cannotExceedChartSize", "dash.advDash.cannotExceedPageSize"], d)
            }
        }
    }])
    .directive("datascreenPageWrap", ["BorderLineStyle", "screenLineWidth", "screenOfficialSize", "commonService", "errHint", "$timeout", "$rootScope", "toggleNextBlock", "$jsTipTranslate", function (e, t, a, i, r, n, o, l, s) {
        return {
            restrict: "EA",
            scope: !0,
            templateUrl: "/static/partials/directiveTemplates/dataScreen/pageWrap.html",
            replace: !0,
            link: function (i, n, d) {
                function c() {
                    if (1 == i.resolution.type) {
                        for (var e = 0, t = i.screenSizeList.length; e < t; e++)
                            if (i.resolution.type == i.screenSizeList[e].value.type && i.resolution.width == i.screenSizeList[e].value.width && i.resolution.height == i.screenSizeList[e].value.height) {
                                i.screenSizeResolution = i.screenSizeList[e].value;
                                break
                            }
                    } else 2 == i.resolution.type && (i.screenSizeObj = $.extend(i.screenSizeObj, i.resolution))
                }
                var u, f, p = 2 == o.usedThemeId ? "#ffffff" : "#24273e";
                i.pageStyle = $.extend(!0, {
                    bgColor: p,
                    lineColor: "#000000",
                    width: "1px",
                    style: "NONE"
                }, i.pageStyle), i.screenLineDashStyle = e.zh, "en" == o.language && (i.screenLineDashStyle = e.en), i.screenLineWidth = t, i.screenSizeList = a, i.toggleNextBlock = l, i.resolution = {}, i.screenSizeResolution = i.screenSizeList[0].value, i.screenSizeObj = {
                    type: 1,
                    width: "",
                    height: ""
                }, i.showPageImage = function () {
                    i.$emit("showPageImage", {
                        pageImageSrc: i.pageImageSrc
                    })
                }, i.keyUpModify = function (e) {
                    13 == (e || window.event).keyCode && i.showPageImage()
                }, i.$on("screenDashboardInfo", function (e, t) {
                    t = $.extend(!0, {}, t);
                    var a, r = t.pageWrapStyles;
                    if (r) {
                        if (r.bgColor = r.bgColor ? r.bgColor.replace(/ !important/g, "") : p, r.lineColor = r.lineColor ? r.lineColor.replace(/ !important/g, "") : "#000000", i.pageStyle = $.extend(!0, {
                                bgColor: p,
                                lineColor: "#000000",
                                width: "1px",
                                style: "NONE"
                            }, r), r["background-image"]) {
                            var n = t.pageWrapStyles["background-image"].match("\\((.+?)\\)");
                            a = n ? n[1] : ""
                        }
                        a && (i.pageImageSrc = a), u = i.pageStyle.bgColor, f = i.pageStyle.lineColor
                    }
                    i.resolution = t.resolution, c()
                }), i.changeColor = function (e, t) {
                    if ("bg" == t) {
                        if (e === u) return;
                        i.pageStyle.bgColor = e, u = e
                    }
                    if ("line" == t) {
                        if (f === e) return;
                        i.pageStyle.lineColor = e, f = e
                    }
                    i.$emit("datascreenPageWrap", {
                        pageStyle: i.pageStyle
                    })
                }, i.modifyLine = function () {
                    i.$emit("datascreenPageWrap", {
                        pageStyle: i.pageStyle
                    })
                }, i.modifyResolution = function () {
                    var e = i.resolution,
                        t = !0;
                    if (1 == i.screenSizeObj.type) e.type = i.screenSizeObj.type, e.width = i.screenSizeResolution.width, e.height = i.screenSizeResolution.height;
                    else if (2 == i.screenSizeObj.type) {
                        if (i.screenSizeObj.width < 0 || isNaN(i.screenSizeObj.width) || null == i.screenSizeObj.width) return r(i.tips["dash.advDash.inputPositiveNumber"]), t = !1, !1;
                        if (!bdp.bdpPageStatus.isUnderAdvDash() && (i.screenSizeObj.height < 0 || isNaN(i.screenSizeObj.height) || null == i.screenSizeObj.height)) return r(i.tips["dash.advDash.inputPositiveNumber"]), t = !1, !1;
                        bdp.bdpPageStatus.isUnderDataScreen() >= 0 && (i.screenSizeObj.width = i.screenSizeObj.width || e.width, i.screenSizeObj.height = i.screenSizeObj.height || e.height), e.type = i.screenSizeObj.type, e.width = i.screenSizeObj.width, e.height = i.screenSizeObj.height
                    }
                    t && i.$emit("datascreenResolution", {
                        resolution: e
                    })
                }, s(["dash.advDash.inputPositiveNumber"], i)
            }
        }
    }]),
    function () {
        function e(e, t, a, i, r, n) {
            return {
                restrict: "EA",
                templateUrl: "/static/partials/directiveTemplates/selectProjDash.html",
                scope: {
                    projList: "=",
                    projId: "=",
                    dashId: "=",
                    newDashName: "=",
                    selectItem: "=",
                    moveItem: "="
                },
                replace: !0,
                link: function (o, l, s) {
                    function d(e) {
                        if (o.foundDashList) return !1;
                        o.projId || (o.projDashData.selectedProjName = h), o.dashList = [];
                        for (var t = [], a = 0, i = e.length; a < i; a++) {
                            var r = e[a];
                            if ("project" === r.attribute) {
                                if (r.proj_id == o.projId) {
                                    o.projDashData.selectedProjName = r.name;
                                    for (var n = 0; n < r.subs.length; n++) "dashboard" === r.subs[n].attribute && t.push(r.subs[n]);
                                    o.dashList = t, o.foundDashList = !0;
                                    break
                                }
                                r.subs && r.subs.length > 0 && d(r.subs)
                            }
                        }
                    }

                    function c(e, t) {
                        o.projDashData.selectFolder = null, o.projDashData.showDropdown = !1, o.projDashData.selectedProjName = h, o.projId = ""
                    }

                    function u(e) {
                        if (o.projDashData.showDropdown = !1, e.proj_id !== o.projId) {
                            if (o.projDashData.selectedProjName = e.name, o.projId = e.proj_id, o.foundDashList = !1, ["moveDashboard", "moveProject"].indexOf(o.optType) > -1) return void(o.selectItem = e);
                            f(o.projList)
                        }
                    }

                    function f(e) {
                        if (o.foundDashList) return !1;
                        o.dashList = [];
                        for (var t = 0, a = e.length; t < a; t++) {
                            var i = e[t];
                            if (i.proj_id == o.projId) return (i.subs || []).map(function (e) {
                                "dashboard" == e.attribute && o.dashList.push(e)
                            }), o.projDashData.selectedDashName = o.dashList.length ? o.dashList[0].name : g, ["copyChart", "moveChart"].indexOf(o.optType) > -1 && (o.dashId = o.dashList.length ? o.dashList[0].dsh_id : ""), o.foundDashList = !0, !1;
                            i.subs && i.subs.length > 0 && f(i.subs)
                        }
                    }
                    r(["dash.projectNameRequired", "dash.duplicateProjectName", "pleaseSelect", "dash.dashNameRequired", "dash.dashNameLessThan100", "dash.duplicateDashName", "dash.pleaseSelectProj", "dash.rootFolder"], o);
                    var p = e.language || "zh",
                        g = "zh" == p ? "请选择" : "Please select",
                        h = "zh" == p ? "根目录" : "Root Folder";
                    o.dashList = [], o.requestDone = !0, o.optType = s.optType, o.root = {}, o.projDashData = {
                        showDropdown: !1,
                        showDashList: !1,
                        selectedProjName: h,
                        selectFolder: null,
                        selectedDashName: g || ""
                    };
                    var m = n.path(),
                        _ = m.indexOf("data_screen") > -1 ? 1 : null;
                    o.treeSelectParent = c, o.selectProjItem = u, o.nodeCollapseHandle = function (e, t) {
                        e && e.stopPropagation(), t.nodeCollapse = !t.nodeCollapse
                    }, o.init = function () {
                        if (o.foundDashList = !1, d(o.projList), ["copyChart", "moveChart"].indexOf(o.optType) > -1)
                            for (var e = 0, t = o.dashList.length; e < t; e++) o.dashList[e].dsh_id == o.dashId && (o.projDashData.selectedDashName = o.dashList[e].name)
                    }, o.init(), o.selectDashItem = function (e, t) {
                        o.projDashData.selectedDashName = t, o.dashId = e, o.projDashData.showDashList = !1
                    }, o.createNewProj = function () {
                        o.projDashData.showDropdown = !1, o.projDashData.showDashList = !1, o.newProjDialog = i.open({
                            template: "/static/partials/directiveTemplates/selectProjDashInfo.html",
                            className: "ngdialog-theme-default ngDialog-width-360",
                            scope: o,
                            data: {
                                type: "proj",
                                name: "",
                                save: o.saveNewProj
                            }
                        })
                    }, o.createNewDash = function () {
                        if (!o.projId) return void a(o.tips["dash.pleaseSelectProj"]);
                        o.projDashData.showDropdown = !1, o.projDashData.showDashList = !1, o.newDashDialog = i.open({
                            template: "/static/partials/directiveTemplates/selectProjDashInfo.html",
                            className: "ngdialog-theme-default ngDialog-width-360",
                            scope: o,
                            data: {
                                type: "dash",
                                name: "",
                                save: o.saveNewDash
                            }
                        })
                    }, o.saveNewProj = function (e) {
                        if (o.requestDone) {
                            if (void 0 == e || "" === e) return void a(o.tips["dash.projectNameRequired"]);
                            for (var i = o.projList || [], r = 0, n = i.length; r < n; r++)
                                if (i[r].name == e) return void a(o.tips["dash.duplicateProjectName"]);
                            o.requestDone = !1, t.project.create({
                                name: e,
                                category: _
                            }).then(function (t) {
                                if (o.requestDone = !0, "0" == t.status) {
                                    var i = {
                                        proj_id: t.result.proj_id,
                                        name: e,
                                        dsh_list: [],
                                        type: 0,
                                        property: 0
                                    };
                                    o.$emit("updateProjTree", i), o.projDashData.selectedProjName = e, o.projId = t.result.proj_id, ["copyChart", "moveChart"].indexOf(o.optType) > -1 && (o.dashList = [], o.dashId = "", o.projDashData.selectedDashName = g), o.newProjDialog.close()
                                } else a(Number(t.status))
                            })
                        }
                    }, o.saveNewDash = function (e) {
                        if (o.requestDone) {
                            if ("" === e) return void a(o.tips["dash.dashNameRequired"]);
                            if (e.length > 100) return void a(o.tips["dash.dashNameLessThan100"]);
                            for (var i = null, r = o.projList, n = 0; n < r.length; n++)
                                if (r[n].proj_id == o.projId) {
                                    i = r[n];
                                    break
                                }
                            i || (i = o.projList[0]);
                            for (var l = i.subs, s = 0, d = l.length; s < d; s++)
                                if (l[s].name == e) return void a(o.tips["dash.duplicateDashName"]);
                            var c = {
                                name: e,
                                proj_id: o.projId
                            };
                            o.requestDone = !1, t.dashboard.create(c).then(function (t) {
                                o.requestDone = !0, "0" == t.status ? (l.push({
                                    dsh_id: t.result.dsh_id,
                                    name: e,
                                    label: "",
                                    comment: "",
                                    outer_share_id: "",
                                    property: 0
                                }), o.dashList = l, o.dashId = t.result.dsh_id, o.projDashData.selectedDashName = e, o.newDashDialog.close()) : a(Number(t.status))
                            })
                        }
                    }
                }
            }
        }
        angular.module("BC.directives")
        .directive("selectProjDash", e), 
        e.$inject = ["$rootScope", "commonService", "errHint", "ngDialog", "$jsTipTranslate", "$location"]
    }(),
    function () {
        angular.module("BC.directives")
        .directive("navNotice", ["errHint", "$location", "commonService", "$filter", function (e, t, a, i) {
            return {
                restrict: "A",
                templateUrl: "/static/js/common/tpl/nav_notice.html",
                replace: !1,
                scope: {},
                link: function (r, n, o) {
                    function l(e, t, a) {
                        var i = 0;
                        angular.forEach(r.noticTipsMol, function (r, n) {
                            a && (r.show = !1), e && e === n - 0 && (r.show = !!t), r.show && (i += 1)
                        }), r.hasNewNotice.unReadTypeLen = i, 0 === r.hasNewNotice.unReadTypeLen ? r.hasNewNotice.show = !1 : r.hasNewNotice.show = !0, localStorage.setItem("noticTipsMol", angular.toJson(r.noticTipsMol))
                    }

                    function s() {
                        a.notice.getNoticeType().then(function (t) {
                            if (0 == t.status) {
                                var a = t.result,
                                    n = localStorage.getItem("noticTipsMol") ? angular.fromJson(localStorage.getItem("noticTipsMol")) : {};
                                r.navNoticeList = [], r.hasNewNotice.unReadTotal = 0;
                                for (var o = a.length - 1; o >= 0; o--) r.navNoticeList.unshift({
                                    title: i("noticeTypeMap")(a[o].purpose),
                                    unReadNewsLen: a[o].unread_num,
                                    typeId: a[o].purpose
                                }), r.hasNewNotice.unReadTotal += a[o].unread_num, n[a[o].purpose] || (n[a[o].purpose] = {}, n[a[o].purpose].show = a[o].unread_num > 0), 0 == a[o].unread_num ? n[a[o].purpose].show = !1 : a[o].unread_num > n[a[o].purpose].unReadLen && (n[a[o].purpose].show = !0), n[a[o].purpose].unReadLen = a[o].unread_num;
                                r.noticTipsMol = n, l()
                            } else e(t.errstr)
                        })
                    }
                    r.navNoticeList = [], r.hasNewNotice = {
                        show: !1,
                        unReadTotal: 0,
                        unReadTypeLen: 0
                    }, r.noticTipsMol = {}, $("body").on("dashboard-scroll-start.dashNotice", function () {
                        r.hasNewNotice.show = !1, $(".J_personal_notice_layer").addClass("ng-hide")
                    }), r.$on("$destroy", function () {
                        $("body").off("dashboard-scroll-start.dashNotice")
                    }), r.closeNavNotice = function () {
                        l("", "", !0)
                    }, r.goToListPage = function (e) {
                        if (void 0 === e)
                            for (var a = r.navNoticeList.length - 1; a >= 0; a--)
                                if (r.noticTipsMol[r.navNoticeList[a].typeId].show) {
                                    e = r.navNoticeList[a].typeId;
                                    break
                                }
                        if (void 0 === e)
                            for (var a = r.navNoticeList.length - 1; a >= 0; a--)
                                if (r.navNoticeList[a].unReadNewsLen) {
                                    e = r.navNoticeList[a].typeId;
                                    break
                                }
                        if (void 0 === e) {
                            if (!r.navNoticeList[0]) return !1;
                            e = r.navNoticeList[0].typeId
                        }
                        l(e, !1), t.path("/notice/" + e)
                    }, r.$on("getNavNoticeList", function () {
                        r.init()
                    });
                    r.$on("_websocketChartMessage_", function (e, t) {
                        var a = "string" == typeof t.data ? $.parseJSON(t.data) : t.data;
                        if (9 == a.type) {
                            var i = a.content;
                            if ("is_publ" == i.type) {
                                for (var n = r.navNoticeList.length - 1; n >= 0; n--)
                                    if (r.navNoticeList[n].typeId === i.purpose) {
                                        r.navNoticeList[n].unReadNewsLen += 1, r.hasNewNotice.unReadTotal += 1, r.noticTipsMol[i.purpose].show || l(i.purpose, !0);
                                        break
                                    }
                            } else if ("is_back" == i.type)
                                for (var n = r.navNoticeList.length - 1; n >= 0; n--)
                                    if (r.navNoticeList[n].typeId === i.purpose && !i.is_read) {
                                        r.navNoticeList[n].unReadNewsLen -= 1, r.hasNewNotice.unReadTotal -= 1, void 0 !== r.noticTipsMol[i.purpose] && 0 == r.navNoticeList[n].unReadNewsLen && l(i.purpose, !1);
                                        break
                                    }
                            r.$$phase || r.$digest()
                        }
                    }), r.init = function () {
                        s()
                    }, r.init()
                }
            }
        }])
    }(), 
    angular.module("BC.directives")
    .directive("searchFolderTableCheckbox", function () {
        return {
            restrict: "A",
            link: function (e, t, a) {
                function i() {
                    var t = e.query;
                    t ? angular.forEach(e.folderList, function (e) {
                        e.hide = !e.name.match(t), e.hide ? (angular.forEach(e.tb_list, function (a) {
                            a.name.match(t) ? (a.hide = !1, e.hide = !1, e.open = !0) : a.hide = !0
                        }), angular.forEach(e.sub_folders, function (a) {
                            a.name.match(t) ? (a.hide = !1, a.open = !0, e.hide = !1, e.open = !0) : a.hide = !0, a.hide ? angular.forEach(a.tb_list, function (i) {
                                i.name.match(t) ? (i.hide = !1, a.hide = !1, a.open = !0, e.hide = !1, e.open = !0) : i.hide = !0
                            }) : angular.forEach(a.tb_list, function (e) {
                                e.hide = !1
                            })
                        })) : (angular.forEach(e.tb_list, function (e) {
                            e.hide = !1
                        }), angular.forEach(e.sub_folders, function (e) {
                            e.hide = !1, e.open = !1, angular.forEach(e.tb_list, function (e) {
                                e.hide = !1
                            })
                        }))
                    }) : angular.forEach(e.folderList, function (e) {
                        e.hide = !1, e.open = !1, angular.forEach(e.sub_folders, function (e) {
                            e.hide = !1, e.open = !1, angular.forEach(e.tb_list, function (e) {
                                e.hide = !1
                            })
                        }), angular.forEach(e.tb_list, function (e) {
                            e.hide = !1
                        })
                    }), e.$digest()
                }
                var r;
                t.bind("keyup", function () {
                    clearTimeout(r), r = setTimeout(i, 10)
                })
            }
        }
    }),
    function () {
        function e(e, t, a, i, r, n) {
            function o(e) {
                a(e.status + " : " + e.statusText)
            }
            return {
                restrict: "A",
                template: '<i class="bdp-icon ml5" ng-class="typesMap[selectedTb.update_mode][0]"></i><span class="btn-layer-opt">    {{"wb.transform.type" + typesMap[selectedTb.update_mode][1]|translate}}</span><div class="bdp-tooltip bottom ml5">    <i class="bdp-icon ico-info-sign"></i>    <div class="bdp-tooltip-content">        <div class="content">{{"wb.transform.type" + typesMap[selectedTb.update_mode][1]|translate}}{{"wb.transform.descriptionFor" + typesMap[selectedTb.update_mode][1]|translate}}<p class="mt8 mute-font">{{"wb.transform.btnHelpTipTip"|translate}}</p></div>    </div></div>',
                scope: {
                    selectedTb: "=transformTbType"
                },
                link: function (l, s, d) {
                    l.typesMap = {
                        0: ["ico-file-normal", "General"],
                        1: ["ico-file-data", "Incremental"],
                        2: ["ico-file-speed", "Frequently"]
                    }, l.editable = !0, l.changePartitionField = l.$parent.changePartitionField, l.changePartitionMode = l.$parent.changePartitionMode;
                    var c = {
                            currentStep: "selecting",
                            checkResult: "",
                            showLoading: !1
                        },
                        u = l.transData = {};
                    angular.extend(l.transData, c), l.showTransformDialog = function () {
                        angular.extend(l.transData, c), l.transData.targetType = l.transData.currentType = l.selectedTb.update_mode, l.selected = l.$parent.selected;
                        var e = l.selectedTb,
                            a = !t.isPersonal && ["union", "public", "allot"].indexOf(e.type) < 0 && "access_tb" != e.tb_type;
                        l.byShare = 0 == e.tb_id.indexOf("sh"), !a || ["join", "script", "aggr", "transpose"].indexOf(e.type) >= 0 ? l.editable = !1 : l.editable = !0, i.open({
                            template: "/static/partials/dialogTemplates/transform_tb_type.html",
                            className: "ngdialog-theme-default ngdialog-trans-tbtype ngDialog-width-552",
                            scope: l
                        })
                    }, l.checkSelected = function () {
                        if (u.currentType == u.targetType) return void a(l.tips["wb.transform.shouldSelectDiffrentType"]);
                        if (1 == u.targetType) l.$parent.preparePartitionData(), l.$parent.beginSetPartition(), l.partitionData = l.$parent.partitionData, l.partitionData.empty_field && (l.transData.checkResult = "wb.noPartitionField"), l.transData.currentStep = "submiting";
                        else if (2 == u.targetType) {
                            if (l.selected.tb.data_count > 1e5) return l.transData.checkResult = "wb.transform.tableDataCountOver10w", void(l.transData.currentStep = "submiting");
                            l.transData.currentStep = "submiting"
                        } else l.transData.currentStep = "submiting"
                    }, l.goSelectingStep = function () {
                        angular.extend(l.transData, c)
                    }, l.submitTransform = function () {
                        var t, r = {
                            tb_id: l.selected.tb_id,
                            mode: l.transData.targetType
                        };
                        if (1 == r.mode) {
                            if ("hash" == l.partitionData.data_type && !/^[1-9][0-9]*$/.test(l.partitionData.granularity)) return void a(n.instant("wb.requirePartitionNum"));
                            t = {
                                base_field: l.partitionData.field_id,
                                param: {
                                    type: l.partitionData.data_type,
                                    option: "string" != l.partitionData.data_type ? l.partitionData.granularity : ""
                                }
                            }, t.param = angular.toJson(t.param), r.param = angular.toJson(t)
                        }
                        l.transData.showLoading = !0, e.tb.updateModeModify(r).then(function (e) {
                            0 != e.status ? a(e.errstr) : (a(l.tips["wb.transform.success"] + l.tips["wb.transform.type" + l.typesMap[r.mode][1]]), l.selectedTb.update_mode = r.mode, t && l.$parent.updatePartitionData(t), i.closeAll())
                        }, o).finally(function () {
                            l.transData.showLoading = !1
                        })
                    }, s.on("click", function () {
                        l.showTransformDialog(), t.$digest()
                    }), r(["wb.transform.shouldSelectDiffrentType", "wb.transform.success", "wb.transform.typeGeneral", "wb.transform.typeIncremental", "wb.transform.typeFrequently", "wb.transform.canNotEdit"], l)
                }
            }
        }
        ! function () {
            function e(e, t) {
                if (e) {
                    var a = t || $("#tb-header"),
                        i = a.find("li"),
                        r = 0;
                    e.find("thead").eq(0).find("th").each(function (e) {
                        var t = $(this).outerWidth(),
                            a = 0 == e ? t + 1 : t;
                        r += a, i.eq(e).css("width", a)
                    }), a.css("width", r)
                }
            }

            function t(t, a, i, r, n, o, l, s, d, c, u, f, p, g, h, m) {
                function _() {
                    var e = a.wsId;
                    if (e) {
                        var i = !1;
                        a.workspaceList.dash.map(function (t) {
                            t.ws_id == e && (i = !0)
                        }), t.createChartDataShow = i
                    }
                }

                function b() {
                    t.previewFilterData = {
                        where: {
                            where_type: "condition",
                            where_linker: "and",
                            sql: [],
                            condition: {
                                filters: []
                            }
                        },
                        sql: {}
                    }
                }

                function v() {
                    t.resetPreviewFilterData.flag = !t.resetPreviewFilterData.flag, t.previewFilterSort = [], t.$broadcast("last-param-change", null), t.lastPreviewFilterData = null, b()
                }

                function y() {
                    var e = angular.copy(t.previewFilterData),
                        a = [];
                    return angular.forEach(e.sql, function (e, t) {
                        e && a.push({
                            tb_id: t,
                            sql: e
                        })
                    }), e.where.sql = a, delete e.sql, delete e.where.condition, e
                }

                function w() {
                    t.visibleFieldStatus && (t.visibleFieldStatus.showFlag = !1)
                }

                function D() {
                    t.visiblePreviewFieldData = {
                        currentType: "base",
                        fieldQueryText: "",
                        baseTbField: {
                            strField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            numField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            dateField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            }
                        },
                        calcTbField: {
                            strField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            numField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            dateField: {
                                checkAll: !0,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            }
                        },
                        currentTbField: {},
                        originalTbField: {},
                        modifyFieldList: []
                    }
                }

                function F() {
                    function e(e, t) {
                        var a = {};
                        switch (e.data_type) {
                            case "string":
                                a = t.strField;
                                break;
                            case "number":
                                a = t.numField;
                                break;
                            case "date":
                                a = t.dateField
                        }
                        a.list.push(e), a.displayNum++, a.checkNum = e.selected ? ++a.checkNum : a.checkNum, a.checkAll = a.displayNum == a.checkNum
                    }
                    D();
                    var a = t.visiblePreviewFieldData,
                        i = angular.copy(t.previewData.origin_schema);
                    angular.forEach(i, function (t) {
                        t.visibleHitQuery = !0, t.aggregator ? e(t, a.calcTbField) : e(t, a.baseTbField)
                    }), a.currentTbField = "base" == a.currentType ? a.baseTbField : a.calcTbField
                }

                function T(e, a) {
                    for (var i, r = t.previewData.field_list, n = {
                            number: 1,
                            string: 2,
                            date: 3
                        }, o = e; o < a; o++) {
                        if (i = t.originData.schema[o], i.hasOwnProperty("param") && i.param) {
                            var l = JSON.parse(i.param);
                            l.type && "cluster" == l.type ? (i.ico_type = 4, i.editable = !1) : i.ico_type = n[i.data_type]
                        } else i.ico_type = n[i.data_type];
                        r.push(i)
                    }
                }

                function S() {
                    t.$$phase || t.$digest(), c(function () {
                        e($("#tb-detail-table"))
                    }, 0)
                }

                function C() {
                    return localStorage.getItem("jumpToRelationMap")
                }

                function L() {
                    localStorage.setItem("jumpToRelationMap", "")
                }

                function k() {
                    return a.JumpToDsViewTable && a.JumpToDsViewTable.dsId
                }

                function x(e) {
                    function a(t) {
                        t.sub_folders && t.sub_folders.length > 0 && t.sub_folders.map(a), t.tb_list.map(function (t) {
                            e == t.tb_id && (i = t.name)
                        })
                    }
                    var i;
                    return t.original_folderList.map(a), i
                }

                function I(e) {
                    e.map(function (e) {
                        var t = x(e.tb_id);
                        e.tb_name = t || e.tb_name
                    })
                }

                function E(e, a) {
                    var i = e.where_type,
                        r = t.modelData;
                    if (r.whereInfo.where_type = i, "sql" == i) e.sql.length > 0 ? (r.whereInfo.sql = "aggr" == a ? e[i][0].sql : e[i], r.whereInfo.data = !0) : r.whereInfo.data = null;
                    else {
                        I(e[i].filters), r.whereInfo[i] = {
                            filters: e[i].filters
                        }, r.whereInfo.where_linker = e.where_linker, r.whereInfo.data = !0;
                        var n = {},
                            o = r.whereInfo[i].filters;
                        o.length > 0 && (angular.forEach(o, function (e, t) {
                            n[e.tb_id] ? n[e.tb_id].push(e) : (n[e.tb_id] = [], n[e.tb_id].push(e))
                        }), r.whereInfo.conditionFilters = n), 0 == o.length && (r.whereInfo.data = null)
                    }
                    r.whereInfo.data && (t.modelView.filter_show = !0)
                }

                function N(e, t) {
                    for (var a = 0, i = e.length; a < i; a++)
                        if (e[a].fid == t) return e[a];
                    return null
                }

                function j() {
                    t.show_right_aside = !1, t.show_machineLearning_addField = !1, t.mlControl = null, setTimeout(function () {
                        angular.element(window).resize()
                    })
                }

                function A() {}

                function P(e) {
                    if (0 == e.status) {
                        var i = e.result.folder_list;
                        if (e.result.is_empty && (t.no_datasource = !0, t.selected = {
                                tb: null,
                                status: {},
                                tb_id: 0,
                                folder_id: ""
                            }, $.cookie("ds_tb_id", ""), $.cookie("select_folder_id", ""), t.previewData.table_preview_loading = !1, t.previewData.table_preview_filter_loading = !1, t.activeTab.index = 1), e.result.tb_permission || $.cookie("ds_tb_id", ""), t.tabView = !0, t.query = "", t.table_label_list = [], angular.forEach(i, function (e) {
                                "folder_root" == e.folder_id && (e.name = "en" == a.language ? "Root" : "根目录"), e.totalTable = bdp.bdpTables.getFolderTableNumber(e), angular.forEach(e.tb_list, function (e, a) {
                                    e.label && t.table_label_list.indexOf(e.label) < 0 && t.table_label_list.push(e.label)
                                }), e.sub_folders && e.sub_folders.length > 0 && angular.forEach(e.sub_folders, function (e) {
                                    angular.forEach(e.tb_list, function (e) {
                                        e.label && t.table_label_list.indexOf(e.label) < 0 && t.table_label_list.push(e.label)
                                    })
                                })
                            }), t.saveFolderList = angular.copy(i), t.original_folderList = angular.copy(i), t.folderList = t.originFolderList = i, t.$broadcast("updatefolderList", t.original_folderList), t.$broadcast("resetBeforeScrollTop"), M(i), k()) return t.setTargetDsTable(), !1;
                        t.folderList.length > 0 && t.folderList.forEach(function (e) {
                            e.open = !1, "folder_root" != e.folder_id && (e.tb_list.length > 0 && (e.open = !0, e.unfolded = !0), e.sub_folders.forEach(function (t) {
                                t.tb_list.length > 0 && (t.unfolded = !0, t.open = !0, e.open = !0)
                            }))
                        }), t.$$phase || t.$apply()
                    }
                }

                function M(e, a) {
                    if (t.tableSplitData = null, t.tableSplitFolder.sectionFolderList = [], bdp.bdpTables.getFirstLevelNum(e) >= bdp.bdpTables.tableInitThresholdNum) {
                        t.disableSortFolderTable = !0;
                        var i = "";
                        i = $.cookie("ds_tb_id") ? $.cookie("ds_tb_id") : t.getFirst(e).tb_id, i = a ? "" : i
                    }
                    var r = bdp.bdpTables.initTableSplitFunc(e, t.tableSplitData, i);
                    t.tableSplitFolder.sectionFolderList = r.sectionFolderList, t.tableSplitData = r.tableSplitData, c(function () {
                        O()
                    }, 100), angular.element(".J-list-go-top").css("display", "none")
                }

                function q() {
                    t.tableSplitData = null, t.pageInit = !0, a.pageLoading = !0;
                    var e = localStorage.getItem("jumpToRelationMap") ? localStorage.getItem("jumpToRelationMap") : "";
                    e ? $.cookie("ds_tb_id", e) : e = $.cookie("ds_tb_id");
                    var i = {
                        get_first: 1,
                        get_root: 1,
                        tb_list: []
                    };
                    e && i.tb_list.push(e), t.getFolderStructure(i, !0).then(function () {
                        if (t.pageInit = !1, a.pageLoading = !1, t.no_datasource) return !1;
                        var i;
                        e && $.cookie("ds_tb_id") == e && (i = bdp.bdpTables.getTableByTableId(t.folderList, e)), e && $.cookie("ds_tb_id") == e && i || (i = t.getFirst(t.folderList)), "0" != i.tb_id && t.showDetailPage(i, !0), t.refreshFolderStatus()
                    })
                }

                function O(e) {
                    var t = $("#ds-list > ul");
                    if (t[0]) {
                        var a = t[0].clientHeight,
                            i = t.find(".active")[0];
                        i && (i.offsetTop > t[0].scrollTop + a ? t[0].scrollTop = i.offsetTop - a / 2 : t[0].scrollTop > 4 && i.offsetTop < t[0].scrollTop && (t[0].scrollTop = i.offsetTop - a / 2)), t[0].scrollTop <= 0 && (t[0].scrollTop = 4)
                    }
                }

                function R() {
                    var e = [];
                    return angular.forEach(t.fieldSet.schema, function (a, i) {
                        var r = !1,
                            n = {
                                tb_id: t.selected.tb.tb_id,
                                fid: a.field_id,
                                type: null,
                                fid_name: null,
                                remark: null,
                                flag: null
                            };
                        angular.forEach(t.fieldSet.origin_schema, function (e, t) {
                            e.field_id == a.field_id && (e.type != a.type && (r = !0, n.type = a.type), e.remark != a.remark && null != a.remark && (r = !0, n.remark = a.remark), e.title != a.title && a.title && (n.fid_name = a.title, r = !0), n.flag = e.flag)
                        }), r && e.push(n)
                    }), e
                }

                function B(a) {
                    i.field.getEditableSchema(a).then(function (a) {
                        0 == a.status && (t.fieldSet.schema = angular.copy(a.result.fields), t.fieldSet.origin_schema = angular.copy(a.result.fields), c(function () {
                            e(angular.element("#J_edit_field_detail_table"), angular.element("#J_edit_field_header")), $(window).off("resize.alignEditField").on("resize.alignEditField", function () {
                                e(angular.element("#J_edit_field_detail_table"), angular.element("#J_edit_field_header"))
                            })
                        }, 0)), t.previewData.table_preview_loading = !1
                    })
                }
                t.goHelp = function (e) {
                    o(e)
                }, a.view = "worktable", a.show_bdp_header = !0, a.last_worktable_path = l.path(), t.createChartDataShow = !0, t.ableEditModel = ["join", "union", "aggr", "script", "transpose"], t.selected = {
                    tb: null,
                    status: {},
                    tb_id: 0,
                    folder_id: ""
                }, t.unfolding = {}, t.tableSplitFolder = {
                    sectionFolderList: []
                }, a.wsId && a.$watch("workspaceList", function (e) {
                    e && _()
                }), t.setUnFoldingStatus = function (e, a) {
                    e.parent_id ? (t.unfolding[e.folder_id] = {
                        open: a,
                        parent_id: e.parent_id
                    }, t.unfolding[e.parent_id] = {
                        open: a,
                        parent_id: ""
                    }) : t.unfolding[e.folder_id] = {
                        open: a,
                        parent_id: ""
                    }
                }, t.getUnFoldingStatus = function (e) {
                    return !(!t.unfolding[e] || !t.unfolding[e].hasOwnProperty("open")) && t.unfolding[e].open
                }, t.changeFolderOpenStatus = function (e) {
                    angular.forEach(e, function (e) {
                        e.open = t.getUnFoldingStatus(e.folder_id), e.sub_folders && e.sub_folders.length > 0 && angular.forEach(e.sub_folders, function (e) {
                            e.open = t.getUnFoldingStatus(e.folder_id)
                        })
                    })
                }, t.highlightByTableId = function (e, a) {
                    var i = bdp.bdpTables.getFolderByTableId(e, a);
                    t.unfolding = {}, t.setUnFoldingStatus(i, !0), t.changeFolderOpenStatus(e)
                }, t.isGettingFolder = !1, t.scroll_to_active = O, t.showDetailPage = function (e, a, i) {
                    t.no_datasource = !1, t.closeAsidePanel();
                    var r = t.selected.tb_id;
                    if (e != t.selected.tb || a) {
                        var n = bdp.bdpTables.getFolderByTableId(t.folderList, e.tb_id);
                        if (t.tableSplitData) {
                            var o = !1;
                            "folder_root" != n.folder_id ? bdp.bdpTables.isInSectionList(t.tableSplitFolder.sectionFolderList, n.folder_id, !1) || (o = !0) : bdp.bdpTables.isInSectionList(t.tableSplitFolder.sectionFolderList, e.tb_id, !0) || (o = !0), o && (t.tableSplitData = bdp.bdpTables.getTableSplitData(t.folderList, e.tb_id), t.tableSplitFolder.sectionFolderList = bdp.bdpTables.getFirstDisplayList(t.tableSplitData, e.tb_id))
                        }
                        t.selected.folder = n, t.selected.folder_id = n.folder_id, $.cookie("select_folder_id", n.folder_id), t.selected && t.selected.tb && (e.isNotLogType = t.selected.tb.isNotLogType), t.selected.tb = e, t.selected.tb_id = e.tb_id, t.selected.sh_id = e.sh_id, r != t.selected.tb_id && (w(), v(), C() ? t.showTab(2) : "access_tb" == e.tb_type && 0 == e.tb_status ? t.showTab(3) : t.showTab(1), $.cookie("ds_tb_id", t.selected.tb_id), t.selected.status.timer && clearTimeout(t.selected.status.timer), t.selected.status = {}, t.get_status(i, e), c(O, 100)), t.preview.send = !0, t.preview.showErrorReport = !1
                    }
                }, t.updateTbList = function (e, a, i) {
                    function r(e) {
                        for (var t = 0, n = e.length; t < n; t++) {
                            for (var l = 0, s = e[t].tb_list.length; l < s; l++)
                                if (e[t].tb_list[l].tb_id == a.tb_id) {
                                    e[t].tb_list[l][i] = a[i], o = !0;
                                    break
                                }
                            if (o) break;
                            e[t].sub_folders && e[t].sub_folders.length && r(e[t].sub_folders)
                        }
                    }

                    function n(e) {
                        for (var t = 0, i = e.length; t < i; t++) {
                            for (var r = 0, o = e[t].tb_list.length; r < o; r++)
                                if (e[t].tb_list[r].tb_id == a.tb_id) {
                                    e[t].tb_list.splice(r, 1), l = !0;
                                    break
                                }!l && e[t].sub_folders && e[t].sub_folders.length > 0 && n(e[t].sub_folders)
                        }
                    }
                    var o = !1,
                        l = !1;
                    "changeStatus" == e ? (r(t.folderList, "current"), r(t.original_folderList, "original")) : "del" == e && (n(t.folderList, "current"), n(t.original_folderList, "original")), t.$broadcast("updatefolderList", t.original_folderList)
                }, t.hasModel = function () {
                    var e = t.selected.tb ? t.selected.tb.type : "",
                        i = t.selected.tb ? t.selected.tb.tb_type : "";
                    return a.wsId ? ["aggr", "join", "union", "script", "transpose"].indexOf(e) > -1 && "self" == i : ["aggr", "join", "union", "script", "transpose"].indexOf(e) > -1 && "access_tb" != i
                }, t.workTableFilter = {
                    showIt: !1,
                    refreshCalculateFilter: !1
                }, b(), t.resetPreviewFilterData = {
                    flag: !1
                }, t.lastPreviewFilterData = null, t.$on("toFilter", function () {
                    var e = y();
                    t.show_preview_data(e)
                }), t.changeWhereType = function () {
                    "sql" == t.previewFilterData.where.where_type ? $("#tb-detail").css("paddingTop", 296) : t.$broadcast("updateConditionHeight")
                }, t.previewFilterSort = [], t.changeWorkTableSort = function (e, a) {
                    if (t.previewFilterSort = [{
                            fid: e,
                            type: a
                        }], "condition" == t.previewFilterData.where.where_type) t.$broadcast("fire-change-sort", e, a);
                    else {
                        var i = y();
                        i.sort = angular.copy(t.previewFilterSort), e && t.show_preview_data(i)
                    }
                }, t.visibleFieldStatus = {
                    showFlag: !1,
                    refreshVisibleField: !1
                }, D(), t.formatVisiblePreviewFieldData = F, t.activeTab = {
                    index: 1
                }, t.relationView = {
                    view: "list"
                }, t.operateMap = {
                    1: "新增",
                    2: "追加",
                    3: "替换",
                    4: "删除",
                    5: "替换"
                }, t.showTab = function (e, a) {
                    function i() {
                        switch (e) {
                            case 1:
                                t.show_preview_data(t.lastPreviewFilterData);
                                break;
                            case 2:
                                t.show_relation_list();
                                break;
                            case 3:
                                t.show_update_record(a);
                                break;
                            case 4:
                                t.selected.tb && "transpose" == t.selected.tb.type ? t.show_view_info() : t.show_model_struct();
                                break;
                            case 5:
                                t.show_field_set()
                        }
                    }

                    function r() {
                        t.activeTab.index = e, i(), window.GOJS = "GOJS"
                    }
                    if (!t.no_datasource) {
                        if (!t.selected.tb_id) return !1;
                        if (4 == e && t.selected.tb && "join" == t.selected.tb.type) {
                            var n = {
                                funcQueue: [],
                                loadLibInProgress: !1
                            };
                            thirdPluginLoader({
                                initFun: r,
                                libSrc: "https://s1.bdp.cn/static/js/lib/go_latest_eec1082.js",
                                libId: window.GOJS
                            }, n)
                        } else t.activeTab.index = e, i()
                    }
                }, t.rename_field = function (a, r, n) {
                    var o = n.name;
                    return i.tb.modify(angular.toJson([{
                        tb_id: t.selected.tb.tb_id,
                        name: t.selected.tb.name,
                        fid: n.fid,
                        type: r,
                        fid_name: a
                    }])).then(function (i) {
                        var l = i;
                        if (0 == l.status) n.title = n.name = a, n.type = r, n.data_type = t.fieldTypeMap[r], setTimeout(function () {
                            e(angular.element("#tb-detail-table"))
                        }, 100);
                        else {
                            n.name = o;
                            var s = Number(l.status);
                            d(s)
                        }
                    })
                }, t.modifyFieldType = function (e, a) {
                    i.tb.modify(angular.toJson([{
                        tb_id: t.selected.tb.tb_id,
                        fid: e.fid,
                        type: a
                    }])).then(function (t) {
                        var i = t;
                        0 == i.status ? e.type = a : d(i.errstr)
                    }), e.show_type_list = !1
                }, t.fieldTypeMap = {
                    0: "number",
                    1: "number",
                    3: "date",
                    2: "string"
                }, t.getCapacityStatistics = function () {
                    r.get("/api/tb/stat_group").then(function (e) {
                        t.isGettingAccount = !1, 0 == e.status ? (t.tableCapacityStatistics = e.result.total, t.tableCapacityStatisticsTip = t.tips["wb.tableCapacity.used"] + t.tips["wb.tableCapacity.capacity"] + t.tableCapacityStatistics) : d(+e.status, {
                            warn_msg: e.errstr
                        })
                    })
                }, t.get_status = function (e, a, r) {
                    function n() {
                        d.state = "view-status-error", d.joinDesc1 = t.tips["wb.joinWarning"], d.joinDesc2 = t.tips["wb.joinKeyField"], d.joinDesc3 = t.tips["wb.joinOr"], d.joinDesc4 = t.tips["wb.joinErrorLog"], d.joinDesc5 = t.tips["wb.joinWarnSure"]
                    }

                    function o() {
                        d.state = "view-status-error", d.description = t.tips["wb.joinFailed"], d.joinDesc1 = t.tips["wb.joinFailed"], d.joinDesc2 = t.tips["wb.joinKeyField"], d.joinDesc3 = t.tips["wb.joinOr"], d.joinDesc4 = t.tips["wb.joinErrorLog"], d.joinDesc5 = t.tips["wb.joinFailedModify"]
                    }

                    function l(e) {
                        e && (d.state = "view-status-expansion", d.expansionDesc1 = t.tips["wb.dataExpansion.normal"], d.expansionDesc2 = "join" == e.type ? t.tips["wb.dataExpansion.errorReport"] : "", d.expansionDesc3 = "join" == e.type ? t.tips["wb.dataExpansion.checkErrorReport"] : "")
                    }

                    function s() {
                        d.state = "view-status-parent-error", d.parentTbErrorDesc1 = t.tips["wb.parentTbError.parentErrorTip"], d.parentTbErrorDesc2 = t.tips["wb.parentTbError.checkRelationMap"]
                    }
                    if (!a) return !1;
                    var d = t.selected.status;
                    if (t.selected.tb_id || (t.selected.tb_id = a.tb_id), !t.selected.tb_id) return !1;
                    i.tb.getStatus(t.selected.tb_id).then(function (e) {
                        if (0 == e.status) {
                            var a = e.result,
                                i = a.status,
                                c = a.view_status;
                            if (1 != i && 2 != i || t.getCapacityStatistics(), [3, 6].indexOf(i) >= 0 && t.selected.tb && ["access_tb", "allot"].indexOf(t.selected.tb.tb_type) >= 0) return d.state = "update", d.description = t.tips["wb.isUpdatingWaiting"], !1;
                            switch (i) {
                                case 2:
                                    1 == c ? n() : 2 == c ? o() : (d.state = "error", d.description = a.extra_msg);
                                    break;
                                case 3:
                                case 6:
                                    d.state = "update", d.description = t.tips["wb.isUpdatingWaiting"];
                                    break;
                                case 100:
                                    l(t.selected.tb);
                                    break;
                                case 101:
                                    s();
                                    break;
                                case 102:
                                case 103:
                                    d.state = "error", d.description = a.extra_msg;
                                    break;
                                default:
                                    1 == c ? n() : t.selected.status.state = void 0, r && t.show_preview_data()
                            }
                        }
                    })
                }, t.$on("_websocketChartMessage_", function (e, a) {
                    if (10 == a.data.type)
                        if (t.selected.tb_id) {
                            if (a.data.tb_id != t.selected.tb_id) return !1;
                            t.get_status("", {
                                tb_id: a.data.tb_id
                            }, !0)
                        } else t.get_status("", {
                            tb_id: a.data.tb_id
                        })
                });
                var V = {
                    table_preview_filter_loading: !0,
                    table_preview_filter_flag: !1,
                    table_preview_loading: !0,
                    field_list: [],
                    field_data_list: [],
                    field_data_total: 0,
                    field_data_update_time: "",
                    field_data_show_total: 0,
                    origin_schema: null,
                    sqlTbList: []
                };
                t.previewData = angular.copy(V), t.show_preview_data = function (r) {
                    var n = this;
                    angular.element("#tb-detail-table");
                    r ? t.previewData.table_preview_filter_loading = !0 : t.previewData = angular.copy(V), t.filterCondition = r ? angular.copy(r.where) : {};
                    var o = n.requestTimestamp = +new Date,
                        l = t.visiblePreviewFieldData.modifyFieldList;
                    t.generateCoordinateStatus = 0;
                    var s = {
                        tb_id: t.selected.sh_id ? t.selected.sh_id : t.selected.tb_id
                    };
                    r && (s.where = angular.toJson(r.where), s.where_linker = r.where_linker, s.sort = angular.toJson(r.sort), s.fields = angular.toJson(l)), i.tb.preview(s).then(function (l) {
                        if (n.requestTimestamp > o) return null;
                        if (l) {
                            var s = !1;
                            t.previewData.field_data_list.length <= 0 && (s = !0), t.previewFields = angular.copy(l.fields), t.generateCoordinateStatus = l.has_gis, 2 == l.has_gis && (i.tb.gisModify({
                                tb_id: t.selected.tb_id
                            }), c(function () {
                                t.generateCoordinateStatus = 0
                            }, 1e4)), null != r ? t.previewData = angular.copy(V) : t.previewData.field_list = [], angular.extend(t.previewData, {
                                table_preview_filter_loading: !1,
                                table_preview_filter_flag: !1,
                                table_preview_loading: !1,
                                field_data_total: l.count,
                                field_data_show_total: l.count <= 1e3 ? l.count : 1e3,
                                field_data_update_time: u("date")(1e3 * l.update_time, "yyyy-MM-dd HH:mm:ss"),
                                origin_schema: l.fields,
                                show_schema: l.schema,
                                has_gis: l.has_gis,
                                update_mode: l.update_mode,
                                materialzed: l.materialized
                            });
                            var d = t.selected.tb;
                            angular.forEach(l.fields, function (e) {
                                e.data_type = t.fieldTypeMap[e.type]
                            }), t.previewData.sqlTbList = [{
                                name: d.name,
                                tb_id: d.tb_id,
                                open: !0,
                                fields: l.fields
                            }], angular.forEach(l.schema, function (e) {
                                if (e.editable = !0, e.modifyField = !0, e.hasOwnProperty("param") && e.param) {
                                    var t = angular.fromJson(e.param);
                                    t && t.type && "ds" == t.type && (e.editable = !1), t && t.type && "general" == t.type && (e.modifyField = !1), t && t.type && "ml" == t.type && (e.made_by_ml = !0, e.modifyField = !1)
                                }
                            }), t.tbType = l.tb_type, t.originData = l, t.defaultMaxTable(), null != r && (t.$broadcast("last-param-change", r), t.previewData.table_preview_filter_flag = !0), t.lastPreviewFilterData = r || null, l.hasOwnProperty("materialized") ? t.previewData.materialized = l.materialized : t.previewData.materialized = 1, t.previewData.specialTbStatus = l.special_status;
                            var f = !a.permision.isPersonal && "union" != t.selected.tb.type && "public" != t.selected.tb.type && "allot" != t.selected.tb.type && "access_tb" != t.selected.tb.tb_type;
                            t.enable_set_partition = f && l.hasOwnProperty("can_partition") && !!l.can_partition, l.hasOwnProperty("partition") && t.updatePartitionData(l.partition), d.materialized = l.materialized, d.update_mode = l.update_mode, d.isNotLogType = 6 != l.type, c(function () {
                                e($("#tb-detail-table")), $(window).off("resize.alignTable").on("resize.alignTable", function () {
                                    e($("#tb-detail-table"))
                                }), angular.element("#J_wtb_table_scroll_preview").off("scroll.scrollxTable").on("scroll.scrollxTable", function () {
                                    angular.element("#tb-header").css({
                                        left: 0 - $(this).scrollLeft()
                                    })
                                }), l.schema.length > 20 && (s && t.previewData.field_data_list.length > 0 && $("#J_wtb_preview_wrap").scrollLeft(0), angular.element("#tb-detail-table").closest(".table-scroll").off("scroll.addColumn").on("scroll.addColumn", function () {
                                    if (this.scrollLeft + this.clientWidth > this.scrollWidth - 100) {
                                        t.addColumn(15) || $(this).off("scroll.addColumn")
                                    }
                                }), angular.element("#J_wtb_preview_wrap").closest(".J-nodata-table-scroll").off("scroll.addColumnNodata"), t.previewData.field_data_list.length <= 0 && angular.element("#J_wtb_preview_wrap").closest(".J-nodata-table-scroll").off("scroll.addColumnNodata").on("scroll.addColumnNodata", function () {
                                    if (this.scrollLeft + this.clientWidth > this.scrollWidth - 100) {
                                        t.addColumn(15) || $(this).off("scroll.addColumnNodata")
                                    }
                                })), l.data.length > 50 && angular.element("#tb-detail-table").closest(".table-scroll").off("scroll.addRow").on("scroll.addRow", function () {
                                    if (this.scrollTop + this.clientHeight > this.scrollHeight - 100) {
                                        t.addRow(30) || $(this).off("scroll.addRow")
                                    }
                                }), t.workTableFilter.showIt && (t.workTableFilter.refreshCalculateFilter = !t.workTableFilter.refreshCalculateFilter), t.visibleFieldStatus.showFlag && (t.visibleFieldStatus.refreshVisibleField = !t.visibleFieldStatus.refreshVisibleField), F()
                            }, 0);
                            var p = t.selected.status;
                            1 == l.status && (l.count > 0 && 0 == l.data.length ? (p.state = "fail", p.description = t.tips["wb.loadFailed"]) : "fail" == p.state && (p.state = void 0))
                        } else null != r && (t.previewData.table_preview_filter_loading = !1)
                    })
                }, t.changeTableFilterTab = function (e) {
                    switch (e) {
                        case "filter":
                            t.workTableFilter.showIt = !t.workTableFilter.showIt, t.visibleFieldStatus.showFlag = !1;
                            break;
                        case "display":
                            t.visibleFieldStatus.showFlag = !t.visibleFieldStatus.showFlag, t.workTableFilter.showIt = !1
                    }
                    t.visibleFieldStatus.showFlag || t.formatVisiblePreviewFieldData()
                }, t.modelRedraw = function () {
                    t.$broadcast("redraw")
                }, t.defaultMaxTable = function () {
                    var e = t.originData.data.length,
                        a = t.originData.schema.length,
                        i = Math.min(50, e),
                        r = Math.min(20, a),
                        n = t.previewData.field_data_list;
                    T(0, r);
                    for (var o = 0; o < i; o++) {
                        var l = [];
                        n.push(l);
                        for (var s = 0; s < r; s++) l.push(t.originData.data[o][s])
                    }
                    S()
                }, t.addColumn = function (e) {
                    var a = t.previewData.field_list.length,
                        i = t.originData.schema.length,
                        r = Math.min(a + e, i),
                        n = t.previewData.field_data_list,
                        o = !0;
                    return a < i ? (T(a, r), angular.forEach(n, function (e, i) {
                        for (var n = a; n < r; n++) e.push(t.originData.data[i][n])
                    }), o = !0, S()) : o = !1, o
                }, t.addRow = function (e) {
                    var a = t.previewData.field_data_list,
                        i = a.length,
                        r = t.originData.data.length,
                        n = t.previewData.field_list.length,
                        o = Math.min(i + e, r),
                        l = !0;
                    if (i < r) {
                        for (var s = i; s < o; s++) {
                            var d = [];
                            a.push(d);
                            for (var c = 0; c < n; c++) d.push(t.originData.data[s][c])
                        }
                        l = !0, S()
                    } else l = !1;
                    return l
                }, t.$on("reloadFieldList", function () {
                    t.show_preview_data(t.lastPreviewFilterData)
                }), t.goCheckRelationMap = function () {
                    2 != t.activeTab.index && t.showTab(2), "path" != t.relationView.view && c(function () {
                        t.displayRelationMap()
                    }, 10)
                }, t.displayRelationMap = function () {
                    function e() {
                        c(function () {
                            t.relationView.view = "path"
                        }, 0), t.changeRelationView(), window.GOJS = "GOJS"
                    }
                    var a = {
                        funcQueue: [],
                        loadLibInProgress: !1
                    };
                    thirdPluginLoader({
                        initFun: e,
                        libSrc: "https://s1.bdp.cn/static/js/lib/go_latest_eec1082.js",
                        libId: window.GOJS
                    }, a)
                }, t.refreshTableData = function (e) {
                    var a = {
                        tb_id: t.selected.tb_id
                    };
                    t.ws_id && (a.ws_id = t.ws_id), i.tb.viewExec(a)
                }, t.changeRelationView = function () {
                    function e(e) {
                        function a(e, t, n, s) {
                            angular.forEach(t, function (t) {
                                l = o[t], r++, e ? i.push({
                                    key: String(r),
                                    parent: e,
                                    tb_id: l.tb_id,
                                    tb_name: l.title,
                                    tb_type: l.type,
                                    view_type: l.view_type,
                                    schema_total: l.data_count,
                                    update_status: l.status,
                                    update_time: l.utime,
                                    produce_type: n,
                                    level: s
                                }) : i.push({
                                    key: String(r),
                                    tb_id: l.tb_id,
                                    tb_name: l.title,
                                    tb_type: l.type,
                                    view_type: l.view_type,
                                    schema_total: l.data_count,
                                    update_status: l.status,
                                    update_time: l.utime,
                                    produce_type: n,
                                    level: s
                                }), l.dep_list && l.dep_list.length > 0 && a(String(r), l.dep_list, l.view_type, s + 1)
                            })
                        }
                        var i = [],
                            r = 0,
                            n = e.start_node,
                            o = e.nodes,
                            l = {};
                        o[n].dep_list.length > 0 ? (a("", [n], "", 0), t.relationMapData = i) : (t.hasRelationMap = !1, t.showRelationProduceLoading = !1);
                        var s = {},
                            d = 0;
                        angular.forEach(i, function (e) {
                            s[e.level] = s[e.level] > 0 ? s[e.level] + 1 : 1
                        }), angular.forEach(s, function (e, t) {
                            d = Math.max(d, e)
                        }), angular.element("#show_relation_produce").height(70 * d), setTimeout(function () {
                            angular.element(".relation-node-message").css({
                                display: "none"
                            }), angular.element("#show_relation_produce").find("canvas").height(70 * d)
                        }, 10), t.$broadcast("showRelationMapData", t.relationMapData)
                    }

                    function r(e) {
                        var i = [],
                            r = 6,
                            n = e.start_node,
                            o = e.nodes,
                            l = o[n];
                        if (0 == o[n].chart.length && 0 == o[n].ref_list.length && 0 == o[n].user.length && 0 == o[n].user_group.length) return t.hasCurrentRelation = !1, void(t.showCurrentRelationLoading = !1);
                        i.push({
                            key: "1",
                            tb_id: l.tb_id,
                            name: l.title,
                            tb_type: l.type,
                            view_type: l.view_type,
                            schema_total: l.data_count,
                            update_status: l.status,
                            update_time: l.utime,
                            node_type: "table",
                            produce_type: "",
                            level: 1
                        }), o[n].ref_list.length > 0 && i.push({
                            key: "2",
                            parent: "1",
                            name: "zh" == a.language ? "工作表" : "table",
                            produce_type: "zh" == a.language ? "工作表" : "table",
                            node_type: "classify",
                            level: 2
                        }), o[n].chart.length > 0 && i.push({
                            key: "3",
                            parent: "1",
                            name: "zh" == a.language ? "图表" : "Chart",
                            produce_type: "zh" == a.language ? "图表" : "Chart",
                            node_type: "classify",
                            level: 2
                        }), o[n].user.length > 0 && i.push({
                            key: "4",
                            parent: "1",
                            name: "zh" == a.language ? "用户" : "User",
                            produce_type: "zh" == a.language ? "用户" : "User",
                            node_type: "classify",
                            level: 2
                        }), o[n].user_group.length > 0 && i.push({
                            key: "5",
                            parent: "1",
                            name: "zh" == a.language ? "组" : "Group",
                            produce_type: "zh" == a.language ? "组" : "Group",
                            node_type: "classify",
                            level: 2
                        }), angular.forEach(o[n].ref_list, function (e) {
                            l = o[e], i.push({
                                key: String(r++),
                                parent: "2",
                                tb_id: l.tb_id,
                                name: l.title,
                                tb_type: l.type,
                                view_type: l.view_type,
                                schema_total: l.data_count,
                                update_status: l.status,
                                update_time: l.utime,
                                produce_type: l.view_type,
                                node_type: "table",
                                level: 3
                            })
                        }), angular.forEach(o[n].chart, function (e) {
                            i.push({
                                key: String(r++),
                                parent: "3",
                                ct_id: e.ct_id,
                                name: e.ct_name,
                                dsh_id: e.dsh_id,
                                dsh_name: e.dsh_name,
                                proj_id: e.proj_id,
                                proj_name: e.proj_name,
                                produce_type: "",
                                node_type: "chart",
                                level: 3
                            })
                        }), angular.forEach(o[n].user, function (e) {
                            i.push({
                                key: String(r++),
                                parent: "4",
                                name: e,
                                produce_type: "",
                                node_type: "user",
                                level: 3
                            })
                        }), angular.forEach(o[n].user_group, function (e) {
                            i.push({
                                key: String(r++),
                                parent: "5",
                                name: e,
                                produce_type: "",
                                node_type: "group",
                                level: 3
                            })
                        }), t.currentRelationData = i;
                        var s = {},
                            d = 0;
                        angular.forEach(i, function (e) {
                            s[e.level] = s[e.level] > 0 ? s[e.level] + 1 : 1
                        }), angular.forEach(s, function (e, t) {
                            d = Math.max(d, e)
                        }), angular.element("#show_current_relation").height(60 * d), c(function () {
                            angular.element(".relation-node-message").css({
                                display: "none"
                            }), angular.element("#show_current_relation").find("canvas").height(60 * d)
                        }, 10), t.$broadcast("showCurrentRelationData", t.currentRelationData)
                    }
                    angular.element(".relation-node-message").css({
                        display: "none"
                    }), t.showRelationProduceLoading = !0, t.showCurrentRelationLoading = !0, t.hasRelationMap = !0, t.hasCurrentRelation = !0, i.tb.wholeJoinChain({
                        tb_id: t.selected.tb_id
                    }).then(function (a) {
                        t.hasRelationMap = !0, e(a.result)
                    }), i.chart.wholeRelaChain({
                        tb_id: t.selected.tb_id
                    }).then(function (e) {
                        t.hasCurrentRelation = !0, r(e.result)
                    })
                }, t.hideRelationNodeMessage = function () {
                    angular.element(".relation-node-message").css({
                        display: "none"
                    })
                };
                var H = 0,
                    W = angular.element(".tab-relation-list").width(),
                    U = 0,
                    J = angular.element(".tab-relation-list").height();
                $(window).resize(function () {
                    "path" == t.relationView.view && setTimeout(function () {
                        H = parseInt(angular.element(".tab-relation-list").width()), U = parseInt(angular.element(".tab-relation-list").height()), (Math.abs(H - W) > 30 || Math.abs(U - J) > 30) && (a.$broadcast("refresh-relation-path"), W = H, J = U)
                    }, 200)
                }), t.checkField = "fieldDescription", t.batchSetFieldNamesDialog = function () {
                    s.open({
                        template: "/static/js/worktable/tableDialog/batch_set_field_names.html",
                        className: "ngdialog-theme-default ngDialog-width-420 ngdialog-batch-set-field-names",
                        scope: t,
                        data: {
                            tb_id: t.selected.tb_id,
                            completeCallback: t.batchSetFieldNames
                        },
                        controller: "batchSetFieldNameCtrl"
                    })
                }, t.batchSetFieldNames = function (e, a) {
                    if ("desc" == e) t.fieldSet.schema.forEach(function (e) {
                        e.title = "fieldDesc" == a.selectField ? e.remark : e.name
                    });
                    else if ("upload" == e) {
                        t.fieldSet.unMatchMap = {};
                        var i = a.analysisData;
                        t.fieldSet.schema.forEach(function (e) {
                            i && i.hasOwnProperty(e.field_id) ? e.title = i[e.field_id] ? i[e.field_id] : e.title : t.fieldSet.unMatchMap[e.field_id] = !0
                        })
                    }
                    s.closeAll()
                }, t.makeFolderList = function (e) {
                    angular.forEach(e, function (e, t) {
                        var a = "";
                        e.parents.forEach(function (e, t) {
                            a += e.name + "/"
                        }), e.folderList = a + e.proj_name
                    })
                }, t.show_relation_list = function () {
                    t.previewData.table_preview_filter_loading = !1, t.previewData.table_preview_loading = !1, t.relation = {}, t.relationMapData = [], t.currentRelationData = [], t.relationView.view = "list", i.chart.getRelationList(t.selected.tb_id).then(function (e) {
                        if (e) {
                            for (var i = e.chart, r = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表", n = i.length - 1; n >= 0; n--) "" == i[n].ct_name && (i[n].ct_name = r);
                            t.relation.chart = e.chart, t.relation.wb = e.wb, t.relation.user = e.user, t.relation.user_group = e.user_group, t.makeFolderList(t.relation.chart), ("self" == t.selected.tb.tb_type || "public" == t.selected.tb.tb_type) && e.refer_ds.length > 0 && (t.relation.refer_ds = e.refer_ds);
                            var o = t.relation;
                            "admin" == a.role ? t.relation.isEmpty = 0 == o.chart.length && 0 == o.wb.length && 0 == o.user.length && 0 == o.user_group.length : t.relation.isEmpty = 0 == o.chart.length && 0 == o.wb.length, C() && L()
                        }
                    })
                }, t.$on("jumpToDashChart", function (e, a) {
                    a && t.jumpToDashChart(a)
                }), t.jumpToDashChart = function (e) {
                    a.global.rule_id = "", a.wtbRelationSelectedItem = {
                        ct_id: e.ct_id
                    };
                    var t = "";
                    t = 1 == e.category ? "/data_screen/" + e.proj_id + "/" + e.dsh_id : 2 == e.category ? "/dash_edit/" + e.proj_id + "/" + e.dsh_id + "/mode/adv" : a.wsId ? "/dash_edit_ws/" + a.wsId + "/" + e.proj_id + "/" + e.dsh_id : "/dash_edit/" + e.proj_id + "/" + e.dsh_id, l.path(t)
                }, t.show_update_record = function (e) {
                    var a = t.selected.tb;
                    if ("access_tb" == a.tb_type) i.db.shareTbInfo({
                        tb_id: a.tb_id
                    }).then(function (e) {
                        0 == e.status && (t.tb_shareInfo = e.result)
                    });
                    else if ("excel" == a.type) {
                        var r = {
                            tb_id: a.dstb_id
                        };
                        i.db.getUpdateRecord(r).then(function (e) {
                            t.updateRecord = e || {}
                        })
                    } else i.tb.getJoinInfo(a.tb_id).then(function (a) {
                        t.joinInfo = a || [], e && t.errReport()
                    });
                    t.previewData.table_preview_filter_loading = !1, t.previewData.table_preview_loading = !1
                }, t.opLogPage = function (e, a, r) {
                    var n = {};
                    e > 0 && e <= t.updateRecord.op_log.pages_count && (n = {
                        tb_id: t.selected.tb.dstb_id,
                        query_type: "op_log",
                        page: e
                    }, i.db.getUpdateRecord(n).then(function (e) {
                        t.updateRecord.op_log = e.op_log
                    }))
                }, t.fileListPage = function (e, a, r) {
                    var n = {};
                    e > 0 && e <= t.updateRecord.file_list.pages_count && (n = {
                        tb_id: t.selected.tb.dstb_id,
                        query_type: "file_list",
                        page: e
                    }, i.db.getUpdateRecord(n).then(function (e) {
                        t.updateRecord.file_list = e.file_list
                    }))
                };
                var z = function (e) {
                    i.getTaskStatus(e).then(function (a) {
                        if (0 == a.status) {
                            var i = a.result;
                            0 == i.status || 3 == i.status ? c(function () {
                                z(e)
                            }, 1e3) : 2 == i.status ? (d(t.tips["wb.deleteFailed"]), t.previewData.table_preview_loading = !1) : (t.previewData.table_preview_loading = !1, d(t.tips["wb.deleteSuccess"]), v(), t.showTab(t.activeTab.index))
                        }
                    })
                };
                t.deleteDstbFile = function (e) {
                        t.previewData.table_preview_loading || confirm(t.tips["wb.confirmDelete"]) && (t.previewData.table_preview_loading = !0, i.db.excelDelete({
                            map_id: e.map_id,
                            tb_id: t.selected.tb_id
                        }).then(function (e) {
                            t.previewData.table_preview_loading = !1, 0 == e.status && z(e.result)
                        }))
                    }, t.operatorMap = f, t.show_model_struct = function (e) {
                        t.modelData = {};
                        var a = t.modelData;
                        t.previewData.table_preview_loading = !0, i.tb.getModelStruct(t.selected.tb.tb_id).success(function (e) {
                            function r() {
                                t.modelData.whereInfo = {}, t.modelData.diagram = {}, t.modelData.diagram.nodeDataArray = n.info.nodeDataArray, t.modelData.diagram.linkDataArray = n.info.linkDataArray, E(n.info.where, "join"), window.GOJS = "GOJS"
                            }
                            if (t.previewData.table_preview_loading = !1, 0 == e.status) {
                                t.modelView = {};
                                var n = e.result;
                                switch (n.type) {
                                    case "aggr":
                                        a.whereInfo = {}, a.name = n.origin_name, a.tbId = n.origin_tb_id, t.modelData.info = angular.fromJson(n.info), E(n.info.where, "aggr");
                                        break;
                                    case "join":
                                        var o = {
                                            funcQueue: [],
                                            loadLibInProgress: !1
                                        };
                                        thirdPluginLoader({
                                            initFun: r,
                                            libSrc: "https://s1.bdp.cn/static/js/lib/go_latest_eec1082.js",
                                            libId: window.GOJS
                                        }, o);
                                        break;
                                    case "union":
                                        t.modelData.info = [], t.modelData.thead = [], t.modelData.whereInfo = {}, angular.forEach(n.table.fields, function (e) {
                                            e.flag || t.modelData.thead.push(e)
                                        });
                                        var l = [];
                                        angular.forEach(n.info, function (e) {
                                            l.push(e.tb_id), e.origin_fields = e.fields.map(function (e) {
                                                return e.nick_name = e.title, e
                                            });
                                            var a = e.selected_fields = [];
                                            angular.forEach(e.col_fid_list, function (t) {
                                                t ? a.push(N(e.fields, t)) : a.push({})
                                            }), t.modelData.info.push(e)
                                        }), i.folder.getTableFolderInfo({
                                            tb_list: angular.toJson(l)
                                        }).then(function (e) {
                                            if (0 == e.status) {
                                                var a, i = e.result;
                                                t.modelData.info.map(function (e) {
                                                    a = i[e.tb_id], "folder_root" == a.folder_id && (a.name = "en" == $.cookie("locale") ? "Root" : "根目录"), e.folderName = a ? a.name : ""
                                                }), n.where && "condition" == n.where.where_type && n.where.condition.filters.map(function (e) {
                                                    e.folderName = i[e.tb_id] ? i[e.tb_id].name : ""
                                                })
                                            }
                                        }), E(n.where, "union");
                                        break;
                                    case "script":
                                        var s = [];
                                        angular.forEach(t.originFolderList, function (e) {
                                            angular.forEach(e.tb_list, function (e) {
                                                s.push(e.name)
                                            })
                                        }), t.modelData.info = n.info, t.table_name_array = s
                                }
                            }
                        })
                    }, t.show_view_info = function () {
                        if (t.selected.tb) {
                            var e = {
                                type: "transpose" == t.selected.tb.type ? 7 : "",
                                tb_id: t.selected.tb.tb_id
                            };
                            t.tableViewInfo = {
                                tb_id: t.selected.tb.tb_id,
                                type: 7,
                                modelInfo: null
                            }, t.previewData.table_preview_loading = !0, i.view.info(e).then(function (e) {
                                t.previewData.table_preview_loading = !1, 0 == e.status ? t.tableViewInfo.modelInfo = e.result : d(e.status, {
                                    warn_msg: e.errstr
                                })
                            })
                        }
                    }, t.closeDialog = function () {
                        s.closeAll()
                    }, t.editTb = function () {
                        var e = t.selected.tb,
                            i = "";
                        switch (e.type) {
                            case "join":
                                i = "join_table";
                                break;
                            case "union":
                                i = "union_table";
                                break;
                            case "aggr":
                                i = "polymer_table";
                                break;
                            case "script":
                                i = "sql_table";
                                break;
                            case "transpose":
                                i = "transpose_table"
                        }
                        var r = a.wsId ? "_ws_edit" : "_edit";
                        g.go(i + r, {
                            wsId: a.wsId,
                            tbId: e.tb_id
                        })
                    }, t.createFieldByML = function () {
                        t.show_right_aside || (t.mlControl = {}, t.show_right_aside = !0, t.show_machineLearning_addField = !0, setTimeout(function () {
                            angular.element(window).resize()
                        }))
                    }, t.closeAsidePanel = function () {
                        t.mlControl && t.mlControl.onClose(), j()
                    }, t.okAsidePanel = function () {
                        t.mlControl ? t.mlControl.onOk().then(function (e) {
                            0 == e.status && (j(), d(h.instant("ML_tip.fieldCreateSuccess")), t.showTab(1))
                        }) : j()
                    }, t.$on("fieldMMRefresh", function (e) {
                        e.stopPropagation(), t.showTab(1)
                    }), t.createFieldFormula = function () {
                        a.pageLoading = !0, t.newField = {
                            type: "create",
                            name: "",
                            aggregator: "",
                            module: "wb",
                            placeholder: 1,
                            is_display: !1
                        };
                        s.open({
                            template: "/static/partials/add-field.html",
                            data: {
                                fieldList: t.previewData.origin_schema
                            },
                            className: "ngdialog-theme-default add-field-dialog",
                            scope: t
                        })
                    }, t.modifyField = function (e) {
                        if (e.made_by_ml) return d(h.instant("ML_tip.fieldByMLNoEdit"));
                        a.pageLoading = !0, t.newField = angular.extend({
                            aggregator: e.row_aggregator,
                            original_field_name: e.name,
                            placeholder: 1,
                            module: "wb"
                        }, e, {
                            type: "modify",
                            data_type: t.fieldTypeMap[e.type]
                        });
                        s.open({
                            template: "/static/partials/add-field.html",
                            data: {
                                fieldList: t.previewData.origin_schema
                            },
                            className: "ngdialog-theme-default add-field-dialog",
                            scope: t
                        })
                    }, t.addCalcField = function (e) {
                        function r() {
                            a.pageLoading = !0, i.field["create" === e.type ? "create" : "modify"]({
                                tb_id: t.selected.tb.tb_id,
                                original_field_name: e.original_field_name || "",
                                new_field_name: e.name,
                                aggregator: e.aggregator.trim(),
                                data_type: e.data_type,
                                flag: 1,
                                fid: e.fid || "",
                                is_display: e.is_display ? 1 : 0
                            }).success(function (i) {
                                if (a.pageLoading = !1, t.global.clickComplete = !0, 0 == i.status) {
                                    t.showTab(1), s.closeAll();
                                    var r = "create" == e.type ? t.tips["field.addFieldSuccess"] : t.tips["field.modifyFieldSuccess"];
                                    m.alertSuccess(r)
                                } else "7200" == i.status ? d(t.tips["field.formulaInvalid"]) : "40005" == i.status && d(i.errstr)
                            })
                        }
                        t.global.clickComplete = !1, $("#tb-detail").css("padding-top", "48px");
                        var n = !1;
                        if (e.name ? e.data_type || e.param ? e.aggregator.trim() || e.param && "group" == e.param.type || (d(t.tips["field.fieldFormulaRequired"]), n = !0) : (d(t.tips["field.fieldTypeRequired"]), n = !0) : (d(t.tips["field.fieldNameRequired"]), n = !0), n) return t.global.clickComplete = !0, !1;
                        m.isTooLong({
                            tb_id: t.selected.tb.tb_id,
                            aggregator: e.aggregator.trim(),
                            data_type: e.data_type
                        }).then(function (e) {
                            if (t.global.clickComplete = !0, "error" == e) return !1;
                            e ? m.confirmModify(function () {
                                r()
                            }) : r()
                        })
                    }, t.delNewField = function (e, a) {
                        s.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-300",
                            scope: t,
                            data: {
                                title: t.tips["chart.tip"],
                                message: t.tips["chart.delField"] + ": " + e + " ?"
                            }
                        }).then(function () {
                            i.field.del(a, t.selected.tb.tb_id).success(function (e) {
                                0 == e.status ? (v(), t.showTab(1)) : "7590" == e.status ? d(t.tips["chart.fieldInUsing"]) : "40006" == e.status ? d(e.errstr) : errorHandle(e)
                            })
                        })
                    }, t.checkUnreadTbInFolder = function (e, a) {
                        var i = 0,
                            r = 0,
                            n = 0;
                        if (e)
                            for (i = 0; i < a.length; i++) {
                                if (a[i].folder_id == e) {
                                    for (a[i].has_unread = !1, n = 0; n < a[i].tb_list.length; n++)
                                        if (("access_tb" == a[i].tb_list[n].tb_type || "public" == a[i].tb_list[n].tb_type) && 0 == a[i].tb_list[n].tb_status) {
                                            a[i].has_unread = !0;
                                            break
                                        }
                                    break
                                }
                                if (a[i].sub_folders && a[i].sub_folders.length > 0)
                                    for (r = 0; r < a[i].sub_folders.length; r++)
                                        if (a[i].sub_folders[r].folder_id == e) {
                                            for (a[i].sub_folders[r].has_unread = !1, a[i].has_unread = !1, n = 0; n < a[i].sub_folders[r].tb_list.length; n++)
                                                if (("access_tb" == a[i].sub_folders[r].tb_list[n].tb_type || "public" == a[i].sub_folders[r].tb_list[n].tb_type) && 0 == a[i].sub_folders[r].tb_list[n].tb_status) {
                                                    a[i].sub_folders[r].has_unread = !0, a[i].has_unread = !0;
                                                    break
                                                }
                                            break
                                        }
                            } else
                                for (i = 0; i < a.length; i++) {
                                    if (a[i].has_unread = !1, a[i].sub_folders && a[i].sub_folders.length > 0)
                                        for (r = 0; r < a[i].sub_folders.length; r++)
                                            for (a[i].sub_folders[r].has_unread = !1, n = 0; n < a[i].sub_folders[r].tb_list.length; n++)
                                                if (("access_tb" == a[i].sub_folders[r].tb_list[n].tb_type || "public" == a[i].sub_folders[r].tb_list[n].tb_type) && 0 == a[i].sub_folders[r].tb_list[n].tb_status) {
                                                    a[i].sub_folders[r].has_unread = !0, a[i].has_unread || (a[i].has_unread = !0);
                                                    break
                                                }
                                    if (a[i].tb_list && a[i].tb_list.length > 0)
                                        for (n = 0; n < a[i].tb_list.length; n++)
                                            if (("access_tb" == a[i].tb_list[n].tb_type || "public" == a[i].tb_list[n].tb_type) && 0 == a[i].tb_list[n].tb_status && !a[i].has_unread) {
                                                a[i].has_unread = !0;
                                                break
                                            }
                                }
                        t.$$phase || t.$apply()
                    }, t.show_table = function (e, r) {
                        if (a.global.tbEditting = !1, t.relationView.view = "list", t.relationMapData = [], t.currentRelationData = [], t.selected.tb_id != e.tb_id && ($("#tb-detail").css("padding-top", "48px"), $("#FieldScreen").css("margin-top", 0)), t.showDetailPage(e, !1, r), L(), ("access_tb" == e.tb_type || "public" == e.tb_type) && 0 == e.tb_status) {
                            t.updateTbList("changeStatus", e, "tb_status");
                            var n = {
                                tb_id: e.tb_id,
                                tb_status: angular.toJson({
                                    tb_status: 1
                                })
                            };
                            i.folder.modify_folder_rel(n).then(function (a) {
                                0 == a.status ? c(function () {
                                    angular.element(".J-search-worktable-input-main").find("input").val() ? t.$broadcast("redoSearch") : t.refreshSpecificFolderContent(e.tb_id).then(function () {
                                        var a = bdp.bdpTables.getFolderByTableId(t.folderList, e.tb_id);
                                        t.checkUnreadTbInFolder(a.folder_id, t.folderList)
                                    })
                                }, 0) : d(+a.status, {
                                    warn_msg: a.errstr
                                })
                            })
                        }
                    }, t.$on("skipTargetTable", function (e, a) {
                        a && t.targetTablePreview(a)
                    }), t.targetTablePreview = function (e) {
                        "dsTbList" == t.workdListView && (t.workdListView = "folderList", t.viewTip = t.tips["wb.databaseView"]);
                        var a = bdp.bdpTables.getTableByTableId(t.folderList, e);
                        if (a) t.show_table(a), t.refreshFolderStatus(), t.$broadcast("resetBeforeScrollTop");
                        else {
                            var i = angular.element(".J-search-worktable-input-main").find("input");
                            if (i && void 0 != i.val() && "" != i.val()) {
                                i.val("");
                                var r = [];
                                e && r.push(e), $.cookie("ds_tb_id", e), q()
                            } else t.refreshSpecificFolderContent(e).then(function () {
                                var a = bdp.bdpTables.getTableByTableId(t.folderList, e);
                                t.show_table(a), t.refreshFolderStatus(), t.$broadcast("resetBeforeScrollTop")
                            })
                        }
                    }, t.show_table_by_id = function (e) {
                        function a(r) {
                            for (var n = 0, o = r.length; n < o; n++) {
                                for (var l = 0, s = r[n].tb_list.length; l < s; l++)
                                    if (e == r[n].tb_list[l].tb_id) {
                                        i = r[n].tb_list[l], t.setUnFoldingStatus(r[n], !0);
                                        break
                                    }
                                r[n].sub_folders && r[n].sub_folders.length > 0 && a(r[n].sub_folders)
                            }
                        }
                        var i = {};
                        a(t.original_folderList), i || (i = t.getFirst(t.original_folderList)), t.changeFolderOpenStatus(t.folderList), t.show_table(i)
                    }, t.partitionData = {
                        tipShow: !1,
                        field_list: [],
                        field_id: "",
                        data_type: "string",
                        granularity: "month",
                        mode: "0",
                        empty_field: !1,
                        set: !1,
                        match_error: !1,
                        readonly: !1
                    }, t.set_partition_view = "preview", t.show_set_partition = function () {
                        t.preparePartitionData(), s.open({
                            template: "/static/partials/dialogTemplates/worktable_partition_set.html",
                            className: "ngdialog-theme-default ng-ds-dialog partition-set-dialog",
                            scope: t
                        })
                    }, t.closePartitionTip = function (e) {
                        e.stopPropagation(), t.partitionData.tipShow = !1
                    }, t.triggerFullUpdate = function () {
                        s.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-400",
                            scope: t,
                            data: {
                                message: "wb.fullUpdate.doubleCheck",
                                preformat: !0
                            }
                        }).then(function () {
                            i.tb.triggerFullUpdate({
                                tb_id: t.selected.tb.tb_id
                            }).success(function (e) {
                                0 == e.status ? t.get_status(1) : d(e.errstr)
                            })
                        })
                    }, t.updatePartitionData = function (e) {
                        "string" == typeof e && (e = angular.fromJson(e)), e = e || {}, "string" == typeof e.param && (e.param = angular.fromJson(e.param)), e.param = e.param || {}, t.partitionData = {
                            tipShow: !1,
                            field_list: [],
                            field_id: e.base_field,
                            data_type: e.param.type || "",
                            granularity: e.param.option || "",
                            empty_field: !1,
                            mode: "hash" == e.param.type ? "1" : "0",
                            set: !!e.base_field,
                            match_error: !1,
                            readonly: e.readonly
                        }
                    }, t.changePartitionMode = function () {
                        var e = t.partitionData.mode;
                        if (t.partitionData.data_type = 1 == e ? "hash" : "string", "0" != e && (!t.partitionData.granularity || isNaN(Number(t.partitionData.granularity)))) {
                            var a = {
                                tb_id: t.selected.tb_id
                            };
                            i.tb.getPartitionNum(a).then(function (e) {
                                0 == e.status && (t.partitionData.granularity = e.result.partitions)
                            })
                        }
                    }, t.preparePartitionData = function () {
                        t.partitionData.field_list = [], angular.forEach(t.previewData.origin_schema, function (e) {
                            e.hasOwnProperty("flag") && 1 == e.flag || (2 == e.type || 3 == e.type ? t.partitionData.field_list.push({
                                field_id: e.field_id,
                                name: e.name,
                                data_type: 2 == e.type ? "string" : "date"
                            }) : e.field_id == t.partitionData.field_id && t.partitionData.readonly && t.partitionData.field_list.push({
                                field_id: e.field_id,
                                name: e.name,
                                data_type: "number"
                            }))
                        });
                        var e = !1;
                        t.partitionData.match_error = !1, t.partitionData.set ? (t.set_partition_view = "edit", function () {
                            angular.forEach(t.partitionData.field_list, function (a) {
                                a.field_id == t.partitionData.field_id && (e = !0, "hash" != t.partitionData.data_type && a.data_type != t.partitionData.data_type && (t.partitionData.data_type = a.data_type, t.partitionData.granularity = "string" == a.data_type ? "" : "month"))
                            })
                        }(), t.partitionData.match_error = !e) : t.set_partition_view = "preview"
                    }, t.changePartitionField = function (e, a) {
                        for (var i = angular.copy(t.partitionData.field_list), r = 0, n = i.length; r < n; r++)
                            if (i[r].field_id == a) {
                                "date" != i[r].data_type && "string" != i[r].data_type || "hash" == t.partitionData.data_type && "string" == i[r].data_type || (t.partitionData.data_type = "string" == i[r].data_type ? "string" : "date", t.partitionData.granularity = "string" == i[r].data_type ? "" : "month", t.partitionData.mode = "0");
                                break
                            }
                        t.partitionData.match_error = !1
                    }, t.beginSetPartition = function () {
                        if (t.set_partition_view = "edit", t.partitionData.field_list.length > 0) {
                            if (t.partitionData.empty_field = !1, !t.partitionData.field_id) {
                                var e = t.partitionData.field_list[0];
                                t.partitionData.field_id = e.field_id, t.partitionData.data_type = e.data_type, "date" == e.data_type && (t.partitionData.granularity = "month")
                            }
                        } else t.partitionData.empty_field = !0
                    }, t.setPartitionDone = !0, t.saveSetPartition = function () {
                        if (t.setPartitionDone) {
                            if ("hash" == t.partitionData.data_type && !/^[1-9][0-9]*$/.test(t.partitionData.granularity)) return void d(h.instant("wb.requirePartitionNum"));
                            var e = "";
                            "string" != t.partitionData.data_type && (e = t.partitionData.granularity);
                            var r = {
                                tb_id: t.selected.tb_id,
                                base_field: t.partitionData.field_id,
                                param: {
                                    type: t.partitionData.data_type,
                                    option: e
                                }
                            };
                            t.partitionData.loading = !0, r.param = angular.toJson(r.param), t.setPartitionDone = !1, i.tb.partitionSet(r).then(function (e) {
                                t.setPartitionDone = !0, t.partitionData.loading = !1, 0 == Number(e.status) ? (t.partitionData.set = !0, d(t.tips.saveSuccess), s.closeAll()) : 90005 == e.status ? (a.global.hint = "", s.closeAll()) : d(Number(e.status))
                            })
                        }
                    }, t.delSetPartition = function () {
                        var e = {
                            tb_id: t.selected.tb_id
                        };
                        i.tb.partitionDel(e).then(function (e) {
                            0 == e.status ? (t.partitionData.set = !1, d(t.tips.delSuccess), s.closeAll()) : d(90004 == e.status ? t.tips["wb.transform.cantDelPartIncre"] : Number(e.status))
                        })
                    }, t.selectRplaceType = function () {
                        s.open({
                            template: "/static/js/worktable/pageUpload/select_replace_type.html",
                            className: "ngdialog-theme-default ngDialog-width-420",
                            scope: t
                        })
                    }, t.singleReplace = function () {
                        if (t.selected.tb) {
                            var e = {
                                tb_id: t.selected.tb.tb_id,
                                is_whole: !0
                            };
                            i.db.getUpdateRecord(e).then(function (e) {
                                t.updateRecordUpload = e || {}, s.closeAll(), s.open({
                                    template: "/static/js/worktable/pageUpload/single_replace.html",
                                    className: "ngdialog-theme-default ngDialog-width-650",
                                    scope: t
                                })
                            })
                        }
                    }, t.toUploadFile = function (e, a) {
                        switch (e) {
                            case "add":
                                l.path("/page_upload/" + e);
                                break;
                            case "append":
                            case "replace":
                                l.path("/page_upload/" + e + "/" + t.selected.tb.dstb_id);
                                break;
                            case "singleReplace":
                                l.path("/page_upload/" + e + "/" + t.selected.tb.dstb_id + "/" + a.map_id)
                        }
                        s.closeAll()
                    }, t.show_merge_view = function (e) {
                        s.closeAll();
                        var t = a.wsId,
                            i = t ? e + "_ws" : e;
                        g.go(i, {
                            wsId: t
                        })
                    }, t.uploadOption = {}, t.isOpeningAddDb = !1, t.show_add_db = function (e) {
                        if (!t.isOpeningAddDb) {
                            t.isOpeningAddDb = !0, t.uploadOption.method = e, t.uploadOption.default_tb = e ? t.selected.tb.dstb_id : void 0;
                            var i = "";
                            i = a.wsId ? (a.wsId && a.is_extrace, "ngDialog-width-650") : "ngDialog-width-650", e || (!t.uploadOption.method && "s_admin" == a.role && !a.wsId || !a.wsId && 1 === a.is_extrace ? i = "ngDialog-width-780" : a.wsId || 0 !== a.is_extrace ? a.wsId && 0 === a.is_extrace && (i = "ngDialog-width-650") : i = "ngDialog-width-650"), t.workdListView = "folderList", t.dialogTitle = t.tips["wb.addWorkSheetType"], t.uploadDialg = s.open({
                                template: "/static/partials/upload-data.html",
                                className: "ngdialog-theme-default ng-ds-dialog " + i,
                                scope: t
                            }), c(function () {
                                t.isOpeningAddDb = !1
                            }, 500)
                        }
                    }, t.down_menu = {
                        down_menu: !1
                    }, t.batch_append_db = function (e) {
                        t.uploadOption.method = e, t.uploadOption.default_tb = e ? t.selected.tb.dstb_id : void 0, s.open({
                            template: "/static/partials/dialogTemplates/batch_data.html",
                            className: "ngdialog-theme-default ng-ds-dialog ng-ds-add-dialog",
                            scope: t,
                            data: {
                                confirmCallback: A
                            }
                        })
                    }, t.parse_url = function () {
                        n.wsId ? l.path("/parse_url_ws/" + n.wsId + "/" + t.selected.tb.tb_id) : l.path("/parse_url/" + t.selected.tb.tb_id)
                    }, t.merge_field = function () {
                        n.wsId ? l.path("/merge_field_ws/" + n.wsId + "/" + t.selected.tb.tb_id) : l.path("/merge_field/" + t.selected.tb.tb_id)
                    },
                    t.generate_coordinate_check_length = function () {
                        if (0 == a.memberData.vipLevel) return s.openConfirm({
                            templateUrl: "/static/js/personal/upgrade-tip/generate-coordinate.html",
                            className: "ngdialog-theme-default  ngDialog-width-320"
                        }), !1;
                        t.previewData.field_data_total <= 5e5 ? t.generate_coordinate() : s.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-320",
                            data: {
                                title: t.tips.tips,
                                message: t.tips["wb.rowLengthExceed"],
                                okValue: t.tips["wb.gotIt"],
                                hideCancel: !0
                            }
                        })
                    }, t.newFieldFun = {
                        parseCode: function () {
                            s.open({
                                templateUrl: "/static/js/worktable/tableDialog/parse_code.html",
                                className: "ngdialog-theme-default ngDialog-width-400",
                                scope: t,
                                controller: "parseCodeCtrl"
                            })
                        }
                    }, t.generate_coordinate = function () {
                        $.cookie("generate_coordinate_showed") ? t.open_generate_coordinate_dialog() : s.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-320 dialog-coordinate-use-guide",
                            data: {
                                title: t.tips["wb.useGuide"],
                                message: t.tips["wb.useGuideContent"],
                                okValue: t.tips["wb.gotIt"],
                                hideCancel: !0
                            }
                        }).then(function () {
                            $.cookie("generate_coordinate_showed", 1), t.open_generate_coordinate_dialog()
                        })
                    }, t.generate_coordinate_suc_hint = function () {
                        s.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-320",
                            data: {
                                message: t.tips["wb.firstGenerateSuccessHint"],
                                okValue: t.tips["wb.gotIt"],
                                hideCancel: !0
                            }
                        })
                    }, t.open_generate_coordinate_dialog = function () {
                        1 == t.previewData.has_gis ? s.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-320",
                            data: {
                                message: t.tips["wb.coordinateGeneratedHint"]
                            }
                        }) : 3 == t.previewData.has_gis ? s.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-320",
                            data: {
                                message: t.tips["wb.coordinateAlreadyGenerating"]
                            }
                        }) : (t.fieldToGenerate = "", s.openConfirm({
                            templateUrl: "/static/js/worktable/tableDialog/generate_coordinate.html",
                            className: "ngdialog-theme-default ngDialog-width-320 ngdialog-generate-coordinate",
                            scope: t,
                            data: {
                                fieldToGenerate: ""
                            }
                        }))
                    }, t.sendCoordinateTransfer = function (e) {
                        if (!e.fieldToGenerate) return d(t.tips["wb.selectFieldToGenerate"]), !1;
                        var r = {
                            tb_id: t.selected.tb_id,
                            field_id: e.fieldToGenerate
                        };
                        a.wsId && (r.wsId = a.wsId), i.tb.gisTransfer(r).then(function (e) {
                            0 == e.status && ($.cookie("generate_coordinate_showed") ? (s.closeAll(), t.show_preview_data()) : t.generate_coordinate_suc_hint())
                        })
                    }, t.$on("$destroy", function () {
                        $(window).off("resize.alignTable"), t.selected.status.timer && (clearTimeout(t.selected.status.timer), delete t.selected.status.timer)
                    }), t.preview = {
                        send: !0,
                        showErrorReport: !1
                    }, t.errReport = function () {
                        var e = t.selected.tb_id,
                            r = t.preview;
                        r.send && (a.pageLoading = !0, i.tb.getJoinProfileReport(e).then(function (e) {
                            0 == e.status && (t.preview.report = e.result, r.send = !1), t.preview.showErrorReport = !0, a.pageLoading = !1
                        }))
                    }, t.exportExcel = function () {
                        Highcharts.post("/api/wb/profile_export", {
                            tb_id: t.selected.tb_id
                        })
                    }, t.checkNoTable = bdp.bdpTables.checkNoTableInFolder, t.initTableSplit = M, t.$on("initTableSplit", function (e, a) {
                        a && (a.pos && "top" == a.pos ? (M(t.folderList, !0), c(function () {
                            angular.element(".J-table-list > ul")[0].scrollTop = 0, angular.element(".J-list-go-top").css("display", "none")
                        }, 0)) : M(a.folderList, !a.noDefault))
                    }), t.getFolderStructure = function (e, a) {
                        if (t.loadingFolderStructure = !0, e) return t.folderList ? e.folder_list = bdp.bdpTables.getOpenedFolderLists(t.folderList) : t.saveFolderList && (e.folder_list = bdp.bdpTables.getOpenedFolderLists(t.folderList)), e.tb_list = JSON.stringify(e.tb_list), i.folder.getStructureWithParam(e).then(function (e) {
                            if (t.loadingFolderStructure = !1, a) P(e);
                            else {
                                var i = angular.element(".J-search-worktable-input-main").find("input");
                                i && void 0 != i.val() && "" != i.val() || P(e)
                            }
                        })
                    }, t.refreshFolderStatus = function () {
                        function e(t) {
                            t.forEach(function (e) {
                                e.tb_list.forEach(function (e) {
                                    "self" != e.tb_type && "public" != e.tb_type || "ds" != e.type && "public" != e.type && "opends" != e.type || (r = !0)
                                }), e.sub_folders && e.sub_folders.forEach(function (e) {
                                    e.tb_list.forEach(function (e) {
                                        "self" != e.tb_type && "public" != e.tb_type || "ds" != e.type && "public" != e.type && "opends" != e.type || (r = !0)
                                    })
                                })
                            }), angular.forEach(t, function (t) {
                                t.folder_id == i && (t.open = !0), angular.forEach(t.tb_list, function (e) {
                                    "self" != e.tb_type && "public" != e.tb_type || "ds" != e.type && "public" != e.type && "opends" != e.type || (r = !0)
                                }), t.sub_folders && t.sub_folders.length > 0 && e(t.sub_folders)
                            })
                        }
                        var a = bdp.bdpTables.getFolderByTableId(t.folderList, t.selected.tb_id);
                        t.setUnFoldingStatus(a, !0), t.changeFolderOpenStatus(t.folderList);
                        var i = $.cookie("select_folder_id"),
                            r = !1;
                        e(t.folderList), c(O, 100)
                    }, t.setTargetDsTable = function () {
                        if (a.JumpToDsViewTable) {
                            var e = a.JumpToDsViewTable.dsId || a.JumpToDsViewTable.dsId,
                                r = a.JumpToDsViewTable.tbId;
                            t.workdListView = "dsTbList", t.tabView = !0, t.viewTip = t.tips["wb.worktableView"], i.ds.tbList().then(function (i) {
                                if (0 == i.status) {
                                    t.pageInit = !1, a.pageLoading = !1, t.dsTBList = i.result, t.original_dbList = angular.copy(i.result);
                                    var n = !1;
                                    angular.forEach(t.dsTBList, function (a) {
                                        if (a.ds_id == e)
                                            if (a.open = !0, r) {
                                                for (var i = 0, o = a.tb_list.length; i < o; i++)
                                                    if (a.tb_list[i].tb_id == r) {
                                                        t.showDetailPage(a.tb_list[i]), n = !0;
                                                        break
                                                    }
                                            } else a.tb_list.length > 0 && (t.showDetailPage(a.tb_list[0]), n = !0)
                                    }), n || (t.no_datasource = !0, t.previewData && (t.previewData.table_preview_loading = !1), t.previewData && (t.previewData.table_preview_filter_loading = !1))
                                }
                            })
                        }
                        a.JumpToDsViewTable = null
                    }, q(), t.$on("regainFolderList", function (e, a) {
                        if (a) {
                            var i = [];
                            t.selected.tb_id && i.push(t.selected.tb_id), t.getFolderStructure({
                                get_first: 0 == a.get_first ? 0 : 1,
                                get_root: 1,
                                tb_list: i
                            })
                        }
                    }), t.refreshSpecificFolderContent = function (e) {
                        return i.folder.getTableSiblings({
                            tb_id: e
                        }).then(function (e) {
                            t.tableSplitData && (t.tableSplitData = bdp.bdpTables.updateSplitData(t.tableSplitData, e.result.folder_id, e.result.tb_list)), t.folderList.every(function (a) {
                                return a.folder_id == e.result.folder_id ? (a.tb_list = e.result.tb_list, !1) : ("folder_root" != a.folder_id && a.sub_folders.every(function (a) {
                                    return a.folder_id != e.result.folder_id || (a.tb_list = e.result.tb_list, t.getWorktableFromFolder({
                                        folder_id: a.parent_id
                                    }), !1)
                                }), !0)
                            })
                        })
                    }, t.getFirst = function (e) {
                        for (var t = "", a = 0, i = e.length; a < i; a++) {
                            if (e[a].tb_list.length > 0) {
                                t = e[a].tb_list[0];
                                break
                            }
                            if (e[a].sub_folders && e[a].sub_folders.length > 0) {
                                for (var r = 0, n = e[a].sub_folders.length; r < n; r++)
                                    if (e[a].sub_folders[r].tb_list.length > 0) {
                                        t = e[a].sub_folders[r].tb_list[0];
                                        break
                                    }
                                if (t) break
                            }
                        }
                        return t
                    }, t.getWorktableFromFolder = function (e) {
                        return !e.unfolded && e.open !== !1 && e.mark !== !1 && (e.mark && e.sub_folders && e.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), e.loadingWorktables = !0, i.folder.getWorktable({
                            folder_id: e.folder_id
                        }).then(function (a) {
                            e.loadingWorktables = !1, t.folderList.forEach(function (t) {
                                t.folder_id == e.folder_id && 0 == t.tb_list.length && (a.result.forEach(function (e) {
                                    t.tb_list.push(e)
                                }), t.unfolded = !0, t.open = !0), "folder_root" != t.folder_id && t.sub_folders && t.sub_folders.forEach(function (i) {
                                    i.folder_id == e.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, t.open = !0)
                                })
                            })
                        }))
                    }, t.show_field_set = function () {
                        t.fieldSet = {
                            schema: null,
                            editFlag: !1,
                            origin_schema: null,
                            unMatchMap: null
                        }, t.previewData.table_preview_loading = !0, t.previewData.table_preview_filter_loading = !1, B(t.selected.tb_id)
                    }, t.field_set_edit = function () {
                        t.fieldSet.editFlag = !t.fieldSet.editFlag, t.fieldSet.unMatchMap = null
                    }, t.field_set_save = function () {
                        if (t.tbFieldModifying) return !1;
                        var e = R();
                        e.length > 0 ? (t.tbFieldModifying = !0, i.tb.modify(angular.toJson(e)).then(function (a) {
                            t.tbFieldModifying = !1, 0 == a.status ? (angular.forEach(e, function (e) {
                                angular.forEach(t.fieldSet.origin_schema, function (t) {
                                    t.field_id == e.fid && (e.type && (t.type = e.type), null != e.remark && (t.remark = e.remark), e.fid_name && (t.title = e.fid_name))
                                })
                            }), t.fieldSet.schema = angular.copy(t.fieldSet.origin_schema), t.fieldSet.editFlag = !t.fieldSet.editFlag, t.fieldSet.unMatchMap = null) : d(a.errstr)
                        })) : (t.fieldSet.editFlag = !t.fieldSet.editFlag, t.fieldSet.schema = angular.copy(t.fieldSet.origin_schema), t.fieldSet.unMatchMap = null)
                    }, t.field_set_cancel = function () {
                        t.fieldSet.schema = angular.copy(t.fieldSet.origin_schema), t.fieldSet.unMatchMap = null
                    }, p(["tips", "saveSuccess", "delSuccess", "wb.isUpdatingWaiting", "wb.updateFailed", "wb.deleteFailed", "wb.deleteSuccess", "wb.confirmDelete", "wb.isUpdatingThen", "chart.delField", "chart.tip", "field.fieldNameRequired", "field.fieldTypeRequired", "field.fieldFormulaRequired", "field.addFieldSuccess", "field.modifyFieldSuccess", "field.formulaInvalid", "chart.fieldInUsing", "chart.untitledChart", "dash.titleRequired", "wb.loadFailed", "wb.selectWorkSheet", "emptyProjectAndCreate", "emptyDashboardAndCreate", "wb.filterTip", "wb.joinFailed", "wb.joinWarning", "wb.joinKeyField", "wb.joinOr", "wb.joinErrorLog", "wb.joinWarnSure", "wb.joinFailedModify", "wb.addWorkSheetType", "wb.useGuide", "wb.useGuideContent", "wb.firstGenerateSuccessHint", "wb.gotIt", "wb.coordinateAlreadyGenerating", "wb.coordinateGenerateFailed", "wb.selectFieldToGenerate", "wb.coordinateGeneratedHint", "wb.transform.cantDelPartIncre", "wb.rowLengthExceed", "wb.tableCapacity.used", "wb.tableCapacity.capacity", "wb.tableCapacity.clickDetail", "wb.worktableView", "wb.dataExpansion.normal", "wb.dataExpansion.errorReport", "wb.dataExpansion.checkErrorReport", "wb.parentTbError.parentErrorTip", "wb.parentTbError.checkRelationMap"], t)
            }
            window.isIE || getScrollbarWidth();
            angular.module("BC.controllers.dataSource", []).controller("WorktableCtrl", t).directive("resizeDatasourceList", function () {
                return {
                    link: function (t, a, i) {
                        if (localStorage) {
                            var r = localStorage.getItem("ds_tree_width");
                            r && setTimeout(function () {
                                $(".ds-aside").css("width", r + "px"), $(".ds-main").css("left", r + "px")
                            }, 10)
                        }
                        a.on("mousedown", function (t) {
                            var a = $(".ds-aside"),
                                i = $(".ds-main"),
                                r = t.pageX - a.outerWidth();
                            t.preventDefault(), $(document).on("mousemove.drag_data_source", function (e) {
                                var t = e.pageX - r;
                                t = Math.max(100, t), t = Math.min(300, t), a.css("width", t + "px"), i.css("left", t + "px")
                            }), $(document).on("mouseup.drag_data_source", function (t) {
                                e(angular.element("#tb-detail-table")), e(angular.element("#J_edit_field_detail_table"), angular.element("#J_edit_field_header")), $(window).resize(), localStorage && localStorage.setItem("ds_tree_width", a.width()), $(document).off("mousemove.drag_data_source"), $(document).off("mouseup.drag_data_source")
                            })
                        })
                    }
                }
            }), t.$inject = ["$scope", "$rootScope", "commonService", "commonHttp", "$stateParams", "operatorHelpLink", "$location", "ngDialog", "errHint", "$timeout", "$filter", "filterOperatorMap", "$jsTipTranslate", "$state", "$translate", "formulaService"]
        }(), 
        angular.module("BC.controllers.dataSource")
        .controller("pageUploadCtrl", [
            "$scope", "$rootScope", "commonService", "$location", "errHint", "$timeout", 
            "Upload", "ngDialog", "$stateParams", "$jsTipTranslate", "capacityHint", "operatorHelpLink", "$http", function (e, t, a, i, r, n, o, l, s, d, c, u, f) {
                function p() {
                    var t = $(".select-thead-wrap"),
                        a = $(t).scrollTop();
                    e.setFieldType.showType && $(t).on("scroll.previewChangeType", function (i) {
                        Math.abs(a - $(t).scrollTop()) > 8 && (e.setFieldType.showType = !1, e.$digest(), $(t).off("scroll.previewChangeType"))
                    })
                }

                function g(t, a) {
                    var i = null,
                        r = {
                            udt: [],
                            rowOffsets: [],
                            sheetNames: []
                        };
                    if ("sheet" === t)
                        for (var n = e.completeExcelList.length - 1; n >= 0; n--) a.table_info.excelId === e.completeExcelList[n].excelId && (i = e.completeExcelList[n]);
                    else i = a;
                    for (var o = i.sheetList.length - 1; o >= 0; o--) r.udt[o] = i.sheetList[o].theadObj.map(function (e) {
                        var t = angular.copy(e);
                        return delete t.isEmpty, delete t.name, t
                    }), r.rowOffsets[o] = i.sheetList[o].offsetLine, r.sheetNames[o] = i.sheetList[o].sheetName;
                    return r
                }

                function h() {
                    var t = {};
                    switch (e.uploadOption.method) {
                        case "add":
                            e.geHelpAdress = "fileUpload", 
                            e.uploadStepTips = [e.tips["upload.supportFile"], 
                            e.tips["upload.supportBatch"]], 
                            e.ACCEPTFILENUM = 5, 
                            e.uploadOption.pageTitle = e.tips["upload.uploadData"], 
                            t = [{
                                name: "step1UploadFile",
                                text: e.tips["upload.uploadFiles"],
                                active: !0
                            }, {
                                name: "step2PreviewData",
                                text: e.tips["upload.previewData"],
                                active: !1
                            }, {
                                name: "step3WorktableSet",
                                text: e.tips["upload.worktableSet"],
                                active: !1
                            }];
                            break;
                        case "replace":
                            e.geHelpAdress = "fileReplace", 
                            e.uploadStepTips = [e.tips["upload.supportFile"]], 
                            e.ACCEPTFILENUM = 1, 
                            e.uploadOption.pageTitle = e.tips["wb.replaceAll"], 
                            t = [{
                                name: "step1UploadFile",
                                text: e.tips["upload.uploadFiles"],
                                active: !0
                            }, {
                                name: "step2PreviewSingData",
                                text: e.tips["upload.previewData"],
                                active: !1
                            }, {
                                name: "step3adjustThead",
                                text: e.tips["upload.worktableSet"],
                                active: !1
                            }];
                            break;
                        case "append":
                            e.geHelpAdress = "fileAppend", 
                            e.uploadStepTips = [e.tips["upload.supportFile"]], 
                            e.ACCEPTFILENUM = 1, 
                            e.uploadOption.pageTitle = e.tips["wb.appendData"], 
                            t = [{
                                name: "step1UploadFile",
                                text: e.tips["upload.uploadFiles"],
                                active: !0
                            }, {
                                name: "step2PreviewSingData",
                                text: e.tips["upload.previewData"],
                                active: !1
                            }, {
                                name: "step3adjustThead",
                                text: e.tips["upload.worktableSet"],
                                active: !1
                            }];
                            break;
                        case "singleReplace":
                            e.geHelpAdress = "fileReplace", 
                            e.uploadStepTips = [e.tips["upload.supportFile"]], 
                            e.ACCEPTFILENUM = 1, 
                            e.uploadOption.pageTitle = e.tips["wb.singleFileRplace"], 
                            t = [{
                                name: "step1UploadFile",
                                text: e.tips["upload.uploadFiles"],
                                active: !0
                            }, {
                                name: "step2PreviewSingData",
                                text: e.tips["upload.previewData"],
                                active: !1
                            }, {
                                name: "step3adjustThead",
                                text: e.tips["upload.worktableSet"],
                                active: !1
                            }]
                    }
                    return t
                }

                function m(t) {
                    angular.forEach(e.uploadSteps, function (e, a) {
                        e.active = t == a + 1
                    })
                }

                function _() {
                    e.tableExample = {
                        thead: ["序号", "拜访人", "员工编号", "部门", "职位", "拜访日期", "拜访时间", "客户类型", "进展"],
                        tbody: [
                            ["乔歆然", "600001", "销售一部", "销售总监", "2016/8/8", "11:23", "互联网", "初次拜访"],
                            ["丘慧美", "600002", "销售一部", "销售总监", "2016/8/8", "14:43", "电商", "初次拜访"],
                            ["束怜烟", "600003", "销售一部", "销售总监", "2016/8/8", "16:34", "商贸", "初次拜访"]
                        ]
                    }, setTimeout(function () {
                        for (var e = $(".j-table-example").children("tbody").children("tr:first").children("td"), t = $(".j-tips-head").children("li"), a = 0, i = e.length; a < i; a++) t[a].style.width = e[a].offsetWidth + "px"
                    }, 50), e.uploadExcelList = {
                        list: [],
                        files: [],
                        completeLength: 0,
                        needLength: 0,
                        invalidFiles: []
                    }, e.selectAll = !1, e.completeExcelList = [], e.previewTable = {
                        theadObj: [],
                        tbody: [],
                        sheetName: null,
                        offsetLine: null,
                        errMsg: null,
                        table_info: {
                            folder_id: null,
                            folder_name: null,
                            excelId: null,
                            tableName: null,
                            originalName: null,
                            label: null,
                            comment: null
                        },
                        cleanInfo: {
                            col_offset: null,
                            column: null,
                            row: null,
                            row_offset: null
                        }
                    }, n(function () {
                        e.uploadSteps = h()
                    }, 0), e.csv_terminate = {
                        value: "comma",
                        otherValue: ""
                    }
                }

                function b(e) {
                    var t = "",
                        a = [];
                    if (e.length > 2 && "/" === e[0] && "/" === e[e.length - 1]) t = e.substring(1, e.length - 1);
                    else {
                        var i = e.split(",");
                        if (i.length > 1)
                            for (var r = 0; r < i.length; r++) {
                                var n = b(i[r]);
                                n.regexp ? (t += "(" + n.regexp + ")", r < i.length - 1 && (t += "|")) : a = a.concat(n.excludes)
                            } else 0 === e.indexOf("!") ? a.push("^((?!" + b(e.substring(1)).regexp + ").)*$") : (0 === e.indexOf(".") && (e = "*" + e), t = "^" + e.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]", "g"), "\\$&") + "$", t = t.replace(/\\\*/g, ".*").replace(/\\\?/g, "."))
                    }
                    return {
                        regexp: t,
                        excludes: a
                    }
                }

                function v(e, t) {
                    if (!t) return !0;
                    var a = b(t),
                        i = !0;
                    if (a.regexp && a.regexp.length) {
                        var r = new RegExp(a.regexp, "i");
                        i = null != e.type && r.test(e.type) || null != e.name && r.test(e.name)
                    }
                    for (var n = a.excludes.length; n--;) {
                        var o = new RegExp(a.excludes[n], "i");
                        i = i && (null == e.type || o.test(e.type)) && (null == e.name || o.test(e.name))
                    }
                    return i
                }

                function y(a) {
                    if (3 == t.enterprise_type) {
                        for (var i = 0, r = 0; r < a.length; r++) {
                            var n = t.personalInfo,
                                o = n.capacity_info.capacity;
                            if (i += a[r].size, "personal" == t.global.domain && "replace" != e.uploadOption.method && i / 1024 / 1024 + n.capacity_info.used > o) return c(), !1
                        }
                        return e.$$phase || e.$digest(), !0
                    }
                    return !0
                }

                function w(t) {
                    for (var a = 0; a < t.length; a++)
                        if (/\.csv$/.test(t[a].name)) return l.open({
                            template: "/static/js/worktable/pageUpload/csv_set.html",
                            className: "ngdialog-theme-default ngDialog-width-480",
                            showClose: !1,
                            scope: e,
                            data: {
                                files: t
                            }
                        }), !1;
                    return !0
                }

                function D(t) {
                    angular.forEach(t, function (t, a) {
                        e.uploadExcelList.list.push({
                            excelId: null,
                            fileName: t.name,
                            cancel: !1,
                            progress: 0,
                            errMsg: null,
                            abort: null
                        })
                    }), e.uploadExcelList.needLength = e.uploadExcelList.list.length, angular.forEach(t, function (t, a) {
                        t.upload = o.upload({
                            url: "/api/excel/upload",
                            method: "POST",
                            data: {
                                key: t.name,
                                "Content-Type": null === t.type || "" === t.type ? "application/octet-stream" : t.type,
                                filename: t.name,
                                file: t,
                                field_terminate: /\.csv$/.test(t.name) ? e.csv_terminate.value : void 0
                            }
                        }), e.uploadExcelList.list[a].abort = t.upload, t.upload.then(function (i) {
                            n(function () {
                                0 == i.data.status ? (t.result = i.data, e.uploadExcelList.list[a].excelId = i.data.result.excel_id, e.uploadExcelList.list[a].progress = 100, e.uploadExcelList.completeLength += 1, e.uploadExcelList.completeLength == e.uploadExcelList.needLength && F()) : (r(t.name + i.data.errstr), t.result = i.data, e.uploadExcelList.list[a].progress = 100, e.uploadExcelList.completeLength += 1, e.uploadExcelList.completeLength == e.uploadExcelList.needLength && F())
                            })
                        }, function (t) {
                            e.uploadExcelList.needLength -= 1, e.uploadExcelList.completeLength == e.uploadExcelList.needLength && F()
                        }), t.upload.progress(function (i) {
                            t.progress = Math.min(95, parseInt(100 * i.loaded / i.total)), e.uploadExcelList.list[a].progress = t.progress
                        })
                    })
                }

                function F() {
                    if (t.pageLoading = !0, angular.forEach(e.uploadExcelList.list, function (t) {
                            !t.cancel && t.excelId && e.completeExcelList.push({
                                excelId: t.excelId,
                                excelName: t.fileName.slice(0, t.fileName.lastIndexOf(".")),
                                sheetList: []
                            })
                        }), 0 == e.completeExcelList.length && n(function () {
                            return t.pageLoading = !1, _(), !1
                        }, 100), 0 == e.completeExcelList.length) return !1;
                    if (1 == e.completeExcelList.length) {
                        var i = {
                            excel_id: e.completeExcelList[0].excelId
                        };
                        a.db.uploadPreview(i, !0).then(function (a) {
                            if (0 == a.status) {
                                var i = a.result;
                                if (angular.forEach(i, function (t, a) {
                                        e.completeExcelList[0].sheetList.push({
                                            theadObj: t.schema,
                                            tbody: t.data,
                                            sheetName: t.name,
                                            offsetLine: t.row_offset || 0,
                                            errMsg: t.errmsg,
                                            table_info: {
                                                sheetId: a,
                                                folder_id: "folder_root",
                                                folder_name: "en" == $.cookie("locale") ? "Root" : "根目录",
                                                excelId: e.completeExcelList[0].excelId,
                                                tableName: $.trim(e.completeExcelList[0].excelName) + "-" + t.name,
                                                originalName: e.completeExcelList[0].excelName,
                                                label: "",
                                                comment: ""
                                            },
                                            cleanInfo: {
                                                col_offset: t.col_offset,
                                                column: t.column,
                                                row: t.row,
                                                row_offset: t.row_offset
                                            }
                                        })
                                    }), e.completeExcelList[0].sheetList.length > 1) {
                                    for (var n = 0, o = 0; o < e.completeExcelList[0].sheetList.length; o++) e.completeExcelList[0].sheetList[o].errMsg || (0 == n && (e.completeExcelList[0].sheetList[o].check = !0), n += 1);
                                    if (1 == n && (e.selectAll = !0), "add" == e.uploadOption.method) l.open({
                                        template: "/static/js/worktable/pageUpload/select_sheet.html",
                                        className: "ngdialog-theme-default ngDialog-width-520",
                                        scope: e,
                                        showClose: !1
                                    });
                                    else {
                                        for (var o = 0; o < e.completeExcelList[0].sheetList.length; o++) e.completeExcelList[0].sheetList[o].errMsg || (e.completeExcelList[0].sheetList[o].check = !0);
                                        e.confirmCreateExcel("sheet")
                                    }
                                } else if (e.completeExcelList[0].sheetList[0].errMsg) T();
                                else {
                                    var s = e.completeExcelList[0].sheetList[0].table_info.tableName;
                                    e.completeExcelList[0].sheetList[0].table_info.tableName = s.slice(0, s.lastIndexOf("-" + e.completeExcelList[0].sheetList[0].sheetName)), e.confirmCreateExcel("excel")
                                }
                                t.pageLoading = !1
                            } else t.pageLoading = !1, _(), r(a.errstr)
                        })
                    } else {
                        var o = e.completeExcelList.length,
                            s = 0;
                        angular.forEach(e.completeExcelList, function (e, i) {
                            var r = {
                                excel_id: e.excelId
                            };
                            a.db.uploadPreview(r, !1).then(function (a) {
                                if (0 == a.status) {
                                    var i = a.result[0];
                                    e.sheetList.push({
                                        theadObj: i.schema,
                                        tbody: i.data,
                                        sheetName: i.name,
                                        offsetLine: i.row_offset || 0,
                                        errMsg: i.errmsg,
                                        table_info: {
                                            sheetId: 0,
                                            folder_id: "folder_root",
                                            folder_name: "en" == $.cookie("locale") ? "Root" : "根目录",
                                            excelId: e.excelId,
                                            tableName: $.trim(e.excelName),
                                            originalName: e.excelName,
                                            label: "",
                                            comment: ""
                                        },
                                        cleanInfo: {
                                            col_offset: i.col_offset,
                                            column: i.column,
                                            row: i.row,
                                            row_offset: i.row_offset
                                        }
                                    }), s += 1, s == o && (t.pageLoading = !1, T())
                                } else e.sheetList.push({
                                    errMsg: a.errstr,
                                    table_info: {
                                        sheetId: 0,
                                        folder_id: "folder_root",
                                        folder_name: "en" == $.cookie("locale") ? "Root" : "根目录",
                                        excelId: e.excelId,
                                        tableName: e.excelName,
                                        originalName: e.excelName,
                                        label: "",
                                        comment: ""
                                    }
                                }), (s += 1) == o && (t.pageLoading = !1, T())
                            })
                        })
                    }
                }

                function T() {
                    var t = "",
                        a = 0,
                        i = [];
                    if (angular.forEach(e.completeExcelList, function (e, t) {
                            var r = e.sheetList[0];
                            r.errMsg && (i.push(r.table_info.tableName), a += 1)
                        }), a == e.completeExcelList.length) return r(1 == a ? e.completeExcelList[0].sheetList[0].errMsg : e.tips["upload.parseFailedToUploadFailed"]), _(), !1;
                    i.length > 0 ? (t += '"' + i.join('"、"') + '"' + e.tips["upload.parseFailedToContinue"], l.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: t
                        }
                    }).then(function () {
                        e.confirmCreateExcel("excel")
                    }, function () {
                        _()
                    })) : e.confirmCreateExcel("excel")
                }

                function S() {
                    e.taskList = {
                        list: [],
                        completeTaskLength: 0,
                        errMsg: null
                    }, m(2)
                }

                function C() {
                    e.createTableList = {
                        readyLength: 0,
                        completeCreatTbLength: 0
                    }, e.taskList = {
                        list: [],
                        completeTaskLength: 0,
                        errMsg: null
                    }, e.changeTableInfo("sheet", e.completeExcelList[0].sheetList[0]), m(3)
                }

                function L() {
                    for (var t = 0; t < e.completeExcelList.length; t++)
                        for (var a = 0; a < e.completeExcelList[t].sheetList.length; a++)
                            if (!e.completeExcelList[t].sheetList[a].table_info.tableName) return !1;
                    return !0
                }

                function k() {
                    e.createTableList.completeCreatTbLength += 1, 
                    e.createTableList.completeCreatTbLength == e.createTableList.readyLength && (3 == t.enterprise_type && t.$emit("changeCapacity", "change"), $.cookie("ds_tb_id", e.table_info.tb_id), t.pageLoading = !1, i.path("/data_source"))
                }

                function x() {
                    a.db.getSchema(e.uploadOption.default_tb).then(function (a) {
                        if (0 != a.status) return r(a.errstr), !1;
                        angular.forEach(a.result.fields, function (t) {
                            t.flag || e.adjustTheadData.oldThead.push({
                                remark: t.remark,
                                uniqIndex: t.uniq_index,
                                fieldId: t.field_id,
                                name: t.name,
                                title: t.title,
                                type: t.type,
                                seqNo: t.seq_no,
                                hasSelect: !1,
                                add: !1,
                                del: !1
                            })
                        });
                        var i = e.adjustTheadData.oldThead,
                            n = e.adjustTheadData.newThead,
                            o = e.adjustTheadData.uploadThead,
                            l = {},
                            s = i.length;
                        o.length < i.length && (e.adjustTheadData.lessThead = i.length - o.length);
                        for (var d = 0; d < s; d++) n.push({
                            title: null,
                            type: 999,
                            del: !1,
                            diffType: null,
                            index: d
                        });
                        for (var d = 0, c = i.length; d < c; d++) l[i[d].title] = d;
                        for (var u = 0, c = o.length; u < c; u++) "number" == typeof l[o[u].name] && (o[u].hasSelect = !0, n[l[o[u].name]].title = o[u].name, n[l[o[u].name]].type = o[u].type, A(i[l[o[u].name]], n[l[o[u].name]]));
                        e.adjustTheadData.uploadThead.unshift({
                            name: null,
                            type: 999,
                            del: !1
                        }), t.pageLoading = !1, m(3)
                    })
                }

                function I() {
                    var t = {};
                    return angular.forEach(e.adjustTheadData.oldThead, function (a, i) {
                        a.del || (t[a.title] = e.adjustTheadData.newThead[i].title)
                    }), t
                }

                function E() {
                    var t = [];
                    return angular.forEach(e.adjustTheadData.uploadThead, function (e) {
                        !e.hasSelect && e.add && t.push(e.name)
                    }), t
                }

                function N() {
                    var t = [];
                    return angular.forEach(e.adjustTheadData.oldThead, function (e) {
                        e.del && t.push(e.title)
                    }), t
                }

                function j(e, t) {
                    var a = {
                        dateDiff: [],
                        diffArray: []
                    };
                    return angular.forEach(e, function (e, i) {
                        e.type != t[i].type && t[i].title && 999 != t[i].type && (a.diffArray.push(i), 3 == e.type && a.dateDiff.push(e.title))
                    }), a
                }

                function A(e, t) {
                    e.type != t.type && t.title && 999 != t.type ? (t.diffType = "warming", 3 == e.type && (t.diffType = "error")) : t.diffType = null
                }

                function P() {
                    return "replace" == e.uploadOption.method ? {
                        excel_id: e.previewTable.table_info.excelId,
                        tb_id: e.uploadOption.default_tb,
                        sheet_name: e.previewTable.sheetName,
                        tb_title_ex_title_mapping: angular.toJson(I()),
                        add_field_titles: angular.toJson(E()),
                        del_field_titles: angular.toJson(N())
                    } : "singleReplace" == e.uploadOption.method ? {
                        excel_id: e.previewTable.table_info.excelId,
                        tb_id: e.uploadOption.default_tb,
                        sheet_name: e.previewTable.sheetName,
                        tb_title_ex_title_mapping: angular.toJson(I()),
                        add_field_titles: angular.toJson(E()),
                        del_field_titles: angular.toJson(N()),
                        map_id: e.uploadOption.mapId
                    } : {
                        excel_id: e.previewTable.table_info.excelId,
                        tb_id: e.uploadOption.default_tb,
                        sheet_name: e.previewTable.sheetName,
                        tb_title_ex_title_mapping: angular.toJson(I()),
                        add_field_titles: angular.toJson(E()),
                        del_field_titles: angular.toJson(N())
                    }
                }

                function M(i) {
                    var n = P();
                    i && (n.force = 1), t.pageLoading = !0, "replace" == e.uploadOption.method ? a.db.excelReplace(n).then(function (e) {
                        0 == e.status ? K(Y, q, e.result) : (r(e.errstr), t.pageLoading = !1)
                    }) : "singleReplace" == e.uploadOption.method ? a.db.excelHistoryReplace(n).then(function (e) {
                        0 == e.status ? K(Y, q, e.result) : (r(e.errstr), t.pageLoading = !1)
                    }) : a.db.excelAppend(n).then(function (e) {
                        0 == e.status ? K(Y, q, e.result) : (r(e.errstr), t.pageLoading = !1)
                    })
                }

                function q(e) {
                    r(e), t.pageLoading = !1
                }

                function O() {
                    function i(a) {
                        return e.table_label_list = [], angular.forEach(a, function (a) {
                            "folder_root" == a.folder_id && (a.name = "en" == t.language ? "Root" : "根目录"), angular.forEach(a.tb_list, function (t, a) {
                                t.label && e.table_label_list.indexOf(t.label) < 0 && e.table_label_list.push(t.label)
                            }), a.sub_folders && a.sub_folders.length > 0 && angular.forEach(a.sub_folders, function (t) {
                                angular.forEach(t.tb_list, function (t) {
                                    t.label && e.table_label_list.indexOf(t.label) < 0 && e.table_label_list.push(t.label)
                                })
                            })
                        }), e.folderList = angular.copy(a), R(), a
                    }
                    return e.query = "", a.folder.getList().then(function (e) {
                        if (e) return i(e);
                        t.pageLoading = !1, r("error")
                    })
                }

                function R() {
                    var t = $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root";
                    if ("folder_root" === t) var a = "en" == $.cookie("locale") ? "Root" : "根目录";
                    else {
                        var a = bdp.bdpTables.getFolderByFolderId(e.folderList, t);
                        a = a.name ? a.name : ""
                    }
                    B(t, a)
                }

                function B(t, a) {
                    angular.forEach(e.completeExcelList, function (e) {
                        angular.forEach(e.sheetList, function (e) {
                            e.table_info.folder_id = t, e.table_info.folder_name = a
                        })
                    })
                }
                var V, H = uploadParam.excelMaxSize * (1 << 20),
                    W = uploadParam.csvMaxSize * (1 << 20);
                t.show_bdp_header = !1, e.uploadOption = {
                    method: s.operate,
                    default_tb: s.tbId ? s.tbId : null,
                    mapId: s.mapId ? s.mapId : null,
                    pageTitle: ""
                }, e.uploadSteps = [], e.geHelpAdress = "", e.uploadStepTips = [], e.table_info = {
                    folder_id: "",
                    folder_name: "",
                    excelId: "",
                    tableName: "",
                    label: "",
                    comment: ""
                }, e.taskList = {
                    list: [],
                    completeTaskLength: 0,
                    errMsg: null
                }, e.adjustTheadData = {
                    oldThead: [],
                    newThead: [],
                    uploadThead: []
                }, 
                e.fieldTypeMap = {
                    0: "number",
                    1: "number",
                    3: "date",
                    2: "string",
                    999: "string"
                }, 
                e.acceptTypes = "text/csv,*.xls,*.xlsx,.csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 
                e.MAX_RERTRY = 5, 
                e.CUR_RETRY = 0, 
                e.ACCEPTFILENUM = 1, 
                _(), 
                e.setFieldType = {
                    showType: !1,
                    index: void 0,
                    selectType: function (t) {
                        e.previewTable.theadObj[e.setFieldType.index].type = t, e.setFieldType.showType = !1
                    },
                    setByDrogDown: function (t, a) {
                        var i = $(t.target),
                            r = i.hasClass("J-set-field") ? i : i.parent(".J-set-field"),
                            o = $(".J-type-dropdown"),
                            l = e.setFieldType.showType;
                        a === e.setFieldType.index ? n(function () {
                            l || o.css({
                                top: r.offset().top + r.outerHeight(),
                                left: r.offset().left
                            }), e.setFieldType.showType = !l, p(), e.$digest()
                        }, 0, !1) : (e.setFieldType.index = a, n(function () {
                            e.setFieldType.showType = !0, o.css({
                                top: r.offset().top + r.outerHeight(),
                                left: r.offset().left
                            }), p(), e.$digest()
                        }, 0, !1))
                    },
                    previewTableNow: function () {
                        var i = g("sheet", e.previewTable),
                            r = {
                                excel_id: e.previewTable.table_info.excelId,
                                udt: angular.toJson(i.udt),
                                row_offsets: angular.toJson(i.rowOffsets),
                                sheet_names: angular.toJson(i.sheetNames)
                            };
                        t.pageLoading = !0, a.db.uploadPreview(r).then(function (a) {
                            0 == a.status && (e.previewTable.tbody = a.result[e.previewTable.table_info.sheetId].data), t.pageLoading = !1
                        })
                    }
                }, e.goHelp = function (e) {
                    u(e)
                }, e.backWorkTable = function () {
                    e.uploadExcelList.list.length > 0 ? l.openConfirm({
                        template: "/static/partials/dialogTemplates/confirm-dialog.html",
                        className: "ngdialog-theme-default ngDialog-width-300",
                        scope: e,
                        data: {
                            message: e.tips["upload.backWorkTableTips"]
                        }
                    }).then(function () {
                        t.back()
                    }) : t.back()
                }, $(window).on("beforeunload.uploadTip", function () {
                    if (e.uploadExcelList.list.length > 0) return e.tips["upload.refreshTips"]
                }), e.$on("$destroy", function () {
                    $(window).off("beforeunload.uploadTip")
                }), e.backLastStep = function (t) {
                    if (0 === t && l.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-300",
                            scope: e,
                            data: {
                                message: e.tips["upload.backStep1Tips"]
                            }
                        }).then(function () {
                            return _(), !1
                        }), 1 === t) return S(), !1
                }, e.uploadFiles = function (t) {
                    if (!t) return !1;
                    "[object Array]" !== Object.prototype.toString.call(t) && (t = [t]);
                    for (var a = [], i = [], n = [], o = [], l = "", s = t.length - 1; s >= 0; s--) t[s] && 0 == t[s].size && (i.push(t[s].name), t.splice(s, 1)), t[s] && !v(t[s], e.acceptTypes) && (a.push(t[s].name), t.splice(s, 1)), t[s] && /\.csv$/.test(t[s].name) ? (V = uploadParam.csvMaxSize, t[s].size > W && (o.push(t[s].name), t.splice(s, 1))) : (V = uploadParam.excelMaxSize, t[s] && t[s].size > H && (n.push(t[s].name), t.splice(s, 1)));
                    if (a.length + i.length + n.length + o.length > 1) {
                        if (0 == t.length) return r(e.tips["upload.allUnPassMuster"]), !1;
                        l = e.tips["upload.anyUnPassMuster1"] + '"' + a.reverse().concat(i.reverse(), n.reverse(), o.reverse()).join('"、"') + '"' + e.tips["upload.anyUnPassMuster2"]
                    } else 1 == a.length && (l = e.tips["upload.unPassMuster"]), 1 == i.length && (l = e.tips["upload.emptyUnPassMuster"]), 1 == n.length && (l = e.tips["upload.excelFileSizeError"] + uploadParam.excelMaxSize + "M"), 1 == o.length && (l = e.tips["upload.csvFileSizeError"] + uploadParam.csvMaxSize + "M");
                    if (l && r(l), e.uploadExcelList.files = t, null != t) {
                        if (!y(t)) return !1;
                        w(t) && D(t)
                    }
                    e.$$phase || e.$digest()
                }, e.initUploadData = function () {
                    _()
                }, e.setCsvDelimiter = function () {
                    var t = e.csv_terminate.value;
                    return "other" == t && (t = e.csv_terminate.otherValue, t.length > 1) ? (r(e.tips["upload.onlyOneDelimiter"]), !1) : t ? (e.csv_terminate.value = t, e.csv_terminate.hasSet = !0, D(e.uploadExcelList.files), void l.closeAll()) : (r(e.tips["upload.csvDesc"]), !1)
                }, e.cancelUpload = function (e) {
                    e.cancel = !0, e.excelId || e.abort.abort()
                }, e.checkAll = function (t) {
                    var a = t.currentTarget.checked;
                    e.selectAll = a, angular.forEach(e.completeExcelList[0].sheetList, function (e) {
                        e.errMsg || (e.check = a)
                    })
                }, e.checkSheet = function (t, a, i) {
                    if (t.check) {
                        for (var r = 0, n = i.length; r < n; r++) {
                            var o = i[r];
                            if (!o.check && !o.errMsg) return e.selectAll = !1, !1
                        }
                        return e.selectAll = !0
                    }
                    e.selectAll = !1
                }, e.confirmCreateExcel = function (t) {
                    if ("sheet" == t) {
                        for (var a = e.completeExcelList[0].sheetList, i = 0, n = a.length - 1; n >= 0; n--) a[n].check && (i += 1);
                        if (0 == i) return r(e.tips["upload.noSelectWorktable"]), !1;
                        for (var n = a.length - 1; n >= 0; n--) a[n].check || a.splice(n, 1);
                        1 == a.length && (a[0].table_info.tableName = a[0].table_info.tableName.slice(0, a[0].table_info.tableName.lastIndexOf("-" + a[0].sheetName))), e.changePreviewTable("sheet", e.completeExcelList[0].sheetList[0])
                    }
                    if ("excel" == t) {
                        for (var o = e.completeExcelList, n = o.length - 1; n >= 0; n--) o[n].sheetList[0].errMsg && o.splice(n, 1);
                        e.changePreviewTable("sheet", e.completeExcelList[0].sheetList[0])
                    }
                    l.closeAll(), m(2)
                }, e.changePreviewTable = function (t, a) {
                    if ("excel" == t) {
                        var i = a.sheetList[0];
                        e.previewTable = i
                    } else {
                        var r = a;
                        e.previewTable = r
                    }
                }, e.changeTableInfo = function (t, a) {
                    if ("excel" == t) {
                        var i = a.sheetList[0];
                        e.table_info = i.table_info
                    } else {
                        var r = a;
                        e.table_info = r.table_info
                    }
                }, e.parseTable = function (i) {
                    t.pageLoading = !0, O().then(function () {
                        if (e.taskList = {
                                list: [],
                                completeTaskLength: 0,
                                errMsg: null
                            }, "sheet" == i) {
                            var n = [],
                                o = [];
                            angular.forEach(e.completeExcelList[0].sheetList, function (e) {
                                n.push(e.sheetName), o.push(e.offsetLine)
                            });
                            var l = {
                                excel_id: e.completeExcelList[0].excelId,
                                sheet_names: angular.toJson(n),
                                row_offsets: angular.toJson(o),
                                udt: angular.toJson(g("excel", e.completeExcelList[0]).udt)
                            };
                            a.db.uploadParser(l).then(function (a) {
                                0 == a.status ? (e.taskList.list.push(a.result), K(U, q, a.result)) : (r(a.errstr), t.pageLoading = !1)
                            })
                        } else angular.forEach(e.completeExcelList, function (i) {
                            var n = {
                                excel_id: i.excelId,
                                sheet_names: angular.toJson([i.sheetList[0].sheetName]),
                                row_offsets: angular.toJson([i.sheetList[0].offsetLine]),
                                udt: angular.toJson(g("excel", i).udt)
                            };
                            t.pageLoading = !0, a.db.uploadParser(n).then(function (a) {
                                0 == a.status ? (e.taskList.list.push(a.result), K(U, q, a.result)) : (r(a.errstr), t.pageLoading = !1)
                            })
                        })
                    })
                };
                var U = function (a) {
                    var i = [];
                    angular.forEach(a.info, function (e) {
                        i.push({
                            fileName: a.name,
                            sheetName: e.name,
                            errMsg: e.errmsg ? e.errmsg : ""
                        })
                    });
                    var n = (a.excel_id, []);
                    if (angular.forEach(i, function (e) {
                            n.push(e.name)
                        }), e.taskList.errMsg) return !1;
                    if (e.taskList.list.length > 1 && i[0].errMsg) return e.taskList.errMsg = '"' + i[0].fileName.slice(0, i[0].fileName.lastIndexOf(".")) + '"' + i[0].errMsg, r(e.taskList.errMsg), t.pageLoading = !1, !1;
                    if (1 == e.taskList.list.length) {
                        angular.forEach(e.completeExcelList[0].sheetList, function (e) {
                            angular.forEach(i, function (t) {
                                e.sheetName == t.sheetName && (t.check = !0)
                            })
                        });
                        for (var o = i.length - 1; o >= 0; o--)
                            if (i[o].errMsg && i[o].check) return e.taskList.errMsg = '"' + i[o].fileName.slice(0, i[o].fileName.lastIndexOf(".")) + (1 == e.completeExcelList[0].sheetList.length ? "" : "-" + i[o].sheetName) + '"' + i[o].errMsg, r(e.taskList.errMsg), t.pageLoading = !1, !1
                    }
                    e.taskList.completeTaskLength += 1, e.taskList.completeTaskLength == e.taskList.list.length && (t.pageLoading = !1, e.checkTableNameRepeat(), C())
                };
                e.hasRepeatName = {
                    hasRepeat: !1,
                    repeatName: [],
                    nameList: []
                }, e.checkTableNameRepeat = function (t) {
                    if (e.hasRepeatName.repeatName = [], e.hasRepeatName.nameList = [], e.completeExcelList.length > 1) {
                        for (var i = 0; i < e.completeExcelList.length; i++) e.hasRepeatName.nameList.push(e.completeExcelList[i].sheetList[0].table_info.tableName);
                        var r = {
                            titles: angular.toJson(e.hasRepeatName.nameList)
                        };
                        a.db.excelRepeatCheck(r).then(function (a) {
                            if (0 == a.status) {
                                if (a.result.length > 0) {
                                    e.hasRepeatName.hasRepeat = !0, e.hasRepeatName.repeatName = a.result;
                                    for (var i = 0; i < e.completeExcelList.length; i++) {
                                        e.completeExcelList[i].sheetList[0].table_info.repeatName = !1;
                                        for (var r = 0; r < e.hasRepeatName.repeatName.length; r++) e.completeExcelList[i].sheetList[0].table_info.tableName == e.hasRepeatName.repeatName[r] && (e.completeExcelList[i].sheetList[0].table_info.repeatName = !0)
                                    }
                                } else {
                                    for (var i = 0; i < e.completeExcelList.length; i++) e.completeExcelList[i].sheetList[0].table_info.repeatName = !1;
                                    e.hasRepeatName.hasRepeat = !1
                                }
                                t && t()
                            }
                        })
                    }
                    if (1 == e.completeExcelList.length) {
                        for (var i = 0; i < e.completeExcelList[0].sheetList.length; i++) e.hasRepeatName.nameList.push(e.completeExcelList[0].sheetList[i].table_info.tableName);
                        var r = {
                            titles: angular.toJson(e.hasRepeatName.nameList)
                        };
                        a.db.excelRepeatCheck(r).then(function (a) {
                            if (0 == a.status) {
                                if (a.result.length > 0) {
                                    e.hasRepeatName.hasRepeat = !0, e.hasRepeatName.repeatName = a.result;
                                    for (var i = 0; i < e.completeExcelList[0].sheetList.length; i++) {
                                        e.completeExcelList[0].sheetList[i].table_info.repeatName = !1;
                                        for (var r = 0; r < e.hasRepeatName.repeatName.length; r++) e.completeExcelList[0].sheetList[i].table_info.tableName == e.hasRepeatName.repeatName[r] && (e.completeExcelList[0].sheetList[i].table_info.repeatName = !0)
                                    }
                                } else {
                                    for (var i = 0; i < e.completeExcelList[0].sheetList.length; i++) e.completeExcelList[0].sheetList[i].table_info.repeatName = !1;
                                    e.hasRepeatName.hasRepeat = !1
                                }
                                t && t()
                            }
                        })
                    }
                }, e.completeCreatTb = function () {
                    e.checkTableNameRepeat(function () {
                        if (e.hasRepeatName.hasRepeat) return r(e.tips["upload.hasRepeatName1"] + '"' + e.hasRepeatName.repeatName.join('"、"') + '"' + e.tips["upload.hasRepeatName2"]), !1;
                        t.pageLoading = !0, L() ? J(z) : (t.pageLoading = !1, r(e.tips["upload.worktableNameCantNotEmpty"]))
                    })
                };
                var J = function (i) {
                        e.completeExcelList.length > 1 && (e.createTableList.readyLength = e.completeExcelList.length, angular.forEach(e.completeExcelList, function (n) {
                            a.db.excelCreate({
                                excel_id: n.excelId,
                                sheet_names: angular.toJson([n.sheetList[0].sheetName]),
                                tb_name: n.sheetList[0].table_info.tableName,
                                folder_id: n.sheetList[0].table_info.folder_id
                            }).then(function (a) {
                                0 == a.status ? a.result[0].errmsg ? (r(a.result[0].errmsg), t.pageLoading = !1) : i(a.result, n.sheetList[0]) : (e.errMsg = a.errstr, r(a.errstr), t.pageLoading = !1)
                            })
                        })), 1 == e.completeExcelList.length && (e.createTableList.readyLength = e.completeExcelList[0].sheetList.length, angular.forEach(e.completeExcelList[0].sheetList, function (n) {
                            a.db.excelCreate({
                                excel_id: e.completeExcelList[0].excelId,
                                sheet_names: angular.toJson([n.sheetName]),
                                tb_name: n.table_info.tableName,
                                folder_id: n.table_info.folder_id
                            }).then(function (a) {
                                0 == a.status ? a.result[0].errmsg ? (r(a.result[0].errmsg), t.pageLoading = !1) : i(a.result, n) : (e.errMsg = a.errstr, r(a.errstr), t.pageLoading = !1)
                            })
                        }))
                    },
                    z = function (e, t) {
                        var a = [],
                            i = !1;
                        angular.forEach(e, function (e) {
                            0 == e.status && (i = !0, a.push(e.task_id))
                        }), i && (task_id = a.join(","), K(G, q, a, t))
                    },
                    G = function (t, a) {
                        var i = !0;
                        t.tb_id ? 1 == t.status && (i = !1) : angular.forEach(t, function (t) {
                            1 == t.status ? (i = !1, e.createErrMsg.push(t)) : e.errSheetList.push(t)
                        }), i || e.preview_current_tb(t, a)
                    };
                e.preview_current_tb = function (e, t) {
                    var i = [];
                    t.table_info.tb_id = e.tb_id, i.push({
                        name: t.table_info.tableName,
                        tb_id: e.tb_id,
                        label: t.table_info.label || "",
                        comment: t.table_info.comment || ""
                    }), t.table_info.label || t.table_info.comment || t.table_info.originalName != t.table_info.tableName ? a.tb.modify(angular.toJson(i)).then(function (e) {
                        0 == Number(e.status) && k()
                    }) : k()
                }, e.parseSingleTable = function () {
                    e.adjustTheadData = {
                        oldThead: [],
                        newThead: [],
                        uploadThead: [],
                        lessThead: null
                    }, e.taskList = {
                        list: [],
                        completeTaskLength: 0,
                        errMsg: null
                    }, e.previewAdjustTable = {
                        thead: [],
                        tbody: []
                    };
                    for (var i = e.completeExcelList.length - 1; i >= 0; i--) e.previewTable.table_info.excelId === e.completeExcelList[i].excelId && e.completeExcelList[i];
                    var n = {
                        excel_id: e.previewTable.table_info.excelId,
                        sheet_names: angular.toJson([e.previewTable.sheetName]),
                        row_offsets: angular.toJson([e.previewTable.offsetLine]),
                        udt: angular.toJson(g("sheet", e.previewTable).udt)
                    };
                    t.pageLoading = !0, a.db.uploadParser(n).then(function (a) {
                        0 == a.status ? (e.taskList.list.push(a.result), K(Q, q, a.result)) : (r(a.errstr), t.pageLoading = !1)
                    })
                };
                var Q = function (a) {
                    var i = [];
                    if (angular.forEach(a.info, function (t, a) {
                            a === e.previewTable.table_info.sheetId && (angular.forEach(t.schema, function (t) {
                                e.adjustTheadData.uploadThead.push({
                                    isEmpty: t.isEmpty,
                                    name: t.name,
                                    type: t.type
                                })
                            }), i.push({
                                check: !1,
                                name: t.name,
                                errMsg: t.errmsg ? t.errmsg : ""
                            }))
                        }), e.taskList.errMsg) return !1;
                    if (1 == e.taskList.list.length) {
                        if (i[0].errMsg) return e.taskList.errMsg = '"' + i[0].name + '"' + i[0].errMsg, r(e.taskList.errMsg), t.pageLoading = !1, !1;
                        x()
                    }
                };
                e.slectThead = function (e) {
                    var t = $(e.target);
                    if (t.parents(".J-upload-list").length) return !1;
                    t.hasClass("J-get-position") || (t = t.parents(".J-get-position"));
                    var a = t.find(".J-upload-list");
                    a.css("visibility", "hidden"), n(function () {
                        t.offset().top + t.height() + 4 + a.height() > $(window).height() ? a.css({
                            top: t.offset().top + t.height() + 4,
                            left: t.offset().left + 16,
                            height: $(window).height() - (t.offset().top + t.height() + 4) - 25,
                            width: t.width() - 16
                        }) : a.css({
                            top: t.offset().top + t.height() + 4,
                            left: t.offset().left + 16,
                            height: "auto",
                            width: t.width() - 16
                        }), a.css("visibility", "visible")
                    }, 10)
                }, e.selectNewField = function (t, a, i) {
                    if (a.title == t.name) return !1;
                    for (var r = e.adjustTheadData.newThead, n = 0; n < r.length; n++)
                        if (t.name == r[n].title && t.name) {
                            r[n].title = null, r[n].type = 999, r[n].del = !1, r[n].diffType = null;
                            break
                        }
                    angular.forEach(e.adjustTheadData.uploadThead, function (e) {
                        a.title == e.name && (e.hasSelect = !1)
                    }), a.title = t.name, a.type = t.type, t.hasSelect = !0, A(e.adjustTheadData.oldThead[a.index], a)
                }, e.delOldField = function (i, r) {
                    var n = {
                        tb_id: e.uploadOption.default_tb,
                        del_field_titles: [i.title]
                    };
                    t.pageLoading = !0, n.del_field_titles = angular.toJson(n.del_field_titles), a.db.checkFieldDependency(n).then(function (a) {
                        if (0 == a.status)
                            if (1 == a.result.can_del) t.pageLoading = !1, l.openConfirm({
                                template: "/static/partials/dialogTemplates/confirm-dialog.html",
                                className: "ngdialog-theme-default ngDialog-width-330",
                                scope: e,
                                data: {
                                    message: e.tips["wb.confirmDeleteField"]
                                }
                            }).then(function () {
                                for (var t = e.adjustTheadData.uploadThead, a = 0; a < t.length; a++)
                                    if (t[a].name == e.adjustTheadData.newThead[r].title) {
                                        t[a].hasSelect = !1;
                                        break
                                    }
                                i.del = !0, e.adjustTheadData.newThead[r] = {
                                    title: null,
                                    type: 999,
                                    del: !0
                                }
                            });
                            else {
                                e.responseHint = {
                                    dependency: a.result.dependency
                                };
                                var n = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                angular.forEach(e.responseHint.dependency, function (e) {
                                    angular.forEach(e.chart, function (e) {
                                        e.ct_name || (e.ct_name = n)
                                    })
                                }), l.open({
                                    template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                    className: "ngdialog-theme-default",
                                    scope: e
                                }), t.pageLoading = !1
                            }
                    })
                }, e.confirmAddFiled = function () {
                    var t = j(e.adjustTheadData.oldThead, e.adjustTheadData.newThead);
                    if (t.dateDiff.length > 0) return r('"' + t.dateDiff.join("、") + '" ' + ("append" == e.uploadOption.method ? e.tips["upload.plzUploadAgainAppend"] : e.tips["upload.plzUploadAgainReplace"])), !1;
                    for (var a = !1, i = 0; i < e.adjustTheadData.uploadThead.length; i++) e.adjustTheadData.uploadThead[i].hasSelect || e.adjustTheadData.uploadThead[i].check || !e.adjustTheadData.uploadThead[i].name || (a = !0);
                    a ? l.open({
                        template: "/static/js/worktable/pageUpload/choose_add_fields.html",
                        className: "ngdialog-theme-default ngDialog-width-400",
                        scope: e,
                        data: {
                            addFileds: e.adjustTheadData.uploadThead
                        }
                    }) : e.postAdjustInfo()
                }, e.postAdjustInfo = function () {
                    if (N().length == e.adjustTheadData.oldThead.length && 0 == E().length) return r(e.tips["upload.fiedsCanNotEmpty"]), !1;
                    M(1)
                };
                var Y = function (a) {
                        $.cookie("ds_tb_id", e.previewTable.table_info.tb_id), t.pageLoading = !1, t.back()
                    },
                    K = function (t, i, r, o) {
                        var l = "";
                        a.getTaskStatus(r).then(function (a) {
                            if (a.result.info && (e.offsetList = a.result.info), 0 == a.status) {
                                var s = a.result;
                                if (void 0 !== s.status)
                                    if (0 == s.status || 3 == s.status) n(function () {
                                        K(t, q, r, o)
                                    }, 1e3);
                                    else if (2 == s.status) l = s.error_msg || s.errstr, i(l);
                                else {
                                    if (!t) return;
                                    t(s, o)
                                } else {
                                    var d = 0,
                                        c = !1;
                                    if (angular.forEach(s, function (e, t) {
                                            0 != e.status && 3 != e.status || (d += 1), 2 == e.status && (c++, l = e.error_msg || e.errstr)
                                        }), 0 == s.length && (c = !0), d > 0) n(function () {
                                        K(t, q, r, o)
                                    }, 1e3);
                                    else if (c) i(l);
                                    else {
                                        if (!t) return;
                                        t(s, o)
                                    }
                                }
                            } else l = e.tips["wb.analysisFailed"], i(l)
                        })
                    };
                e.changeAllFolder = function () {
                    B(e.table_info.folder_id, e.table_info.folder_name);
                    var t = l.open({
                            template: "/static/partials/dialogTemplates/alert_success.html",
                            scope: e,
                            className: "ngdialog-theme-default ngDialog-width-300",
                            data: {
                                message: e.tips["upload.applyAllSuccessTips"]
                            },
                            preCloseCallback: function () {
                                n.cancel(a)
                            }
                        }),
                        a = n(function () {
                            l.close(t)
                        }, 3e3)
                }, e.showSelectFolder = function () {
                    e.folderList ? (e.openSelectFolderDialog(), t.pageLoading && (t.pageLoading = !1)) : (t.pageLoading = !0, n(function () {
                        e.showSelectFolder()
                    }, 1e3))
                }, e.openSelectFolderDialog = function () {
                    e.selectFolderDialog = l.open({
                        templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                        scope: e,
                        className: "ngdialog-theme-default ngdialog-choose-table-folder",
                        data: {
                            tbType: "upload",
                            optType: "baseChoose",
                            folderList: e.folderList || [],
                            folderQueryList: [],
                            targetFolderId: e.table_info.folder_id || "folder_root",
                            targetFolderType: "",
                            queryText: "",
                            open: {},
                            confirmSave: e.saveSelectFolder,
                            loadingDirectory: !0
                        },
                        controller: "chooseTbFolderCtrl"
                    })
                }, e.saveSelectFolder = function (t) {
                    e.table_info.folder_id = t.targetFolderId;
                    var a = bdp.bdpTables.getFolderByFolderId(e.folderList, e.table_info.folder_id);
                    e.table_info.folder_name = a ? a.name : "", e.selectFolderDialog.close()
                }, e.tableLabelLimit = function (t, a) {
                    if (8 != t.keyCode) return a && a.length >= 20 ? (r(e.tips["wb.tableLabelLimit"]), !1) : void 0
                }, e.tableCommentLimit = function (t, a) {
                    if (8 != t.keyCode) return a && a.length >= 100 ? (r(e.tips["wb.tableCommentLimit"]), !1) : void 0
                }, e.hitLabelList = {
                    show: !1,
                    list: []
                }, e.hitExistTableLabel = function (t) {
                    e.hitLabelList.list = [], e.hitLabelList.show = !0, t ? angular.forEach(e.table_label_list, function (a) {
                        a.toLowerCase().indexOf(t.toLowerCase()) >= 0 && e.hitLabelList.list.push(a)
                    }) : e.hitLabelList.list = angular.copy(e.table_label_list)
                }, 
                d(["upload.csvFileSizeError", 
                "upload.excelFileSizeError", 
                "upload.onlyOneDelimiter", 
                "upload.csvDesc", 
                "upload.parseFailed", 
                "upload.parseFailedToContinue", 
                "upload.worktableNameCantNotEmpty", 
                "wb.confirmDeleteField", 
                "upload.plzUploadAgainReplace", 
                "upload.plzUploadAgainAppend", 
                "upload.plzCheckExcel", 
                "wb.analysisFailed", 
                "wb.tableCommentLimit", 
                "wb.tableLabelLimit", 
                "wb.canNotDelete", 
                "upload.uploadData", 
                "upload.uploadFiles", 
                "upload.previewData", 
                "upload.worktableSet", 
                "upload.backStep1Tips", 
                "upload.backWorkTableTips", 
                "upload.refreshTips", 
                "upload.supportFile", 
                "upload.supportBatch", 
                "wb.replaceData", 
                "wb.replaceData", 
                "wb.singleFileRplace", 
                "wb.appendData", 
                "wb.replaceAll", 
                "upload.noSelectWorktable", 
                "upload.unPassMuster", 
                "upload.fiedsCanNotEmpty", 
                "upload.parseFailedToUploadFailed", 
                "upload.emptyUnPassMuster", 
                "upload.anyUnPassMuster1", 
                "upload.anyUnPassMuster2", 
                "upload.allUnPassMuster", 
                "upload.applyAllSuccessTips", 
                "upload.hasRepeatName1", 
                "upload.hasRepeatName2"], e)
            }])
            .directive("uploadDropDown", ["$timeout", function (e) {
                return {
                    restrict: "A",
                    scope: {
                        dropDownFlag: "="
                    },
                    link: function (t) {
                        t.$watch("dropDownFlag", function (a, i) {
                            var r = ".adjust-thead-wrap";
                            if (a !== i && 1 == a) {
                                var n = angular.element(r).scrollTop();
                                e(function () {
                                    angular.element(r).on("scroll.uploadfolder", function (a) {
                                        Math.abs(n - $(a.target).scrollTop()) > 8 && (t.dropDownFlag = !1, e(function () {
                                            t.$digest()
                                        }, 0))
                                    })
                                }, 0)
                            } else a !== i && 0 == a && angular.element(r).off("scroll.uploadfolder")
                        })
                    }
                }
            }]),
            function () {
                function e(e, t, a, i, r, n, o, l, s, d, c, u) {
                    function f() {
                        return i.ds.tbList().then(function (e) {
                            0 == e.status && (t.dsTBList = e.result, t.original_dbList = angular.copy(e.result), p())
                        })
                    }

                    function p() {
                        function e() {
                            angular.forEach(t.dsTBList, function (e) {
                                angular.forEach(e.tb_list, function (a) {
                                    a.tb_id == t.selected.tb_id && (e.open = !0)
                                })
                            })
                        }
                        t.dsTBList ? e() : t.$watch("dsTBList", function (t) {
                            t && e()
                        })
                    }

                    function g(r) {
                        i.getTaskStatus(r).then(function (i) {
                            if (0 == Number(i.status)) {
                                var o = i.result;
                                0 == Number(o.status) || 3 == Number(o.status) ? n(function () {
                                    g(r)
                                }, 1e3) : 2 == Number(o.status) ? (a(t.tips["wb.copyFail"]), e.pageLoading = !1) : (a(t.tips["wb.copySuccess"]), e.pageLoading = !1, l.closeAll())
                            }
                        })
                    }

                    function h(e, a, i, r) {
                        function n(t) {
                            for (var i = 0, r = t.length; i < r; i++)
                                if (t[i].folder_id != a && t[i].name == e) {
                                    l = !1;
                                    break
                                }
                        }
                        var o = t.original_folderList,
                            l = !0;
                        if (1 == i) n(o);
                        else {
                            for (var s = [], d = 0, c = o.length; d < c; d++)
                                if (o[d].folder_id == r) {
                                    s = o[d].sub_folders;
                                    break
                                }
                            n(s)
                        }
                        return l
                    }

                    function m(e, a) {
                        function i(t) {
                            for (var i = 0, r = t.length; i < r; i++)
                                if (t[i].tb_id != a && t[i].name == e) return !0;
                            return !1
                        }

                        function r(e) {
                            for (var t = 0, a = e.length; t < a; t++) {
                                if (e[t].tb_list && e[t].tb_list.length > 0 && i(e[t].tb_list)) {
                                    o = !0;
                                    break
                                }!o && e[t].sub_folders && e[t].sub_folders.length > 0 && r(e[t].sub_folders)
                            }
                        }
                        var n = t.original_folderList,
                            o = !1;
                        return r(n), o
                    }

                    function _(r, o, s, d, c) {
                        o = "folder_root" == o ? "folder_root" : o;
                        var u = s || 0,
                            f = d || 0,
                            p = {
                                tb_id: r,
                                to_folder: o,
                                to_seq: u,
                                tb_index: f
                            };
                        t.requestDone = !1, i.folder.change(p).success(function (i) {
                            n(function () {
                                if (t.requestDone = !0, e.pageLoading = !1, 0 == Number(i.status)) {
                                    if (t.selected.tb_id == r) {
                                        var n = bdp.bdpTables.getFolderByFolderId(t.folderList, o);
                                        t.setUnFoldingStatus(n, !0)
                                    }
                                    bdp.bdpTables.getTableByTableId(t.folderList, r);
                                    b({
                                        get_first: !1
                                    }), a(t.tips["chart.moveChartSuccess"]), r == t.selected.tb_id && (t.selected.folder_id = o, $.cookie("select_folder_id", o))
                                }
                                c && (e.pageLoading = !1, l.closeAll())
                            }, 0)
                        })
                    }

                    function b(e) {
                        n(function () {
                            angular.element(".J-search-worktable-input-main").find("input").val() ? t.$broadcast("redoSearch") : t.$emit("regainFolderList", {
                                get_first: e.get_first
                            })
                        }, 0)
                    }

                    function v() {
                        t.folderList = angular.copy(t.dragCopyList)
                    }

                    function y(e) {
                        t.enableSortFolder = !1, i.folder.modify_parent(e).then(function (e) {
                            t.requestDone = !0, 0 == Number(e.status) ? (t.enableSortFolder = !0, b({
                                get_first: !1
                            })) : a(Number(e.status))
                        })
                    }

                    function w(e) {
                        t.enableSortFolder = !1, i.folder.modify_seq(e).then(function (e) {
                            t.requestDone = !0, 0 == Number(e.status) ? (t.enableSortFolder = !0, b({
                                get_first: !1
                            })) : a(Number(e.status))
                        })
                    }

                    function D(e) {
                        function a(t, n) {
                            for (var o = 0, l = t.length; o < l; o++) t[o].folder_id == e && (i = !0, r.seq_no = 0 == o ? 0 : t[o - 1].seq_no + 1, r.parent_id = n), !i && t[o].sub_folders && t[o].sub_folders.length > 0 && a(t[o].sub_folders, t[o].folder_id)
                        }
                        var i = !1,
                            r = {
                                seq_no: 0,
                                parent_id: ""
                            };
                        return a(t.folderList, ""), r
                    }

                    function F(e, t) {
                        for (var a = {
                                parent_id: "",
                                type: ""
                            }, i = !1, r = 0; r < e.length; r++) {
                            if (e[r].folder_id == t) {
                                i = !0, a.type = "top", a.parent_id = "";
                                break
                            }
                            if (!i && e[r].sub_folders && e[r].sub_folders.length > 0)
                                for (var n = 0; n < e[r].sub_folders.length; n++)
                                    if (e[r].sub_folders[n].folder_id == t) {
                                        i = !0, a.type = "sub", a.parent_id = e[r].folder_id;
                                        break
                                    }
                            if (i) break
                        }
                        return a
                    }

                    function T(e, a) {
                        var i = 0,
                            r = {};
                        return angular.forEach(t.folderList, function (t) {
                            e == t.folder_id ? r = t : t.sub_folders && t.sub_folders.length > 0 && angular.forEach(t.sub_folders, function (t) {
                                e == t.folder_id && (r = t)
                            })
                        }), 1 == r.tb_list.length ? (t.sortWorkSheetData.tb_index = 0, i = 0) : angular.forEach(r.tb_list, function (e, n) {
                            a == e.tb_id && (t.sortWorkSheetData.tb_index = n, i = n == r.tb_list.length - 1 ? r.tb_list[n - 1].hasOwnProperty("tb_seq_no") ? r.tb_list[n - 1].tb_seq_no + 1 : "-2" : r.tb_list[n + 1].hasOwnProperty("tb_seq_no") ? r.tb_list[n + 1].tb_seq_no : "-2")
                        }), i
                    }
                    t.workdListView = "folderList", n(function () {
                        t.viewTip = t.tips["wb.databaseView"]
                    }, 0), t.isSortFolder = !1;
                    var S = !1;
                    t.enableSortWorkSheet = !0, t.enableSortFolder = !0, t.targetFolder = {}, t.sortWorkSheetData = {
                        from_folder_id: "",
                        to_folder_id: "",
                        from_tb_num: "",
                        to_tb_num: "",
                        tb_index: 0
                    }, t.sortWorkSheets = {
                        appendTo: "body",
                        connectWith: ".accept-worksheet-list",
                        placeholder: "worksheet-sort-placeholder",
                        items: "li:not(.empty-worksheet-folder)",
                        activate: function (e, a) {
                            if (t.isSortWorkSheet = !0, !a.item.sortable.model) return void a.item.sortable.cancel()
                        },
                        start: function (e, a) {
                            if (t.enableSortWorkSheet) {
                                if (!a.item.sortable.model) return void a.item.sortable.cancel();
                                $(e.target).addClass("is-sorting"), t.isSortWorkSheet = !0;
                                var i = a.helper.sortable.model;
                                t.sortWorkSheetData.from_folder_id = bdp.bdpTables.getFolderByTableId(t.folderList, i.tb_id), t.sortWorkSheetData.from_tb_num = i.tb_seq_no
                            }
                        },
                        update: function (e, t) {},
                        change: function (e, t) {
                            S = !0
                        },
                        over: function (e, t) {
                            S = !0
                        },
                        receive: function (e, t) {},
                        stop: function (e, a) {
                            if ($(a.item.sortable.droptarget).hasClass("ds-folder-list")) return t.folderList = angular.copy(t.original_folderList), void t.changeFolderOpenStatus(t.folderList);
                            if (S) {
                                if (!a.item.sortable.model) return a.item.sortable.cancel(), t.folderList = angular.copy(t.original_folderList), void t.changeFolderOpenStatus(t.folderList);
                                t.getPosAfterSort(), $(e.target).removeClass("is-sorting");
                                var i = a.item.sortable.model;
                                if (t.sortWorkSheetData.to_folder_id = bdp.bdpTables.getFolderByTableId(t.folderList, i.tb_id), !t.sortWorkSheetData.to_folder_id) return a.item.sortable.cancel(), t.folderList = angular.copy(t.original_folderList), void t.changeFolderOpenStatus(t.folderList);
                                t.sortWorkSheetData.to_tb_num = getTableNumber(t.sortWorkSheetData.to_folder_id, i.tb_id), t.enableSortWorkSheet = !1, t.sortWorkSheetData.to_folder_id = "folder_root" == t.sortWorkSheetData.to_folder_id ? "folder_root" : t.sortWorkSheetData.to_folder_id, t.sortWorkSheetData.to_tb_num = void 0 == t.sortWorkSheetData.to_tb_num ? -2 : t.sortWorkSheetData.to_tb_num
                            }
                        }
                    }, t.getPosAfterSort = function () {
                        t.current_pos = "";
                        var e = $("#ds-list > ul");
                        e[0] && (t.current_pos = e[0].scrollTop)
                    }, t.getDsTBList = f, t.dsTBList = [], t.original_dbList = [], t.toggleView = function () {
                        t.query = "", "folderList" == t.workdListView ? (t.workdListView = "dsTbList", t.viewTip = t.tips["wb.worktableView"], e.wsId || 0 != t.original_dbList.length ? (t.dsTBList = angular.copy(t.original_dbList), p()) : f().then(function (e) {
                            p()
                        })) : (t.workdListView = "folderList", t.viewTip = t.tips["wb.databaseView"], t.$emit("regainFolderList", {
                            get_first: !1
                        }));
                        for (var a in t.unfolding)
                            if (a == t.selected.folder_id) {
                                var i = bdp.bdpTables.getFolderByFolderId(t.folderList, a);
                                i.open = t.getUnFoldingStatus(a)
                            } else delete t.unfolding[a];
                        n(function () {
                            t.scroll_to_active()
                        }, 100)
                    }, t.requestDone = !0, t.showCreateFolder = function () {
                        l.open({
                            template: "/static/js/worktable/tableDialog/create_table_folder.html",
                            className: "ngdialog-theme-default ngdialog-small",
                            scope: t,
                            data: {
                                folder_list: t.originFolderList,
                                folder_id: "folder_root",
                                folder_name: ""
                            }
                        })
                    }, t.confirmCreateFolder = function (e, r) {
                        if (!r) return void a(t.tips["wb.inputFolderName"]);
                        if (!h(r, "", e && "folder_root" != e ? 2 : 1, e || "")) return void a(t.tips["wb.repeatFolderName"]);
                        var n = {
                            parent_id: e || "",
                            name: r
                        };
                        t.requestDone = !1, i.folder.create(n).then(function (e) {
                            t.requestDone = !0, 0 == Number(e.status) ? (b({
                                get_first: !1
                            }), a(t.tips["wb.createSuccess"]), l.closeAll()) : a(11 == Number(e.status) ? t.tips["wb.repeatFolderName"] : 25001 == Number(e.status) ? t.tips["wb.repeatFolderName"] : t.tips["wb.createFailed"])
                        })
                    }, t.openMoveTablesDialog = function () {
                        if (t.isGettingFolder) return !1;
                        e.pageLoading = !0, i.folder.getStructureWithParam({
                            get_first: 1,
                            get_root: 1
                        }).then(function (a) {
                            e.pageLoading = !1, t.saveFolderList = a.result.folder_list, l.open({
                                templateUrl: "/static/js/worktable/tableDialog/batch_move_tables.html",
                                className: "ngdialog-theme-default ngdialog-width-818 ngdialog-move-tables",
                                scope: t,
                                controller: "batchMoveTablesCtrl",
                                preCloseCallback: function () {
                                    t.needReloadFolderListFlag && b({
                                        get_first: !1
                                    })
                                }
                            })
                        })
                    }, t.batchDeleteTablesDialog = function () {
                        if (t.isGettingFolder) return !1;
                        e.pageLoading = !0, i.folder.getStructureWithParam({
                            get_first: 1,
                            get_root: 1
                        }).then(function (a) {
                            e.pageLoading = !1, t.saveFolderList = a.result.folder_list, l.open({
                                templateUrl: "/static/js/worktable/tableDialog/batch_delete_tables.html",
                                className: "ngdialog-theme-default ngdialog-width-818 ngdialog-move-tables",
                                scope: t,
                                controller: "batchDeleteTablesCtrl",
                                preCloseCallback: function () {
                                    t.needReloadFolderListFlag && b({
                                        get_first: !1
                                    })
                                }
                            })
                        })
                    }, t.rename_folder = function (e, r, n) {
                        if (r.name == e) return void a(t.tips["wb.editSuccesss"]);
                        var o = r.name,
                            l = r.parent_id ? 2 : 1;
                        if (h(e, r.folder_id, l, n)) {
                            r.name = e;
                            var s = {
                                name: e,
                                folder_id: r.folder_id
                            };
                            return i.folder.modify(s).then(function (e) {
                                a(0 == Number(e.status) ? t.tips["wb.editSuccesss"] : Number(e.status)), b({
                                    get_first: !1
                                })
                            }), e
                        }
                        return a(t.tips["wb.repeatFolderName"]), r.name = o, o
                    }, t.moveWorktable = function (e) {
                        l.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: t,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                tbType: "",
                                optType: "move",
                                tbInfo: {
                                    tb_id: e.tb_id,
                                    sh_id: e.sh_id,
                                    folder_id: "folder_root",
                                    tb_name: e.name
                                },
                                folderList: t.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderId: t.saveFolderList.length > 0 ? t.saveFolderList[0].folder_id : "folder_root",
                                targetFolderType: "",
                                queryText: "",
                                open: {},
                                confirmSave: t.saveMoveWorktable,
                                loadingDirectory: !0
                            },
                            controller: "chooseTbFolderCtrl",
                            preCloseCallback: function () {
                                t.needReloadFolderListFlag && b({
                                    get_first: !1
                                })
                            }
                        })
                    }, t.$on("needReloadFolderListFlag", function (e, a) {
                        if (t.needReloadFolderListFlag = a.flag, a.targetFolderId) {
                            var i = a.targetFolderId;
                            t.unfolding[i] ? t.unfolding[i].open = !0 : t.unfolding[i] = {
                                open: status,
                                parent_id: ""
                            }
                        }
                    }), t.saveMoveWorktable = function (a) {
                        function i(e) {
                            angular.forEach(e, function (e) {
                                if (r.folder_id == e.folder_id) {
                                    if (e.hasOwnProperty("tb_list") && e.tb_list.length > 0) {
                                        var t = e.tb_list[e.tb_list.length - 1];
                                        t.hasOwnProperty("tb_seq_no") ? n = t.tb_seq_no + 1 : (o = e.tb_list.length, n = -2)
                                    }
                                } else e.sub_folders && e.sub_folders.length > 0 && i(e.sub_folders)
                            })
                        }
                        if (t.requestDone) {
                            e.pageLoading = !0;
                            var r = {
                                    tb_id: a.tbInfo.tb_id,
                                    sh_id: a.tbInfo.sh_id,
                                    folder_id: a.targetFolderId,
                                    tb_name: a.tbInfo.name
                                },
                                n = 0,
                                o = 0;
                            i(t.folderList), r.tb_id = r.sh_id ? r.sh_id : r.tb_id, _(r.tb_id, r.folder_id, n, o, "dialog")
                        }
                    }, t.copyWorktable = function (e) {
                        l.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: t,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                tbType: "",
                                optType: "copy",
                                tbInfo: {
                                    original_tb_name: e.name,
                                    tb_name: e.name + "(副本)",
                                    tb_id: e.tb_id,
                                    folder_id: "folder_root"
                                },
                                folderList: t.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderType: "",
                                queryText: "",
                                open: {},
                                confirmSave: t.saveCopyWorktable,
                                loadingDirectory: !0
                            },
                            controller: "chooseTbFolderCtrl",
                            preCloseCallback: function () {
                                t.needReloadFolderListFlag && b({
                                    get_first: !1
                                })
                            }
                        })
                    }, t.saveCopyWorktable = function (r) {
                        if (t.requestDone) {
                            if (!r.tbInfo.tb_name) return void a(t.tips["join.inputWorkSheetName"]);
                            if (r.tbInfo.original_tb_name == r.tbInfo.tb_name) return void a(t.tips["wb.changeWorkSheetName"]);
                            var n = r.tbInfo;
                            if (bdp.bdpTables.checkRepeatTableName(t.folderList, n.tb_id, n.tb_name)) return void a(t.tips["wb.changeWorkSheetName"]);
                            n.folder_id = r.targetFolderId;
                            bdp.bdpTables.getFolderByTableId(t.folderList, n.tb_id).folder_id;
                            e.pageLoading = !0, t.requestDone = !1, i.tb.copy(n).then(function (i) {
                                if (t.requestDone = !0, e.pageLoading = !1, 0 == i.status) {
                                    g(i.result.task_id), b({
                                        get_first: !1
                                    }), a(t.tips["user.copySuccess"])
                                }
                                l.closeAll()
                            })
                        }
                    }, t.moveFolder = function (e, a) {
                        a && a.stopPropagation(), l.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: t,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                loadingDirectory: !0,
                                tbType: "",
                                optType: "move_folder",
                                tbInfo: {
                                    folder_id: e.folder_id,
                                    folder_name: e.name,
                                    parent_id: e.parent_id,
                                    has_sub_folder: e.sub_folders && e.sub_folders.length > 0
                                },
                                folderList: t.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderId: t.saveFolderList.length > 0 ? t.saveFolderList[0].folder_id : "folder_root",
                                targetFolderType: "top",
                                queryText: "",
                                open: {},
                                confirmSave: t.saveMoveFolder
                            },
                            controller: "chooseTbFolderCtrl",
                            preCloseCallback: function () {
                                t.needReloadFolderListFlag && b({
                                    get_first: !1
                                })
                            }
                        })
                    }, t.saveMoveFolder = function (e) {
                        if (t.requestDone) {
                            var i = e.targetFolderId,
                                r = e.targetFolderType,
                                n = e.tbInfo;
                            if (i == n.folder_id) return void a(t.tips["wb.cannotMoveToCurrentFolder"]);
                            if ("sub" == r) return void a(t.tips["wb.cannotMoveToSubFolder"]);
                            if ("top" == r && n.has_sub_folder && "folder_root" != i) return void a(t.tips["wb.cannotMoveTwoLevelsToSubFolder"]);
                            var o = "folder_root" == i ? 1 : 2,
                                s = "folder_root" != i ? i : "";
                            if (!h(n.folder_name, n.folder_id, o, s)) return void a(t.tips["wb.repeatFolderName"]);
                            var d = {
                                seq_no: 0,
                                parent_id: i,
                                folder_id: n.folder_id
                            };
                            "folder_root" != i ? function (e) {
                                angular.forEach(e, function (e) {
                                    i == e.folder_id && e.hasOwnProperty("sub_folders") && e.sub_folders.length > 0 && (d.seq_no = e.sub_folders[e.sub_folders.length - 1].seq_no + 1)
                                })
                            }(t.original_folderList) : t.original_folderList.length < 2 ? d.seq_no = 0 : d.seq_no = t.original_folderList[t.original_folderList.length - 2].seq_no + 1, t.requestDone = !1, "folder_root" == i && "" == n.parent_id ? w(d) : y(d), l.closeAll()
                        }
                    }, t.deleteFolder = function (e, a) {
                        a && a.stopPropagation(), t.delInfo = {
                            delTb: !1,
                            folder_id: e.folder_id,
                            folder_name: e.name
                        }, l.open({
                            template: "/static/partials/dialogTemplates/delete_folder.html",
                            className: "ngdialog-theme-default ngDialog-width-380 ngdialog-confim-box",
                            scope: t
                        })
                    }, t.forceDeleteFolder = function () {
                        if (t.showLoading = !0, t.requestDone) {
                            var e = t.delInfo.delTb ? "1" : "0";
                            t.requestDone = !1, i.folder.del(t.delInfo.folder_id, e).then(function (e) {
                                if (t.requestDone = !0, 0 == e.status)
                                    if (0 != e.result) a(t.tips["wb.deleteFolderErr"]), 2 == e.result && b({
                                        get_first: !1
                                    });
                                    else {
                                        var i = l.open({
                                            template: "/static/partials/dialogTemplates/alert_success.html",
                                            scope: t,
                                            className: "ngdialog-theme-default ngDialog-width-300",
                                            closeByDocument: !0,
                                            data: {
                                                message: t.tips["wb.deleteSuccess"]
                                            },
                                            preCloseCallback: function () {
                                                n.cancel(r)
                                            }
                                        });
                                        t.getCapacityStatistics(), b({
                                            get_first: !1
                                        });
                                        var r = n(function () {
                                            l.close(i)
                                        }, 3e3)
                                    }
                                else a(e.errstr);
                                l.closeAll(), t.showLoading = !1
                            })
                        }
                    }, t.switchRole = function (e) {
                        1 == e ? (t.showUser = !0, t.showGroup = !1) : 2 == e && (t.showUser = !1, t.showGroup = !0)
                    }, t.assignData = {
                        initCheckedUsers: [],
                        initCheckedGroups: [],
                        checkedUsers: [],
                        checkedGroups: [],
                        groupQuery: "",
                        userQuery: "",
                        groups: [],
                        users: [],
                        nodeTooltip: u.instant("wb.assign.unableToCancelAssign")
                    }, t.assignTableTo = function (e) {
                        i.share.allList({
                            tb_id: e.tb_id
                        }).then(function (a) {
                            function i(e) {
                                angular.forEach(e, function (e) {
                                    e.checkedDisabled = !e.can_cancel, e.checked = e.shared, e.shared && t.assignData.initCheckedGroups.push(e.group_id), e.group_list && e.group_list.length > 0 && i(e.group_list)
                                })
                            }
                            t.showUser = !0, t.showGroup = !1, t.assignData.groups = a.result.user_group, t.assignData.users = a.result.user, t.assignData.initCheckedUsers = [], t.assignData.initCheckedGroups = [], t.assignData.users.map(function (e) {
                                e.checked = e.shared, e.shared && t.assignData.initCheckedUsers.push(e.user_id)
                            }), i(t.assignData.groups), t.assignTableDialog = l.open({
                                template: "/static/partials/dialogTemplates/assign_table.html",
                                scope: t,
                                data: {
                                    tb_name: e.name,
                                    tb_id: e.tb_id
                                },
                                className: "ngdialog-theme-default ngDialog-width-360 ngDialog-assign-table"
                            })
                        })
                    }, t.confirmAssignTable = function (e) {
                        function r(e) {
                            angular.forEach(e, function (e) {
                                1 == e.checked && t.assignData.checkedGroups.push(e.group_id), e.group_list && e.group_list.length > 0 && r(e.group_list)
                            })
                        }
                        t.assignData.checkedUsers = [], t.assignData.checkedGroups = [];
                        for (var n = 0; n < t.assignData.users.length; n++) 1 == t.assignData.users[n].shared && t.assignData.checkedUsers.push(t.assignData.users[n].user_id);
                        r(t.assignData.groups), t.assignData.deletedUsers = getDiffItemsInTwoArray(t.assignData.initCheckedUsers, t.assignData.checkedUsers).del, t.assignData.deletedGroups = getDiffItemsInTwoArray(t.assignData.initCheckedGroups, t.assignData.checkedGroups).del;
                        var o = {
                            tb_id: e,
                            user_list: {
                                all: t.assignData.checkedUsers,
                                del: t.assignData.deletedUsers
                            },
                            group_list: {
                                all: t.assignData.checkedGroups,
                                del: t.assignData.deletedGroups
                            }
                        };
                        o.user_list = JSON.stringify(o.user_list), o.group_list = JSON.stringify(o.group_list), i.share.modify(o).then(function (e) {
                            0 == e.status && (a(t.tips["wb.assign.success"]), l.close(t.assignTableDialog))
                        })
                    }, t.deleteTb = function (r) {
                        function o(e) {
                            function a(t) {
                                angular.forEach(t, function (t) {
                                    for (var i = 0, r = t.tb_list.length; i < r; i++)
                                        if (t.tb_list[i].tb_id == e) {
                                            t.tb_list.splice(i, 1), u = !0;
                                            break
                                        }!u && t.sub_folders && t.sub_folders.length > 0 && a(t.sub_folders)
                                })
                            }
                            var i = bdp.bdpTables.getFolderByTableId(t.folderList, e);
                            u = !1, a(t.folderList), u = !1, a(t.original_folderList), t.checkUnreadTbInFolder(i.folder_id, t.folderList), t.$broadcast("updatefolderList", t.original_folderList), angular.forEach(t.folderList, function (e) {
                                e.totalTable = bdp.bdpTables.getFolderTableNumber(e), e.sub_folders && e.sub_folders.length > 0 && angular.forEach(e.sub_folders, function (e) {
                                    e.totalTable = bdp.bdpTables.getFolderTableNumber(e)
                                })
                            })
                        }

                        function s(a) {
                            if (o(d), d == t.selected.tb_id)
                                if ($.cookie("ds_tb_id", ""), "folderList" == t.workdListView ? t.no_datasource = t.checkNoTable(t.folderList, "list") : t.no_datasource = t.checkNoTable(t.dsTBList, "list"), t.no_datasource) t.activeTab.index = 1, t.selected = {
                                    tb: null,
                                    status: {},
                                    tb_id: 0,
                                    folder_id: ""
                                }, t.previewData.table_preview_loading = !1, t.previewData.table_preview_filter_loading = !1;
                                else {
                                    var r = {};
                                    "folderList" == t.workdListView ? n(function () {
                                        angular.element(".J-search-worktable-input-main").find("input").val() ? t.$broadcast("redoSearch") : i.folder.getTableSiblings().then(function (e) {
                                            e.result.tb_list.length ? (r = e.result.tb_list[0], t.showDetailPage(r, !0)) : (t.no_datasource = !0, t.loadingFolderStructure = !1, t.selected.tb = null)
                                        })
                                    }, 0) : (r = t.getFirst(t.dsTBList), t.selected.tb_id = r.tb_id, p(), t.showDetailPage(r, !0))
                                }
                            "self" != a.tb_type && "public" != a.tb_type || "ds" != a.type && "public" != a.type || t.getDsTBList(), 3 == e.enterprise_type && t.$emit("changeCapacity", "change"), t.getCapacityStatistics()
                        }
                        if (t.requestRelateInfo = !0, !t.isGettingFolder) {
                            var d = r.tb_id,
                                u = !1;
                            i.chart.getRelationList(r.tb_id).then(function (e) {
                                if (t.requestRelateInfo = !1, !e) return !1;
                                var a = e.chart.length,
                                    o = e.wb.length,
                                    u = e.user.length,
                                    f = e.user_group.length;
                                a || o || u || f ? !a || o || u || f ? (o || u || f) && l.open({
                                    template: "/static/partials/dialogTemplates/delete_related_table.html",
                                    className: "ngdialog-theme-default ngDialog-width-320 ngDialog-delete-confirm",
                                    scope: t,
                                    data: {
                                        related_table: !0
                                    }
                                }) : t.delTbWithChartDialog = l.open({
                                    template: "/static/partials/dialogTemplates/delete_related_table.html",
                                    className: "ngdialog-theme-default ngDialog-width-380  ngDialog-delete-confirm",
                                    scope: t,
                                    data: {
                                        related_chart: !0,
                                        chart_names: e.chart,
                                        verifyCode: ""
                                    }
                                }) : l.openConfirm({
                                    template: "/static/partials/dialogTemplates/confirm-dialog.html",
                                    className: "ngdialog-theme-default ngDialog-width-300",
                                    scope: t
                                }).then(function () {
                                    t.deletingWorktable = !0, i.tb.del(d).then(function (e) {
                                        if (t.selected.status.timer && d == t.selected.tb.tb_id && (c.cancelOne("/api/tb/status"), clearTimeout(t.selected.status.timer), delete t.selected.status.timer), t.deletingWorktable = !1, 0 == Number(e.status)) {
                                            s(r);
                                            var a = l.open({
                                                    template: "/static/partials/dialogTemplates/alert_success.html",
                                                    scope: t,
                                                    className: "ngdialog-theme-default ngDialog-width-300",
                                                    closeByDocument: !0,
                                                    data: {
                                                        message: t.tips["wb.deleteSuccess"]
                                                    },
                                                    preCloseCallback: function () {
                                                        n.cancel(i)
                                                    }
                                                }),
                                                i = n(function () {
                                                    l.close(a)
                                                }, 3e3)
                                        }
                                    })
                                })
                            }), t.confirmDelTbWithChart = function (e) {
                                if ("" == e) return a(t.tips["user.inputPicVerifyCode"]), !1;
                                i.tb.delTableWithChart(d, t.sessionId, e).then(function (e) {
                                    if (0 != Number(e.status)) return 19001 == Number(e.status) ? (a(t.tips["wb.deleteFailedSearch"]), !1) : 23002 == e.status ? (a(t.tips["error.codeError"]), !1) : (a(t.tips["wb.deleteFailed"]), !1);
                                    s(r);
                                    var i = l.open({
                                            template: "/static/partials/dialogTemplates/alert_success.html",
                                            scope: t,
                                            className: "ngdialog-theme-default ngDialog-width-300",
                                            closeByDocument: !0,
                                            data: {
                                                message: t.tips["wb.deleteSuccess"]
                                            },
                                            preCloseCallback: function () {
                                                n.cancel(o)
                                            }
                                        }),
                                        o = n(function () {
                                            l.close(i)
                                        }, 3e3);
                                    l.close(t.delTbWithChartDialog)
                                })
                            }, t.checkRelateStatus = function () {
                                t.selected.tb = r, t.selected.tb_id = r.tb_id, t.showTab(2)
                            }, t.toggleImg = function () {
                                var e = (new Date).getTime();
                                t.sessionId = e + parseInt(1e4 * Math.random()), t.url = "/api/register/pic?session_id=" + t.sessionId + "&t=" + e
                            }, t.toggleImg()
                        }
                    }, t.editWorkTable = function (e) {
                        function i(e, i) {
                            if (8 != e.keyCode) return i && i.length >= 20 ? (a(t.tips["wb.tableLabelLimit"]), !1) : void 0
                        }

                        function r(e, i) {
                            if (8 != e.keyCode) return i && i.length >= 100 ? (a(t.tips["wb.tableCommentLimit"]), !1) : void 0
                        }
                        var n = {
                            save: t.rename_tb,
                            hitExistTableLabel: t.hitExistTableLabel,
                            labelLimit: i,
                            commentLimit: r,
                            name: e.name,
                            table: angular.copy(e)
                        };
                        l.open({
                            templateUrl: "/static/js/worktable/tableDialog/rename_table.html",
                            scope: t,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: n
                        })
                    }, t.hitLabelList = {
                        show: !1,
                        list: []
                    }, t.hitExistTableLabel = function (e) {
                        t.hitLabelList.list = [], t.hitLabelList.show = !0, e ? angular.forEach(t.table_label_list, function (a) {
                            a.toLowerCase().indexOf(e.toLowerCase()) >= 0 && t.hitLabelList.list.push(a)
                        }) : t.hitLabelList.list = angular.copy(t.table_label_list)
                    }, t.rename_tb = function (e, r, o) {
                        if (!e) return void a(t.tips["join.inputWorkSheetName"]);
                        if (e.length > 100) return void a(t.tips["wb.tableNameLessThan100"]);
                        var l = r.name;
                        return r.label = r.label || "", r.comment = r.comment || "", r.name = e, m(e, r.tb_id) ? (r.repeatName = !0, r.name = l, a(t.tips["wb.changeWorkSheetName"]), !1) : (r.repeatName = !1, i.tb.modify(angular.toJson([r])).then(function (e) {
                            0 == Number(e.status) && (a(t.tips["wb.editSuccesss"]), t.$broadcast("updatefolderList", t.folderList), t.selected.tb.tb_id == r.tb_id && (t.selected.tb.name = r.name), "folderList" == t.workdListView && (t.$broadcast("renameTb", r), b({
                                get_first: !1
                            })), "dsTbList" == t.workdListView && t.getDsTBList(), o && n(function () {
                                o()
                            }, 0))
                        }), e)
                    }, t.toggleFolder = function (e) {
                        function a(i) {
                            angular.forEach(i, function (i) {
                                e.folder_id == i.folder_id ? (i.open = e.open, t.unfolding[e.folder_id] = {
                                    open: i.open,
                                    parent_id: ""
                                }) : i.sub_folders && i.sub_folders.length > 0 && a(i.sub_folders)
                            })
                        }
                        e.open = !e.open, a(t.folderList)
                    }, t.stickyFolder = function (e) {
                        w({
                            folder_id: e,
                            seq_no: 0
                        })
                    }, t.dragFolderFromTo = {
                        from_id: "",
                        from_type: "",
                        to_id: "",
                        to_type: ""
                    }, t.sortFolders = {
                        appendTo: "document.body",
                        connectWith: ".accept-folder",
                        placeholder: "sort-folder-placeholder",
                        items: ".J-sortable-folder",
                        dropOnEmpty: !0,
                        distance: 2,
                        delay: 200,
                        scroll: !0,
                        start: function (e, a) {
                            if (!$(a.item).hasClass("sort-table-placeholder")) {
                                if (!a.item.sortable.model || !t.enableSortFolder || t.isGettingFolder) return void a.item.sortable.cancel();
                                $(a.helper).addClass("is-sorting");
                                var i = a.item.sortable.model;
                                t.sortFolderHasSub = i.hasOwnProperty("sub_folders") && i.sub_folders.length > 0, t.dragCopyList = angular.copy(t.folderList), t.dragFolderFromTo.from_type = "top", t.dragFolderFromTo.from_id = i.parent_id || ""
                            }
                        },
                        update: function (e, t) {},
                        change: function (e, t) {},
                        over: function (e, t) {},
                        receive: function (e, a) {
                            $(a.item).hasClass("ds-excel") && (a.item.sortable.cancel(), t.isSortFolder = !1)
                        },
                        stop: function (e, i) {
                            if (t.query) return i.item.sortable.cancel(), void v();
                            var r = i.item.sortable.model,
                                n = D(r.folder_id);
                            t.getPosAfterSort(), $(e.target).removeClass("is-sorting");
                            var o = F(t.folderList, r.folder_id);
                            t.dragFolderFromTo.to_type = o.type, t.dragFolderFromTo.to_id = o.parent_id;
                            var l = "top" == t.dragFolderFromTo.to_type ? 1 : 2;
                            if (!h(r.name, r.folder_id, l, t.dragFolderFromTo.to_id)) return a(t.tips["wb.repeatFolderName"]), i.item.sortable.cancel(), void v();
                            "sub" == t.dragFolderFromTo.to_type && t.sortFolderHasSub ? (a(t.tips["wb.cannotMoveTwoLevelsToSubFolder"]), i.item.sortable.cancel(), v(), t.changeFolderOpenStatus(t.folderList)) : t.dragFolderFromTo.from_id == t.dragFolderFromTo.to_id ? (n.folder_id = r.folder_id, w(n)) : t.dragFolderFromTo.from_id != t.dragFolderFromTo.to_id && (n.folder_id = r.folder_id, y(n))
                        }
                    }, t.sortSubFolders = {
                        appendTo: "document.body",
                        connectWith: ".accept-sub-folder",
                        placeholder: "sort-folder-placeholder",
                        items: ".J-sortable-folder",
                        dropOnEmpty: !0,
                        distance: 2,
                        delay: 200,
                        scroll: !0,
                        start: function (e, a) {
                            if (!$(a.item).hasClass("sort-table-placeholder")) {
                                if (!a.item.sortable.model || !t.enableSortFolder || t.isGettingFolder) return void a.item.sortable.cancel();
                                $(a.helper).addClass("is-sorting");
                                var i = a.item.sortable.model;
                                t.dragCopyList = angular.copy(t.folderList), t.dragFolderFromTo.from_type = "sub", t.dragFolderFromTo.from_id = i.parent_id || "", t.sortFolderHasSub = !1
                            }
                        },
                        update: function (e, t) {},
                        change: function (e, t) {},
                        over: function (e, t) {},
                        receive: function (e, t) {},
                        stop: function (e, i) {
                            if (t.query) return i.item.sortable.cancel(), void v();
                            t.getPosAfterSort(), $(e.target).removeClass("is-sorting");
                            var r = i.item.sortable.model,
                                n = D(r.folder_id),
                                o = F(t.folderList, r.folder_id);
                            t.dragFolderFromTo.to_type = o.type, t.dragFolderFromTo.to_id = o.parent_id;
                            var l = "top" == t.dragFolderFromTo.to_type ? 1 : 2;
                            if (!h(r.name, r.folder_id, l, t.dragFolderFromTo.to_id)) return a(t.tips["wb.repeatFolderName"]), i.item.sortable.cancel(), void v();
                            "sub" == t.dragFolderFromTo.to_type && t.sortFolderHasSub ? (a(t.tips["wb.cannotMoveTwoLevelsToSubFolder"]), i.item.sortable.cancel(), v(), t.changeFolderOpenStatus(t.folderList)) : t.dragFolderFromTo.from_id == t.dragFolderFromTo.to_id ? (n.folder_id = r.folder_id, w(n)) : t.dragFolderFromTo.from_id != t.dragFolderFromTo.to_id && (n.folder_id = r.folder_id, y(n))
                        }
                    }, t.sortTables = {
                        appendTo: "document.body",
                        connectWith: ".accept-tables",
                        placeholder: "sort-table-placeholder",
                        items: ".J-sortable-excel",
                        dropOnEmpty: !0,
                        distance: 2,
                        delay: 200,
                        scroll: !0,
                        start: function (e, a) {
                            if (!a.item.sortable.model || !t.enableSortWorkSheet || t.isGettingFolder) return a.item.sortable.cancel(), !1;
                            $(e.target).addClass("is-sorting");
                            var i = a.item.sortable.model;
                            t.dragCopyList = angular.copy(t.folderList), t.sortWorkSheetData.from_folder_id = bdp.bdpTables.getFolderByTableId(t.folderList, i.tb_id).folder_id, t.sortWorkSheetData.from_tb_num = i.tb_seq_no
                        },
                        update: function (e, t) {},
                        change: function (e, t) {},
                        over: function (e, t) {},
                        receive: function (e, t) {},
                        stop: function (e, a) {
                            var r = a.item.sortable.model;
                            if (t.query) return a.item.sortable.cancel(), void v();
                            if (!r) return a.item.sortable.cancel(), v(), void t.changeFolderOpenStatus(t.folderList);
                            if (t.getPosAfterSort(), $(e.target).removeClass("is-sorting"), t.sortWorkSheetData.to_folder_id = bdp.bdpTables.getFolderByTableId(t.folderList, r.tb_id).folder_id, !t.sortWorkSheetData.to_folder_id) return a.item.sortable.cancel(), v(), void t.changeFolderOpenStatus(t.folderList);
                            t.sortWorkSheetData.to_tb_num = T(t.sortWorkSheetData.to_folder_id, r.tb_id), t.sortWorkSheetData.to_tb_num = void 0 == t.sortWorkSheetData.to_tb_num ? -2 : t.sortWorkSheetData.to_tb_num, t.sortWorkSheetData.to_folder_id = "folder_root" == t.sortWorkSheetData.to_folder_id ? "folder_root" : t.sortWorkSheetData.to_folder_id, t.enableSortWorkSheet = !1;
                            var n = {
                                tb_id: r.tb_id,
                                to_folder: t.sortWorkSheetData.to_folder_id,
                                to_seq: t.sortWorkSheetData.to_tb_num,
                                tb_index: t.sortWorkSheetData.tb_index
                            };
                            i.folder.change(n).then(function (e) {
                                0 == Number(e.status) && (t.getWorktableFromFolder({
                                    folder_id: t.sortWorkSheetData.to_folder_id
                                }).then(function () {
                                    t.sortWorkSheetData.to_folder_id != t.sortWorkSheetData.from_folder_id && t.getWorktableFromFolder({
                                        folder_id: t.sortWorkSheetData.from_folder_id
                                    })
                                }), t.enableSortWorkSheet = !0)
                            })
                        }
                    }, t.getCapacityStatistics(), t.goTableCapacityPage = function () {
                        var t = "table_capacity";
                        e.wsId && (t = t + "/" + e.wsId), d.path(t)
                    }, o(["wb.confirmDeleteWorkSheet", "wb.confirmDeleteFolder", "wb.deleteFailedSearch", "wb.copyFail", "wb.cannotMoveToCurrentFolder", "wb.changeWorkSheetName", "wb.editSuccesss", "wb.unnameFolder", "wb.inputFolderName", "wb.createSuccess", "wb.repeatFolderName", "wb.createFailed", "wb.worktableView", "wb.databaseView", "wb.deleteFolderErr", "copySuccess", "copyFail", "wb.stickSuccess", "wb.assign.unableToCancelAssign", "wb.stickFail", "join.worksheetname", "join.inputWorkSheetName", "nameInvalid", "wb.cannotMoveToSubFolder", "wb.cannotMoveTwoLevelsToSubFolder", "wb.cannotAddToSubFolder", "wb.tableCommentLimit", "wb.tableLabelLimit", "wb.tableNameLessThan100", "wb.assign.success", "wb.assign.nothingSelected", "user.inputPicVerifyCode", "error.codeError", "user.inputPicVerifyCode", "error.codeError", "wb.chooseFromWorktable", "wb.chooseToDirectory", "wb.batchMoveSuccess", "chart.moveChartSuccess", "user.copySuccess"], t)
                }

                function t() {
                    return {
                        templateUrl: "/static/js/worktable/preview/worktable-folder-list.html",
                        controller: e
                    }
                }
                angular.module("BC.controllers.dataSource")
                .directive("worktableList", t), 
                e.$inject = ["$rootScope", "$scope", "errHint", "commonService", "commonHttp", "$timeout", "$jsTipTranslate", "ngDialog", "verifyTbName", "$location", "pendingRequests", "$translate"]
            }(), 
            angular.module("BC.directives")
            .directive("modifyField", function () {
                return {
                    restrict: "A",
                    link: function (e, t, a) {
                        e.copy_field = angular.copy(e.field), e.isModify = !1, e.edit = function () {
                            e.isModify || (e.copy_field = angular.copy(e.field), e.editting = !0)
                        }, e.cancel = function () {
                            e.editting = !1, e.copy_field = angular.copy(e.field)
                        }, e.save = function () {
                            if (!e.copy_field.name) return void e.cancel();
                            e.isModify = !0, e.rename_field(e.copy_field.name, e.copy_field.type, e.field).then(function () {
                                e.copy_field = angular.copy(e.field), e.isModify = !1, e.$emit("reloadFieldList")
                            }), e.editting = !1
                        }, e.modifyFieldType = function (t, a) {
                            t.ico_type = a, e.copy_field.type = a
                        }, t.on("keyup", "input", function (t) {
                            function a() {
                                e.$$phrase || e.$digest()
                            }
                            13 == t.keyCode ? (e.save(), a()) : 27 == t.keyCode && (e.cancel(), a())
                        })
                    }
                }
            }),
            function () {
                function e(e, t, a, i, r, n, o, l, s, d, c) {
                    function u() {
                        var t, a = !0,
                            i = [];
                        angular.forEach(e.files_list, function (e, a) {
                            t = /(\..{3,4})?$/.exec(e.name)[0].replace(/\./g, ""), t = "xls" == t ? "xlsx" : t, $.inArray(t, i) == -1 && i.push(t)
                        }), a = !(i.length > 1), e.formatHint = !a, a || (e.filesFormat = i[0])
                    }

                    function f(t) {
                        var a = !1;
                        return /\.csv$/.test(t.name) ? (_ = uploadParam.csvMaxSize, t.size > v && (a = !0, limitFileMsg = "upload.csvFileSizeError")) : (_ = uploadParam.excelMaxSize, t.size > b && (a = !0, limitFileMsg = "upload.excelFileSizeError")), a ? e.tips[limitFileMsg] + _ + "M" : void 0
                    }

                    function p() {
                        for (var t = e.files_list, a = 0, i = t.length; a < i; a++)
                            if (t[a].fileSizeError) return !1;
                        return !0
                    }

                    function g() {
                        var t = 0;
                        return angular.forEach(e.files_list, function (e) {
                            t += e.size
                        }), t
                    }

                    function h() {
                        var t = {},
                            a = [],
                            i = !1;
                        return angular.forEach(e.files_list, function (e) {
                            t[e.name] ? i = !0 : (t[e.name] = !0, a.push(e))
                        }), e.files_list = a, i
                    }

                    function m(e) {
                        angular.element(".files-progress-ul") && (angular.element(".files-progress-ul").get(0).scrollTop = 48 * e)
                    }
                    e.operate_type = "batch", e.acceptTypes = "text/csv,*.xls,*.xlsx,.csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", e.status = "init", r(function () {
                        e.uploadDialogTitle = e.tips["upload.batchAppend"], e.dialogTitle = e.tips["upload.batchAppend"], e.$$phase || e.$apply()
                    }, 100), e.MAX_RERTRY = 5, e.CUR_RETRY = 0, e.files_list = [], e.clickDisabled = !0, e.csv_terminate = "comma", e.csv_other = "", e.uploadData = {
                        folder_id: e.selected.folder_id || "folder_root"
                    }, e.deleteMultipleFiles = function (t) {
                        e.files_list.splice(t, 1), u()
                    };
                    var _, b = uploadParam.excelMaxSize * (1 << 20),
                        v = uploadParam.csvMaxSize * (1 << 20);
                    e.onFileInputChange = function (t, a) {
                        var i = e.files_list.length + a;
                        if (e.files_list.length + a > 50) return alert(e.tips["upload.fileNumError"] + i + " "), t.length = 0, !1;
                        h() && alert(e.tips["upload.sameNameError"]), angular.forEach(t, function (t, a) {
                            t.id = a, t.status = "init", t.progress = 0, t.err_mesg = "", t.show_err_mesg = !1, t.data_clear_mesg = "", t.fileSizeError = f(t), e.files_list.push(t)
                        }), u(), e.hasFile = t && t.length, e.$$phase || e.$digest()
                    }, e.confirm_upload_batch = function () {
                        if (0 == e.files_list.length) return alert(e.tips["upload.selectUploadFiles"]), !1;
                        if (u(), e.formatHint) return void alert(e.tips["upload.fileFormatHint"]);
                        if (p()) {
                            e.uploadData.total_size = g();
                            var t = o.personalInfo,
                                a = t.capacity;
                            if ("personal" == o.global.domain && e.uploadData.total_size + t.used > a) return void c();
                            if (e.file_type = "excel", "setCsv" == e.status || ".csv" != e.filesFormat) {
                                if ("setCsv" == e.status) {
                                    var i = e.csv_terminate;
                                    if ("other" == e.csv_terminate && (i = e.csv_other), !i) return void alert(e.tips["upload.csvDesc"]);
                                    e.file_type = "csv", e.uploadData.field_terminate = i
                                }
                                e.$broadcast("fileInputChange", e.files_list), e.uploadData.tb_id = e.uploadOption.default_tb
                            } else e.status = "setCsv"
                        }
                    }, e.$watch("files_list", function () {
                        h() && alert(e.tips["upload.sameNameError"]);
                        var t = e.files_list.length;
                        e.files_list.length > 50 && alert(e.tips["upload.fileNumError"] + t + " ")
                    }, !0), e.onUpload = function (t) {
                        "s_admin" == o.role && $(".ngdialog").removeClass("ng-ds-sadmin-dialog"), e.status = "loading", e.showProgress = !0
                    }, e.onProgress = function (t) {
                        e.uploadProgress = (100 * t).toFixed(2) + "%", angular.element(".append-progress-bar-top.uploading").css("width", e.uploadProgress)
                    }, e.onError = function (t) {
                        var a = t.data;
                        e.showProgress = !1, e.responseData = a, e.errMsg = a.errstr, 23040 == a.status && c(), 20 == a.status && angular.element(".append-progress-bar-top.formatError").css("width", 0)
                    }, e.onComplete = function (t) {
                        var a = t.data;
                        if (e.showProgress = !1, e.errSheet = [], 0 == a.status) e.dialogTitle = e.tips["upload.batchAppend"], e.status = "success", 3 == o.enterprise_type && e.$emit("changeCapacity", "change");
                        else {
                            if (1 == a.status) return void(location.href = "/login.html");
                            e.onError(t)
                        }
                    }, e.ableToClick = function (t) {
                        e.clickDisabled = t
                    }, e.onChangeStatus = function (t) {
                        e.files_list[t.index].status = t.status, e.files_list[t.index].err_mesg = t.err_mesg, e.files_list[t.index].data_clear_mesg = t.data_clear_mesg, (t.index >= 4 || "analyzeComplete" == t.status) && m(t.index - 4 + 1)
                    }, e.complete_batch_append = function () {
                        e.showTab(e.activeTab.index), e.ngDialogData.confirmCallback(), e.closeDialog()
                    }, e.hiddenFileClick = function () {
                        angular.element("#file_input").click()
                    }, e.showErrorTips = function (e, t, a) {
                        var i = angular.element(".upload-error-tip"),
                            r = l.positionElements($(t), i, "bottom");
                        angular.element(".upload-error-tip").css("width", "auto"), angular.element(".upload-error-tip").css("display", "block"), angular.element(".upload-error-tip").css("top", r.top + 4), angular.element(".upload-error-tip").html(a);
                        var n = angular.element(".upload-error-tip").css("width");
                        angular.element(".upload-error-tip").css("left", r.left - parseInt(n) + 10), parseInt(n) > "300" && (angular.element(".upload-error-tip").css("width", 300), angular.element(".upload-error-tip").css("left", r.left - 290))
                    }, e.hideErrorTips = function () {
                        angular.element(".upload-error-tip").css("display", "none"), angular.element(".upload-error-tip").css("top", 0), angular.element(".upload-error-tip").css("left", 0)
                    }, e.showOffsetTips = function (e, t, a) {
                        var i = angular.element(".upload-error-tip"),
                            r = l.positionElements($(t), i, "bottom");
                        angular.element(".upload-error-tip").css("width", "auto"), angular.element(".upload-error-tip").css("display", "block"), angular.element(".upload-error-tip").css("top", r.top + 4), angular.element(".upload-error-tip").html(a);
                        var n = angular.element(".upload-error-tip").css("width");
                        angular.element(".upload-error-tip").css("left", r.left - parseInt(n) + 10), n > "300" && (angular.element(".upload-error-tip").css("width", 300), angular.element(".upload-error-tip").css("left", r.left - 290))
                    }, e.hideOffsetTips = function () {
                        angular.element(".upload-error-tip").css("display", "none"), angular.element(".upload-error-tip").css("top", 0), angular.element(".upload-error-tip").css("left", 0)
                    }, s(["upload.batchAppend", "upload.selectUploadFiles", "upload.fileSizeError", "upload.fileNumError", "upload.sameNameError", "upload.fileFormatHint", "upload.csvDesc", "upload.csvFileSizeError", "upload.excelFileSizeError"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("UploadBatchController", e), 
                e.$inject = ["$scope", "commonService", "$location", "ngDialog", "$timeout", "errHint", "$rootScope", "$position", "$jsTipTranslate", "$translate", "capacityHint"]
            }(), 
            angular.module("BC.controllers.dataSource")
            .directive("worktablePreviewFilter", ["filterOperatorMapWithType", "$timeout", "$jsTipTranslate", "errHint", "$translate", "ngDialog", "dateTimeByHalfHour", function (e, t, a, i, r, n, o) {
                return {
                    restrict: "A",
                    scope: !0,
                    templateUrl: "/static/js/worktable/preview/worktable-preview-filter.html",
                    replace: !0,
                    link: function (l) {
                        function s() {
                            l.previewFilterData = angular.copy(p), l.workTableFilter.showIt = !1, l.lastParamData = angular.copy(h), m = !0
                        }

                        function d(e) {
                            var t = angular.copy(h);
                            return t.where.where_linker = e.where.where_linker, t.where.where_type = e.where.where_type, t.sort = e.sort, angular.forEach(e.where.condition.filters, function (e, a) {
                                var i = null,
                                    r = !1;
                                if (null != e.field) {
                                    var n = l.fieldTypeMap[e.field.type];
                                    i = {
                                        fid: e.field.fid,
                                        data_type: n,
                                        operator: null,
                                        value: null,
                                        start_date: null,
                                        end_date: null
                                    }, "date" == n ? null == e.startDate && null == e.endDate || 10 != e.operator ? 8 != e.operator && 9 != e.operator || (i.operator = e.operator, i.value = "", r = !0) : (i.operator = e.operator, i.start_date = e.startDate, i.end_date = e.endDate, i.value = "", r = !0) : 8 == e.operator || 9 == e.operator && "" === e.value ? (i.operator = e.operator, i.value = e.value, r = !0) : null != e.operator && null != e.value && e.value.length > 0 && (i.operator = e.operator, i.value = e.value, r = !0)
                                }
                                r && t.where.condition.filters.push(i)
                            }), t
                        }

                        function c(e) {
                            for (var t = angular.copy(l.lastParamData), a = t.where.condition.filters, i = 0, r = a.length; i < r; i++) a[i] && null == a[i].fid && a.splice(i, 1);
                            return a && a.length <= 0 && (t.where.where_linker = ""), t.sort = e, t
                        }

                        function u() {
                            t(function () {
                                var e = $("#J_table_filter").outerHeight() || 47,
                                    t = 0 + e;
                                t < 47 && (t = 47), $("#tb-detail").css("paddingTop", t)
                            }, 0)
                        }

                        function f(e) {
                            var t = $(e.target).parents(".J-table-filter-search:first"),
                                a = t.find(".J-table-filter-result:first");
                            pos = t.offset(), a.css({
                                position: "fixed",
                                top: pos.top + 24 + 4,
                                left: pos.left
                            })
                        }
                        l.operatorMapWithType = e, l.dateTimeByHalfHour = o;
                        var p = {
                                where: {
                                    where_type: "condition",
                                    where_linker: "and",
                                    sql: [],
                                    condition: {
                                        filters: [{
                                            value: null,
                                            operator: null,
                                            field: null,
                                            startDate: null,
                                            endDate: null,
                                            inputDisabled: !1
                                        }]
                                    }
                                },
                                sort: []
                            },
                            g = ["chart.selectDateRange", "isEmpty", "isNotEmpty"];
                        l.dateOperatorMap = [],
                            function () {
                                r(g).then(function (e) {
                                    l.dateOperatorMap.length = 0, l.dateOperatorMap.push({
                                        value: 10,
                                        name: e[g[0]]
                                    }), l.dateOperatorMap.push({
                                        value: 8,
                                        name: e[g[1]]
                                    }), l.dateOperatorMap.push({
                                        value: 9,
                                        name: e[g[2]]
                                    })
                                })
                            }();
                        var h = {
                                where: {
                                    where_linker: "and",
                                    where_type: "condition",
                                    condition: {
                                        filters: []
                                    }
                                },
                                sort: []
                            },
                            m = !0;
                        l.previewFilterData = angular.copy(p), l.$watch("resetPreviewFilterData.flag", function (e, t) {
                            e != t && s()
                        }), l.previewFilterAction = function () {
                            var e = d(l.previewFilterData);
                            e.where.condition.filters.length <= 0 && e.sort.length <= 0 && m || l.show_preview_data(e)
                        }, l.$on("last-param-change", function (e, t) {
                            m = !1, null == t && (t = angular.copy(h), m = !0), l.lastParamData = angular.copy(t)
                        }), l.lastParamData = angular.copy(h), l.$on("fire-change-sort", function (e, t, a) {
                            l.changeWorkTableSort(t, a)
                        }), l.changeWorkTableSort = function (e, t) {
                            l.previewFilterData.sort = [{
                                fid: e,
                                type: t
                            }], null != e && l.show_preview_data(c(l.previewFilterData.sort))
                        }, l.changeSelectField = function (t) {
                            var a = !0;
                            angular.forEach(l.previewData.origin_schema, function (e, i) {
                                t.field.fid == e.fid && (a = !1, t.field = angular.copy(e))
                            }), t.inputDisabled = !1, a ? t.field = null : "date" == l.fieldTypeMap[t.field.type] ? t.operator = l.dateOperatorMap[0].value : t.operator = e[l.fieldTypeMap[t.field.type]][0].value
                        }, l.addDefaultPreviewFilter = function () {
                            var e = l.previewFilterData.where.condition.filters,
                                t = e.length,
                                a = e[t - 1],
                                r = !1;
                            null != a.field && ("date" == l.fieldTypeMap[a.field.type] ? null == a.startDate && null == a.endDate && 8 != a.operator && 9 != a.operator || (r = !0) : null != a.operator && null != a.value && "" !== a.value && (r = !0), 8 != a.operator && 9 != a.operator || a.value || (r = !0)), r ? e.push(angular.copy(p.where.condition.filters[0])) : i(l.tips["wb.filterTip"]), u()
                        }, l.delPreviewFilter = function (e) {
                            var t = l.previewFilterData.where.condition.filters;
                            t.splice(e, 1), t.length <= 0 && t.push(angular.copy(p.where.condition.filters[0])), u()
                        }, l.$watch("workTableFilter.showIt", function (e, t) {
                            e !== t && u()
                        }), l.$watch("visibleFieldStatus.showFlag", function (e, t) {
                            e !== t && u()
                        }), l.$watch("workTableFilter.refreshCalculateFilter", function (e, t) {
                            e !== t && u()
                        }), l.$watch("visibleFieldStatus.refreshVisibleField", function (e, t) {
                            e !== t && u()
                        }), l.$on("updateConditionHeight", function () {
                            u()
                        }), l.filterChange = function (e) {
                            8 == e.operator || 9 == e.operator ? (e.value = "", e.endDate = null, e.startDate = null, e.inputDisabled = !0) : e.inputDisabled = !1
                        }, l.togglePrompt = {}, l.requestFilterItem = function (e, t, a) {
                            var i = !1;
                            "input" == a ? 13 == event.keyCode && (i = !0) : "click" == a && (i = !0), l.togglePrompt[t] = i, i && f(e)
                        }, l.dateRangShow = function (e) {
                            var t = [];
                            if (e.startDate && e.endDate && (t = [e.startDate, e.endDate]), !e.inputDisabled) {
                                var t = [e.startDate, e.endDate];
                                if (t[0] || t[1] || (t[0] = Highcharts.dateFormat("%Y-%m-%d", +new Date), t[1] = Highcharts.dateFormat("%Y-%m-%d", +new Date)), t.length > 1) {
                                    var a = t[0] ? t[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                        i = t[1] ? t[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                    t = t.concat([a, i])
                                } else 0 === t.length && (t = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                                n.open({
                                    template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                    className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                    data: {
                                        filterItem: e,
                                        range: t
                                    },
                                    scope: l
                                })
                            }
                        }, l.saveDateRange = function (e) {
                            var t = e.sDate ? Highcharts.dateFormat("%Y-%m-%d", new Date(e.sDate)) + " " + e.sDateHour : null,
                                a = e.eDate ? Highcharts.dateFormat("%Y-%m-%d", new Date(e.eDate)) + " " + e.eDateHour : null;
                            if (!t && !a) return i(l.tips["chart.dateRangeRequired"]), !1;
                            if (t && a) {
                                if (!e.sDateHour) return i(l.tips["filter.startDateErr2"]), !1;
                                if (!e.eDateHour) return i(l.tips["filter.endDateErr2"]), !1;
                                if (new Date(t) - new Date(a) > 0) return i(l.tips["filter.dateRangeInvalid"]), !1
                            } else {
                                if (t && !a && !e.sDateHour) return i(l.tips["filter.startDateErr2"]), !1;
                                if (!t && a && !e.eDateHour) return i(l.tips["filter.endDateErr2"]), !1
                            }
                            e.data.filterItem.startDate = t, e.data.filterItem.endDate = a, n.closeAll()
                        }, a(["wb.filterTip", "filter.dateRangeInvalid", "chart.dateRangeRequired", "filter.startDateErr2", "filter.endDateErr2"], l)
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("startEndDate", ["$timeout", "dateTimeByHalfHour", "errHint", "$jsTipTranslate", function (e, t, a, i) {
                return {
                    restrict: "A",
                    scope: {
                        startDate: "=",
                        endDate: "=",
                        dateRangShow: "=",
                        complete: "&"
                    },
                    templateUrl: "/static/js/worktable/preview/start-end-date.html",
                    link: function (r, n, o) {
                        function l(e) {
                            return Highcharts.dateFormat("%Y-%m-%d", e)
                        }
                        if (r.dateTimeByHalfHour = t, r.range = [r.startDate, r.endDate], r.range.length > 1) {
                            var s = r.range[0] ? r.range[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                d = r.range[1] ? r.range[1].split(" ")[1] || "23:59:59" : "23:59:59";
                            r.range[0] || r.range[1] || (r.range[0] = l(new Date), r.range[1] = l(new Date)), r.range = r.range.concat([s, d])
                        }
                        r.$watch("startDate", function (e, t) {
                            null === e && null === r.endDate && (r.range = [l(new Date), l(new Date), "00:00:00", "23:59:59"])
                        }), r.$watch("endDate", function (e, t) {
                            null === e && null === r.startDate && (r.range = [l(new Date), l(new Date), "00:00:00", "23:59:59"])
                        }), r.sure = function () {
                            var t = r.start_date ? l(new Date(r.start_date)) + " " + r.start_date_hour : null,
                                i = r.end_date ? l(new Date(r.end_date)) + " " + r.end_date_hour : null;
                            if (!t && !i) return a(r.tips["chart.dateRangeRequired"]), r.dateRangShow = !0, !1;
                            if (t && i) {
                                if (!r.start_date_hour) return a(r.tips["filter.startDateErr2"]), r.dateRangShow = !0, !1;
                                if (!r.end_date_hour) return a(r.tips["filter.endDateErr2"]), r.dateRangShow = !0, !1;
                                if (new Date(t) - new Date(i) > 0) return a(r.tips["filter.dateRangeInvalid"]), r.dateRangShow = !0, !1
                            } else {
                                if (t && !i && !r.start_date_hour) return a(r.tips["filter.startDateErr2"]), r.dateRangShow = !0, !1;
                                if (!t && i && !r.end_date_hour) return a(r.tips["filter.endDateErr2"]), r.dateRangShow = !0, !1
                            }
                            r.startDate = t, r.endDate = i, r.complete && e(function () {
                                r.complete()
                            }, 0)
                        }, i(["filter.dateRangeInvalid", "chart.dateRangeRequired", "filter.startDateErr2", "filter.endDateErr2"], r)
                    }
                }
            }]),
            function () {
                function e(e, t, a, i, r, n, o, l, s, d, c, u) {
                    function f(t) {
                        function a(e) {
                            return e.map(function (e) {
                                e.title = e.nick_name
                            }), e
                        }

                        function i() {
                            for (var t, a = 0; a < e.unionTablesSql.length; a++)
                                if (e.unionTablesSql[a].open) {
                                    t = a;
                                    break
                                }
                            return t
                        }
                        var r = [];
                        e.union_tables.map(function (e, t) {
                            fieldList = a(e.origin_fields);
                            var n = {
                                tb_id: e.dstb_id || e.tb_id,
                                name: e.title || e.name,
                                fields: fieldList
                            };
                            t == i() && (n.open = !0), r.push(n)
                        }), e.unionTablesSql = r, e.initUnionTableSql || (e.initUnionTableSql = !0, s(function () {
                            e.$broadcast("initTbList")
                        }, 1e3)), t && s(function () {
                            e.$broadcast("updateTbList")
                        }, 10)
                    }

                    function p(a, i) {
                        for (var r = a[0].length, o = a.length, l = []; r--;) {
                            for (var s = !0, d = 0; d < o; d++)
                                if (a[d][r] && a[d][r].fid) {
                                    s = !1;
                                    break
                                }
                            if (s) {
                                if (i.history[r]) {
                                    if (void 0 === i.history[r].can_del) {
                                        l.push({
                                            index: r,
                                            field_id: i.history[r].field_id
                                        });
                                        continue
                                    }
                                    continue
                                }
                                for (d = 0; d < o; d++) a[d].splice(r, 1)
                            }
                        }
                        l.length > 0 && function (i) {
                            t.pageLoading = !0, e.requestDone = !1;
                            var r = angular.copy(e.union_tables_thead),
                                o = angular.copy(e.union_tables);
                            if (angular.forEach(l, function (e) {
                                    for (d = 0; d < i; d++) o[d].selected_fields.splice(e.index, 1);
                                    r.current.splice(e.index, 1)
                                }), "modify" == e.model) void w(o, e.union_table_name, e.save_folder.folder_id, r).then(function (r) {
                                if (e.requestDone = !0, 0 == r.status) {
                                    var o = r.result.can_del;
                                    1 == o || 2 == o ? angular.forEach(l, function (t) {
                                        e.union_tables_thead.history[t.index].can_del = !0
                                    }) : (angular.forEach(r.result.dependency, function (t) {
                                        angular.forEach(l, function (a) {
                                            t.fid == a.field_id && (e.union_tables_thead.history[a.index].can_del = !1)
                                        })
                                    }), angular.forEach(l, function (t) {
                                        0 != e.union_tables_thead.history[t.index].can_del && (e.union_tables_thead.history[t.index].can_del = !0)
                                    }));
                                    for (var s = e.union_tables_thead.history.length - 1; s >= 0; s--)
                                        if (1 == e.union_tables_thead.history[s].can_del)
                                            for (e.union_tables_thead.current.splice(s, 1), e.union_tables_thead.history.splice(s, 1), d = 0; d < i; d++) a[d].splice(s, 1);
                                    t.pageLoading = !1
                                } else 40002 == Number(r.status) && n(r.errstr ? e.tips["error.fieldRepeat"] + ":" + r.errstr : Number(r.status)), t.pageLoading = !1
                            })
                        }(o)
                    }

                    function g() {
                        for (var t = !0, a = 0, i = e.union_tables_thead.current.length; a < i; a++)
                            if ("" === e.union_tables_thead.current[a].title) {
                                t = !1;
                                break
                            }
                        return t
                    }

                    function h(t) {
                        var i = t && t.folder_list || [];
                        return e.searchingFolderAndTable = !0, a.folder.getStructureWithParam({
                            get_root: 1,
                            get_first: 1,
                            folder_list: i
                        }).then(function (t) {
                            function a(e) {
                                for (var t = 0; t < e.length; t++) {
                                    for (var i = 0, n = e[t].tb_list.length; i < n; i++)
                                        if (e[t].tb_list[i].tb_id == d.tbId) {
                                            e[t].tb_list.splice(i, 1), r = !0;
                                            break
                                        }!r && e[t].sub_folders && e[t].sub_folders.length > 0 && a(e[t].sub_folders)
                                }
                            }
                            e.searchingFolderAndTable = !1;
                            var i = angular.element(".J-search-worktable-input").find("input");
                            if (i && i.val()) return !1;
                            if (t = t.result.folder_list, d.tbId) {
                                var r = !1;
                                a(t)
                            }
                            e.original_folderList = angular.copy(t), e.saveFolderList = angular.copy(t), angular.forEach(e.saveFolderList, function (e) {
                                "folder_root" == e.folder_id && (e.name = "en" == $.cookie("locale") ? "Root" : "根目录")
                            });
                            var n = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.save_folder.folder_id);
                            e.save_folder.folder_name = n ? n.name : "", e.folderList = angular.copy(t), e.$broadcast("updatefolderList", e.folderList), e.initFolderName(), m(e.folderList), C()
                        })
                    }

                    function m(t) {
                        e.tableSplitData = null, e.tableSplitFolder.sectionFolderList = [];
                        var a = bdp.bdpTables.initTableSplitFunc(t, e.tableSplitData, "");
                        e.tableSplitFolder.sectionFolderList = a.sectionFolderList, e.tableSplitData = a.tableSplitData
                    }

                    function _(t, a) {
                        function i(t) {
                            for (var a = e.union_tables, i = 0; i < a.length; i++)
                                if (a[i].tb_id == t) return !0;
                            return !1
                        }
                        var r = t.map(function (e) {
                                var t = e.selected_fields.map(function (e) {
                                    return e.fid || ""
                                });
                                return {
                                    tb_id: e.tb_id,
                                    col_fid_list: t
                                }
                            }),
                            n = T(),
                            o = {
                                tb_list: r,
                                schema: a ? a.current : e.union_tables_thead.current,
                                where: {
                                    where_linker: n.where_linker,
                                    where_type: e.union_filter.where_type
                                }
                            };
                        if ("sql" == e.union_filter.where_type) {
                            var l = [];
                            angular.forEach(e.union_filter.sql, function (e, t) {
                                e && i(t) && l.push({
                                    tb_id: t,
                                    sql: e
                                })
                            }), o.where.sql = l
                        } else o.where.condition = {
                            filters: n.where
                        };
                        return o.empty_holder = k, o
                    }

                    function b(t) {
                        var a = _(t);
                        return o.preview(a).then(function (t) {
                            0 == Number(t.status) ? (t.result.data.length > 50 && (t.result.data = t.result.data.slice(0, 50)), e.previewData = t.result) : 30003 == Number(t.status) ? n(t.errstr) : 40002 == Number(t.status) && n(t.errstr ? e.tips["error.fieldRepeat"] + ":" + t.errstr : Number(t.status))
                        })
                    }

                    function v(t, a) {
                        var i = _(t);
                        return e.union_gen_fids && (i.gen_fids = e.union_gen_fids), o.modifyUnion(i, a, d.tbId)
                    }

                    function y(e, t, a) {
                        var i = _(e);
                        return o.union(i, t, a)
                    }

                    function w(t, a, i, r) {
                        var n = _(t, r);
                        return e.union_gen_fids && (n.gen_fids = e.union_gen_fids), o.modifyPreview(n, a, d.tbId, i)
                    }

                    function D(e) {
                        return !(!e.tb || !e.field || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && ("" == e.startDate || "" == e.endDate))
                    }

                    function F(e) {
                        if ("number" == e.field.data_type && 8 != e.operator && 9 != e.operator) {
                            if (isNaN(Number(e.value))) return !1;
                            if ("" === e.value) return !1;
                            e.value = Number(e.value)
                        }
                        return !0
                    }

                    function T() {
                        var t = angular.copy(e.union_filter);
                        return t.where = $.map(t.where, function (e, t) {
                            return 0 != t && D(e) && F(e) ? {
                                data_type: e.field.data_type,
                                fid: e.field.fid,
                                field: e.field.nick_name,
                                type: e.field.type,
                                operator: e.operator,
                                value: e.value,
                                tb_id: e.tb.tb_id,
                                tb_name: e.tb.title || e.tb.name,
                                start_date: e.startDate ? e.startDate : null,
                                end_date: e.endDate ? e.endDate : null
                            } : null
                        }), t
                    }

                    function S() {
                        if ("modify" == e.model) var t = e.union_tables_thead.history.length,
                            a = angular.copy(e.union_tables_thead.history);
                        else var t = 0,
                            a = [];
                        if (!(e.union_tables.length > 0)) return [];
                        for (var i = e.union_tables[0].selected_fields.length, r = e.union_tables.length; t < i; t++)
                            for (var n = 0; n < r && !a[t]; n++) e.union_tables[n].selected_fields.length > 0 && e.union_tables[n].selected_fields[t].fid && a.push({
                                type: e.fieldTypeMapForParam[e.union_tables[n].selected_fields[t].data_type],
                                title: e.union_tables[n].selected_fields[t].nick_name,
                                name: e.union_tables[n].selected_fields[t].name,
                                field_id: null
                            });
                        return a
                    }

                    function C() {
                        function t(t) {
                            e.paddingFieldsMap[t.tb_id] ? t.choosed = !0 : t.choosed = !1
                        }
                        angular.forEach(e.folderList, function (e) {
                            e.tb_list.map(t), e.sub_folders && e.sub_folders.length > 0 && angular.forEach(e.sub_folders, function (e) {
                                e.tb_list.map(t)
                            })
                        }), e.$broadcast("updatefolderList", e.folderList), L()
                    }

                    function L() {
                        function t(e, i, r) {
                            e.sub_folders && e.sub_folders.length > 0 && n(e.sub_folders, t), n(e.tb_list, a), 0 != e.tb_list.length || e.sub_folders && 0 != e.sub_folders.length || r.splice(i, 1), e.open = !0
                        }

                        function a(e, t, a) {
                            $.inArray(e.tb_id, r) == -1 && a.splice(t, 1)
                        }

                        function i() {
                            e.view.listView && e.$broadcast("updateList", e.view.choosedList)
                        }
                        if (e.view.choosedList = [], 0 == e.union_tables.length) return void i();
                        var r = function (e) {
                                var t = [];
                                return e.map(function (e) {
                                    t.push(e.tb_id)
                                }), t
                            }(e.union_tables),
                            n = bdp.utils.descMap,
                            o = angular.copy(e.folderList);
                        o && (n(o, t), e.view.choosedList = o, e.view.originChoosedList = angular.copy(o), i())
                    }
                    t.show_bdp_header = !1, e.union_tables = [], e.union_tables_thead = {
                        history: [],
                        current: []
                    }, e.union_filter = {
                        where_type: "condition",
                        where_linker: "and",
                        where: [{
                            tb: null,
                            field: null,
                            value: null,
                            operator: null
                        }],
                        sql: {}
                    }, e.tableSplitFolder = {
                        sectionFolderList: []
                    }, e.fullFolderList = [];
                    var k = void 0;
                    e.unionTablesSql = [], e.initUnionTableSql = !1, e.paddingFieldsMap = {}, e.union_table_name = "", e.tabView = !0, e.workdListView = "folderList", e.viewTip = "", e.save_folder = {
                        folder_id: $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root",
                        folder_name: ""
                    }, e.tableSplitData = null, e.batchTb = {}, e.view = {
                        preview: !1,
                        listView: 0
                    }, e.unionTableFt = {
                        open: !0,
                        tab: 1
                    }, e.requestDone = !0, e.fieldTypeMapForParam = {
                        number: 1,
                        string: 2,
                        date: 3
                    }, e.unionTableFt.tabFun = function (t, a) {
                        e.unionTableFt.tab = t, e.unionTableFt.open = !0, a.stopPropagation(), e.preview()
                    }, t.wsId || function () {
                        a.ds.tbList().then(function (t) {
                            0 == t.status && (e.dsTBList = t.result, e.original_dbList = angular.copy(t.result))
                        })
                    }(), e.toggleView = function () {
                        e.query = "", "folderList" == e.workdListView ? (e.workdListView = "dsTbList", e.viewTip = e.tips["wb.databaseView"], e.dsTBList = angular.copy(e.original_dbList)) : (e.workdListView = "folderList", e.viewTip = e.tips["wb.worktableView"], e.folderList = angular.copy(e.folderList))
                    };
                    var x = null;
                    e.dragStart = function (t, a, i, r, n) {
                        x = i, x.folderName = {
                            top: r || e.tips["extract.folderRoot"],
                            sub: n || ""
                        }, x.folderName.nearest = n || x.folderName.top
                    }, e.onDrop = function () {
                        var t = !1;
                        angular.forEach(e.union_tables, function (e) {
                            x.tb_id == e.tb_id && (t = !0)
                        }), t ? n(e.tips["union.batchAdded"]) : e.getTableFields(x.tb_id).then(function (t) {
                            x.origin_fields = t, e.showSelectFieldsDialog(x)
                        })
                    }, e.sortData = {}, e.sortFields = {
                        items: ".sort-field",
                        cursor: "move",
                        forceHelperSize: !0,
                        start: function (t, a) {
                            e.sortData.dragField = a.item.sortable.model, e.sortData.dragIndex = a.item.sortable.index, e.sortData.list = a.item.sortable.sourceModel, e.sortData.sortable = a.item.sortable, e.sortData.blockSort = !1
                        },
                        beforeStop: function (t, a) {
                            e.sortData.blockSort && e.sortData.sortable.cancel()
                        },
                        stop: function (t, a) {
                            e.buildFields(), e.union_tables_thead.current = S()
                        }
                    }, e.onDropToHelper = function (t, a) {
                        $(t.target).removeClass("empty-field-over"), e.sortData.list.splice(e.sortData.dragIndex, 1, {}), e.sortData.list.push(e.sortData.dragField), e.buildFields()
                    }, e.onDropToEmpty = function (t, a, i) {
                        e.sortData.list[e.sortData.dragIndex].fid != e.sortData.dragField.fid && (e.sortData.dragField = angular.copy(e.sortData.list[e.sortData.dragIndex])), $(t.target).removeClass("empty-field-over"), e.sortData.list[e.sortData.dragIndex] = e.sortData.list[i], e.sortData.list[i] = e.sortData.dragField, e.buildFields()
                    }, e.onDropOver = function (t, a) {
                        $(t.target).addClass("empty-field-over"), e.sortData.blockSort = !0
                    }, e.onDropOut = function (t, a) {
                        $(t.target).removeClass("empty-field-over"), e.sortData.blockSort = !1
                    }, e.addTable = function (t, a) {
                        a && (t = e.autoSortFields(t, a)), t.folderName = bdp.bdpTables.getFullFolderByTbId(e.folderList, t.tb_id), e.union_tables.push(t), f("add"), e.buildFields(), e.calculateTableNameWidth(), C()
                    }, e.autoSortFields = function (t, a) {
                        var i = e.union_tables,
                            r = e.baseFields;
                        if (0 == i.length) return t;
                        if (a) {
                            for (var n = [], o = 0, l = i.length; o < l; o++)
                                if (i[o].tb_id == a) {
                                    n = i[o].selected_fields;
                                    break
                                }
                            r = [], n.map(function (e) {
                                r.push(e.nick_name)
                            })
                        } else r = e.baseFields;
                        var s = [],
                            d = function () {
                                var e = [];
                                return r.map(function (t, a) {
                                    e[a] = {}
                                }), e
                            }(),
                            c = t.selected_fields;
                        return d.length = r.length, c.map(function (e) {
                            var t = $.inArray(e.nick_name, r);
                            t > -1 ? d[t] = e : s.push(e)
                        }), s.length == c.length ? t : (s.length > 0 && (d = d.concat(s)), t.selected_fields = d, t)
                    }, e.calculateTableNameWidth = function () {
                        var t = 0;
                        t = hz.cutString.getP(e.tips["union.workTableHeader"]), angular.forEach(e.union_tables, function (e) {
                            t = Math.max(t, hz.cutString.getP(e.title || e.name)), e.folderName && (t = Math.max(t, hz.cutString.getP(e.folderName.nearest || "")))
                        }), t += 30, t = Math.min(t, 125), s(function () {
                            $(".union-table-list .table-name").css("width", t)
                        }, 10)
                    }, e.buildFields = function () {
                        var t = {};
                        if (!e.union_tables.length) return void(e.union_tables_thead.current = S());
                        var a, i, r = e.union_tables[0].selected_fields.length,
                            n = [];
                        for (a = 1, i = e.union_tables.length; a < i; a++) r = Math.max(r, e.union_tables[a].selected_fields.length);
                        for (a = 0, i = e.union_tables.length; a < i; a++) {
                            var o = e.union_tables[a];
                            t[o.tb_id] = o.selected_fields;
                            for (var l = r - o.selected_fields.length; l > 0;) t[o.tb_id].push({}), l--;
                            n.push(t[o.tb_id])
                        }
                        e.union_tables_thead.current = S(), p(n, e.union_tables_thead), e.paddingFieldsMap = t
                    }, e.goTbPos = function (t) {
                        for (var a, i = 0, r = e.union_tables.length; i < r; i++)
                            if (e.union_tables[i].tb_id == t) {
                                a = i;
                                break
                            }
                        var n = $(".union-table-list > li.union_table_tbody")[a],
                            o = $(".union-table-list")[0],
                            l = o.clientHeight,
                            d = n.offsetTop + 50,
                            c = o.scrollTop;
                        if (c > d) return void(o.scrollTop = c - d - 50);
                        d > l && (o.scrollTop = d - l + 50), $(n).addClass("selected-found"), s(function () {
                            $(n).removeClass("selected-found")
                        }, 500)
                    }, e.showSelectFieldsDialog = function (t) {
                        var a = "";
                        t.folderName && (t.folderName.top = t.folderName.top || e.tips["extract.folderRoot"], a = t.folderName.sub ? t.folderName.top + "/" + t.folderName.sub : t.folderName.top), e.selectFieldsDialog = r.open({
                            template: "/static/js/worktable/union/union_select_fields_dialog.html",
                            className: "ngdialog-theme-default",
                            scope: e,
                            data: {
                                table: t,
                                tbTip: a + "/" + (t.title || t.name)
                            },
                            controller: "unionSelectFieldsCtrl"
                        })
                    }, e.showSelectTablesDialog = function (t) {
                        e.batchTb.addList = [], r.open({
                            template: "/static/js/worktable/union/union_select_table_dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-650",
                            scope: e,
                            data: {
                                unionTable: e.union_tables,
                                table: t
                            },
                            controller: "unionSelectTableCtrl"
                        })
                    }, e.deleteTable = function (t) {
                        for (var a = e.union_tables.splice(t, 1), i = e.union_filter.where.length - 1; i >= 0; i--) e.union_filter.where[i].tb && e.union_filter.where[i].tb.tb_id == a[0].tb_id && (0 == i ? e.union_filter.where.splice(i, 1, {
                            tb: null,
                            field: null,
                            value: null,
                            operator: null
                        }) : e.union_filter.where.splice(i, 1));
                        e.buildFields(), e.calculateTableNameWidth(), delete a[0].selected_fields, delete e.paddingFieldsMap[a[0].tb_id], C(), f("delete")
                    }, e.deleteAllTable = function () {
                        for (var t = e.union_tables.length - 1; t >= 0;) e.deleteTable(t), t--
                    }, e.back = function () {
                        function a() {
                            var e = "/data_source";
                            t.wsId && (e += "/" + t.wsId), i.path(e)
                        }
                        e.union_tables.length > 0 ? r.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            scope: e,
                            data: {
                                message: e.tips["join.confirmToBack"]
                            }
                        }).then(function () {
                            a()
                        }) : a()
                    }, e.preview = function () {
                        if (!e.union_tables.length) return e.previewData = void 0, void n(e.tips["union.AddWorkTableToPreview"]);
                        e.view.preview = !0, t.pageLoading = !0, b(e.union_tables).then(function () {
                            t.pageLoading = !1
                        })
                    }, e.saveTb = function () {
                        if (!g()) return void n(e.tips["union.workTableHeaderNotNull"]);
                        if (e.requestDone) {
                            if ("" == e.union_table_name) return n(e.tips["union.workSheetCanNotNull"]), !1;
                            if (e.union_tables.length < 1) return n(e.tips["union.atLeastOneWorksheet"]), !1;
                            t.pageLoading = !0;
                            var a = e.save_folder.folder_id;
                            e.requestDone = !1;
                            var o = angular.copy(e.union_tables_thead);
                            if ("modify" == e.model) return void w(e.union_tables, e.union_table_name, e.save_folder.folder_id, o).then(function (a) {
                                if (e.requestDone = !0, 0 == a.status) {
                                    var o = a.result.can_del;
                                    if (1 == o) v(e.union_tables, e.union_table_name).then(function (a) {
                                        0 == a.status ? t.wsId ? i.path("/data_source/" + t.wsId) : i.path("/data_source") : (40002 == Number(a.status) && n(a.errstr ? e.tips["error.fieldRepeat"] + ":" + a.errstr : Number(a.status)), t.pageLoading = !1)
                                    });
                                    else if (2 == o) t.wsId ? i.path("/data_source/" + t.wsId) : i.path("/data_source");
                                    else {
                                        e.responseHint = {
                                            dependency: a.result.dependency
                                        };
                                        var l = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                        angular.forEach(e.responseHint.dependency, function (e) {
                                            angular.forEach(e.chart, function (e) {
                                                e.ct_name || (e.ct_name = l)
                                            })
                                        }), r.open({
                                            template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                            className: "ngdialog-theme-default",
                                            scope: e
                                        }), t.pageLoading = !1
                                    }
                                } else n(40002 == Number(a.status) ? a.errstr ? e.tips["error.fieldRepeat"] + ":" + a.errstr : Number(a.status) : Number(a.status)), t.pageLoading = !1
                            });
                            y(e.union_tables, e.union_table_name, a).then(function (a) {
                                if (e.requestDone = !0, 0 == a.status) {
                                    var r = a.result.tb_id;
                                    $.cookie("ds_tb_id", r), t.wsId ? i.path("/data_source/" + t.wsId) : i.path("/data_source"), t.pageLoading = !1
                                } else 40002 == Number(a.status) && n(a.errstr ? e.tips["error.fieldRepeat"] + ":" + a.errstr : Number(a.status)), t.pageLoading = !1, $.cookie("ds_tb_id", r)
                            })
                        }
                    }, h();
                    d.tbId && (! function (a) {
                        function i(t) {
                            e.union_filter.where_linker = t.where_linker || "and", e.union_filter.where_type = t.where_type, "sql" == t.where_type ? function (t) {
                                var a, i = {};
                                angular.forEach(t, function (e, t) {
                                    i[e.tb_id] = e.sql, 0 == t && (a = e.tb_id)
                                }), e.union_filter.sql = i, s(function () {
                                    e.$broadcast("initSql", a)
                                }, 10)
                            }(t.sql) : function (t) {
                                angular.forEach(t, function (t) {
                                    var a, i;
                                    angular.forEach(e.union_tables, function (e) {
                                        t.tb_id == e.tb_id && (a = e)
                                    }), angular.forEach(a.origin_fields, function (e) {
                                        e.fid == t.fid && (i = e)
                                    }), e.union_filter.where.push({
                                        tb: a,
                                        field: i,
                                        value: t.value,
                                        operator: t.operator,
                                        startDate: t.start_date,
                                        endDate: t.end_date
                                    })
                                })
                            }(t.condition.filters)
                        }

                        function r(e, t) {
                            for (var a = 0, i = e.length; a < i; a++)
                                if (e[a].fid == t) return e[a];
                            return null
                        }
                        t.pageLoading = !0, l.get("/api/tb/model_struct", {
                            tb_id: a
                        }).then(function (a) {
                            if (t.pageLoading = !1, 0 == a.status) {
                                var n = a.result;
                                e.union_tables = [], angular.forEach(n.table.fields, function (t) {
                                    t.flag || e.union_tables_thead.history.push({
                                        field_id: t.field_id,
                                        title: t.title,
                                        name: t.name,
                                        type: t.type
                                    })
                                }), e.union_tables_thead.current = angular.copy(e.union_tables_thead.history), k = n.empty_holder, angular.forEach(n.info, function (t) {
                                    t.origin_fields = t.fields.map(function (e) {
                                        return e.nick_name = e.title, e
                                    });
                                    var a = t.selected_fields = [];
                                    angular.forEach(t.col_fid_list, function (e) {
                                        e ? a.push(r(t.fields, e)) : a.push({})
                                    }), e.union_tables.push(t)
                                }), n.hasOwnProperty("gen_fids") && (e.union_gen_fids = n.gen_fids), e.union_table_name = n.table.title, e.buildFields(), e.initFolderName(), s(function () {
                                    e.calculateTableNameWidth()
                                }, 10), C(), f(), i(n.where)
                            }
                        })
                    }(d.tbId), e.model = "modify"), e.initFolderName = function () {
                        e.fullFolderList && e.fullFolderList.length > 0 ? e.union_tables.map(function (t) {
                            t.folderName = bdp.bdpTables.getFullFolderByTbId(e.fullFolderList, t.tb_id)
                        }) : a.folder.getList().then(function (t) {
                            t && (e.fullFolderList = angular.copy(t), e.union_tables.map(function (t) {
                                t.folderName = bdp.bdpTables.getFullFolderByTbId(e.fullFolderList, t.tb_id)
                            }))
                        })
                    }, e.$on("regainFolderList", function () {
                        h({
                            folder_list: bdp.bdpTables.getOpenedFolderLists(e.folderList)
                        })
                    }), e.$on("initTableSplit", function (t, a) {
                        a && (a.pos && "top" == a.pos ? (m(e.folderList), s(function () {
                            angular.element(".J-table-list > ul")[0].scrollTop = 0, angular.element(".J-list-go-top").css("display", "none")
                        }, 0)) : m(a.folderList, a.noDefault))
                    }), e.getTableFields = function (e) {
                        return a.db.getField(e).then(function (e) {
                            return e.columns
                        })
                    }, e.getWorktable = function (t, i) {
                        return !t.unfolded && t.open !== !1 && 0 == t.tb_list.length && t.mark !== !1 && (t.mark && t.sub_folders && t.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), i && i.stopPropagation(), t.loadingWorktables = !0, a.folder.getWorktable({
                            folder_id: t.folder_id
                        }).then(function (a) {
                            t.loadingWorktables = !1, e.folderList.forEach(function (e) {
                                e.folder_id == t.folder_id && 0 == e.tb_list.length && (a.result.forEach(function (t) {
                                    e.tb_list.push(t)
                                }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                    i.folder_id == t.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, e.open = !0)
                                })
                            }), C()
                        }))
                    }, e.showSelectFolder = function () {
                        r.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: e,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                tbType: "union",
                                optType: "baseChoose",
                                folderList: e.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderId: e.save_folder.folder_id || "folder_root",
                                targetFolderType: "",
                                queryText: "",
                                open: {},
                                confirmSave: e.saveSelectFolder,
                                loadingDirectory: !0
                            },
                            controller: "chooseTbFolderCtrl"
                        })
                    }, e.saveSelectFolder = function (t) {
                        e.save_folder.folder_id = t.targetFolderId;
                        var a = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.save_folder.folder_id);
                        e.save_folder.folder_name = a ? a.name : "", r.closeAll()
                    }, c(["join.optionsCanNotNull", "union.workSheetCanNotNull", "union.needTwoSheetToUnion", "union.AddWorkTableToPreview", "error.fieldRepeat", "union.doNotSubmitRepeat", "union.saveSuccess", "union.saveFailed", "union.atLeastOneWorksheet", "wb.databaseView", "wb.worktableView", "extract.folderRoot", "union.batchAdded", "union.workTableHeader", "union.workTableHeaderNotNull", "join.confirmToBack"], e)
                }

                function t(e, t, a, i) {
                    function r(e) {
                        for (var t in e)
                            if (e.hasOwnProperty(t))
                                for (var a = e[t], i = 0, r = a.length; i < r; i++)
                                    if (!a[i].check) return !1;
                        return !0
                    }

                    function n(e) {
                        var t = [];
                        return angular.forEach(e, function (e) {
                            t = t.concat(e)
                        }), t
                    }
                    e.fields = function (e) {
                        var t = {},
                            a = e.selected_fields;
                        return angular.forEach(e.origin_fields, function (e) {
                            var i = !a || angular.indexOf(a, e) > -1;
                            e.check = i;
                            var r = e.data_type;
                            t[r] ? t[r].push(e) : t[r] = [e]
                        }), t
                    }(e.ngDialogData.table), e.selectAll = r(e.fields), e.confirm = function (t) {
                        function a(e, t) {
                            for (var a = 0, i = e.length; a < i; a++)
                                if (e[a].fid == t) return a;
                            return -1
                        }
                        var r = e.ngDialogData.table.selected_fields,
                            o = n(e.fields),
                            l = function (e) {
                                var t = [];
                                return angular.forEach(e, function (e) {
                                    e.check && t.push(e.fid)
                                }), t
                            }(o);
                        if (0 == l.length) return i(e.tips["union.selectFields"]), !1;
                        if (r) angular.forEach(o, function (e) {
                            var t = a(r, e.fid);
                            t < 0 && e.check ? r.push(e) : t > -1 && !e.check && (r[t] = {})
                        }), e.buildFields();
                        else {
                            if (r = [], angular.forEach(e.ngDialogData.table.origin_fields, function (e) {
                                    angular.indexOf(l, e.fid) > -1 && r.push(e)
                                }), r.length < e.union_tables_thead.history.length)
                                for (var s = r.length; s < e.union_tables_thead.history.length; s++) r.push({});
                            e.ngDialogData.table.selected_fields = r, e.addTable(e.ngDialogData.table), e.global.clickComplete = !0
                        }
                        e.selectFieldsDialog.close(), "batch" == t && e.showSelectTablesDialog(e.ngDialogData.table)
                    }, e.onSelectAllChange = function () {
                        for (var t = e.ngDialogData.table.origin_fields, a = 0, i = t.length; a < i; a++) t[a].check = e.selectAll
                    }, e.onSelectChange = function (t) {
                        e.selectAll = !!t && r(e.fields)
                    }, t(["union.selectFields", "join.worksheetname", "nameInvalid", "error.fieldRepeat"], e)
                }

                function a(e, t, a, i, r, n) {
                    function o() {
                        function t(e) {
                            angular.forEach(e, function (e) {
                                angular.forEach(e.tb_list, function (e) {
                                    b[e.tb_id] && (e.origin_fields = b[e.tb_id])
                                }), e.sub_folders && e.sub_folders.length > 0 && t(e.sub_folders)
                            })
                        }
                        t(e.batchTb.folderList)
                    }

                    function l(t, a) {
                        function i(n, o) {
                            angular.forEach(n, function (n) {
                                angular.forEach(n.tb_list, function (i) {
                                    i.tb_id == t && (i.selected_fields = a, i.folderName = n.name ? n.name : e.tips["extract.folderRoot"], i.folderName = o ? o + "/" + i.folderName : i.folderName, e.addTable(i, m), r = !0)
                                }), !r && n.sub_folders && n.sub_folders.length > 0 && i(n.sub_folders, n.name)
                            })
                        }
                        var r = !1;
                        i(e.batchTb.folderList, "")
                    }

                    function s(e) {
                        var t = [],
                            a = [],
                            i = [];
                        return angular.forEach(v, function (e) {
                            i.push(0)
                        }), angular.forEach(e, function (e) {
                            var a = $.inArray(e.nick_name, v);
                            a > -1 && (i[a] = 1, t.push(e))
                        }), angular.forEach(i, function (e, t) {
                            e || a.push(v[t])
                        }), {
                            selected: t,
                            lack: a
                        }
                    }

                    function d(t, a) {
                        var i = s(t.origin_fields),
                            r = e.tips["union.missFieldsTips1"];
                        r += i.lack.slice(0, 3).join(","), i.lack.length > 3 && (r += e.tips["union.missFieldsTips2"] + " " + i.lack.length + " " + e.tips["union.missFieldsTips3"]), a.top = a.top || e.tips["extract.folderRoot"];
                        var n = a.sub ? a.top + "/" + a.sub : a.top;
                        e.batchTb.addList.push({
                            tb_id: t.tb_id,
                            name: t.title || t.name,
                            folderName: n,
                            type: t.type,
                            tb_type: t.tb_type,
                            selected: i.selected,
                            lack: i.lack,
                            lackTip: r,
                            emptyTip: e.tips["union.unMatchField"]
                        }), f(t.tb_id, !0), c()
                    }

                    function c() {
                        var t = e.batchTb.addList,
                            a = 0,
                            i = 0;
                        angular.forEach(t, function (e) {
                            0 == e.selected.length && a++, e.lack.length > 0 && e.selected.length > 0 && i++
                        }), e.batchTb.emptyNum = a, e.batchTb.lackNum = i
                    }

                    function u(t) {
                        for (var a = e.union_tables, i = e.batchTb.addList, r = 0, n = a.length; r < n; r++)
                            if (a[r].tb_id == t) return !0;
                        if (0 == i.length) return !1;
                        for (var r = 0, n = i.length; r < n; r++)
                            if (i[r].tb_id == t) return !0;
                        return !1
                    }

                    function f(t, a) {
                        function i(e) {
                            angular.forEach(e, function (e) {
                                e.sub_folders && e.sub_folders.length > 0 && i(e.sub_folders), e.tb_list.length > 0 && r(e.tb_list)
                            })
                        }

                        function r(e) {
                            angular.forEach(e, function (e) {
                                e.tb_id == t && (e.choosed = a)
                            })
                        }
                        e.batchTb.folderList;
                        i(e.batchTb.folderList), i(e.folderList)
                    }

                    function p(e) {
                        return r.tb.getTbsField({
                            dstb_ids: angular.toJson(e)
                        })
                    }
                    e.batchTb.view = "list";
                    var g = e.ngDialogData.table.selected_fields,
                        h = e.ngDialogData.table,
                        m = e.ngDialogData.table.tb_id,
                        _ = e.ngDialogData.unionTable,
                        b = {};
                    e.batchTb.lackNum = 0, e.batchTb.emptyNum = 0, e.batchTb.folderList = angular.copy(e.saveFolderList), e.batchTb.addList.push({
                            tb_id: h.tb_id,
                            name: h.title || h.name,
                            folderName: h.folderName.sub ? h.folderName.top + "/" + h.folderName.sub : h.folderName.top,
                            type: h.type,
                            tb_type: h.tb_type,
                            selected: h.selected_fields,
                            lack: [],
                            added: !0
                        }), e.batchTb.folderListLoading = !0,
                        function () {
                            e.batchTb.folderListLoading = !1, r.folder.getList().then(function (t) {
                                t && (e.allFolderList = angular.copy(t), e.batchTb.folderList = t), e.batchTb.folderListLoading = !0
                            })
                        }();
                    var v = function () {
                        var e = [];
                        return angular.forEach(g, function (t) {
                            t.nick_name && e.push(t.nick_name)
                        }), e
                    }();
                    e.batchTb.addTb = function (a, r) {
                        if (!t.pageLoading) {
                            if (u(a.tb_id)) return void i(e.tips["union.batchAdded"]);
                            t.pageLoading = !0, a.origin_fields ? (d(a, r), t.pageLoading = !1) : e.getTableFields(a.tb_id).then(function (e) {
                                a.origin_fields = e, d(a, r), b[a.tb_id] = a.origin_fields, o(), t.pageLoading = !1
                            })
                        }
                    }, e.batchTb.addAllTb = function () {
                        function t(e, a) {
                            e.map(function (e) {
                                folderName = e.name, e.tb_list.map(function (t) {
                                    if (!u(t.tb_id)) {
                                        var i = {
                                            top: "",
                                            sub: ""
                                        };
                                        a ? (i.sub = e.name, i.top = a) : i.top = e.name, t.folderName = i, r.push(t), n.push(t.tb_id)
                                    }
                                }), e.sub_folders && e.sub_folders.length > 0 && t(e.sub_folders, folderName)
                            })
                        }

                        function a(e) {
                            r.map(function (t) {
                                t.origin_fields = e[t.tb_id].columns, d(t, t.folderName)
                            })
                        }
                        var r = [],
                            n = [],
                            o = null;
                        if (t(e.batchTb.folderList, ""), 0 == r.length) return void i(e.tips["union.batchAdded"]);
                        e.batchTb.loading || (e.batchTb.loading = !0, p(n).then(function (t) {
                            0 == t.status && (o = t.result, a(o)), e.batchTb.loading = !1
                        }))
                    }, e.batchTb.delTb = function (t, a) {
                        e.batchTb.addList.splice(a, 1), f(t.tb_id, !1), c()
                    }, e.batchTb.delAll = function () {
                        for (var t = e.batchTb.addList, a = 1, i = t.length; a < i; a++) f(t[a].tb_id, !1);
                        t.length = 1, c()
                    }, e.batchTb.resetTb = function () {
                        var t = [];
                        angular.forEach(_, function (e) {
                            t.push(e.tb_id)
                        }), angular.forEach(e.batchTb.addList, function (e) {
                            t.indexOf(e.tb_id) < 0 && f(e.tb_id, !1)
                        })
                    }, e.batchTb.comfirm = function () {
                        if (e.batchTb.emptyNum > 0) return i(e.tips["union.unMatchFieldTip"]), void(t.global.clickComplete = !0);
                        angular.forEach(e.batchTb.addList, function (e, t) {
                            t > 0 && l(e.tb_id, e.selected)
                        }), n.closeAll()
                    }, e.$on("$destroy", function () {
                        b = null
                    }), a(["error.fieldRepeat", "union.batchAddLimit", "union.batchAdded", "union.unMatchField", "extract.folderRoot", "union.missFieldsTips1", "union.missFieldsTips2", "union.unMatchFieldTip", "union.missFieldsTips3", "sql.previewErrInfo1", "sql.previewErrInfo2"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("UnionTableCtrl", e)
                .controller("unionSelectFieldsCtrl", t)
                .controller("unionSelectTableCtrl", a), 
                e.$inject = [
                    "$scope", "$rootScope", "commonService", "$location", "ngDialog", "errHint", 
                    "unionService", "commonHttp", "$timeout", "$stateParams", "$jsTipTranslate", "verifyTbName"], 
                    t.$inject = ["$scope", "$jsTipTranslate", "ngDialog", "errHint"], 
                    a.$inject = ["$scope", "$rootScope", "$jsTipTranslate", "errHint", "commonService", "ngDialog"]
            }(),
            function () {
                function e(e, t) {
                    return {
                        status: function (e) {
                            return t.get("/api/wb/status", {
                                task_id: e
                            }).then(function (e) {
                                return e
                            })
                        },
                        valid: function (e, a) {
                            return t.get("/api/data_union/valid", {
                                base_tb_id: e,
                                union_tb_id: a
                            }).then(function (e) {
                                return e
                            })
                        },
                        preview: function (e) {
                            return t.post("/api/data_union/preview", {
                                union_info: angular.toJson(e)
                            }).then(function (e) {
                                return e
                            })
                        },
                        union: function (e, a, i) {
                            return t.post("/api/data_union/union", {
                                union_info: angular.toJson(e),
                                table_name: a,
                                folder_id: i
                            }).then(function (e) {
                                return e
                            })
                        },
                        modifyUnion: function (e, a, i) {
                            return t.post("/api/data_union/modify", {
                                union_info: angular.toJson(e),
                                table_name: a,
                                tb_id: i
                            }).then(function (e) {
                                return e
                            })
                        },
                        modifyPreview: function (e, a, i, r) {
                            return t.post("/api/data_union/modify_preview", {
                                info: angular.toJson(e),
                                table_name: a,
                                tb_id: i,
                                folder_id: r
                            }).then(function (e) {
                                return e
                            })
                        },
                        tableUnionPreview: function (e, a, i, r, n) {
                            return t.post("/api/chart/table_union_preview", {
                                info: angular.toJson(e),
                                table_name: a,
                                tb_id: i,
                                folder_id: r,
                                check_dimension: n
                            }).then(function (e) {
                                return e
                            })
                        }
                    }
                }
                angular.module("BC.controllers.dataSource")
                .factory("unionService", e), 
                e.$inject = ["$http", "commonHttp"]
            }(), 
            angular.module("BC.controllers.dataSource")
            .directive("unionFilter", ["errHint", "$jsTipTranslate", "filterOperatorMapWithType", "ngDialog", "dateTimeByHalfHour", function (e, t, a, i, r) {
                return {
                    restrict: "A",
                    scope: !0,
                    templateUrl: "/static/partials/union_filter.html",
                    replace: !0,
                    link: function (n) {
                        function o() {
                            return {
                                tb: null,
                                field: null,
                                value: null,
                                operator: null,
                                startDate: null,
                                endDate: null
                            }
                        }

                        function l(e) {
                            return !(!e.tb || !e.field || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && !e.startDate && !e.endDate)
                        }

                        function s(e) {
                            if ("number" == e.field.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                                if (isNaN(Number(e.value))) return !1;
                                if ("" === e.value) return !1;
                                e.value = Number(e.value)
                            }
                            return !0
                        }

                        function d(e) {
                            return Highcharts.dateFormat("%Y-%m-%d", e)
                        }
                        n.$watch("union_tables", function (e, t) {
                            e && angular.forEach(e, function (e) {
                                e.folderName && e.folderName.nearest ? e.textForFilter = (e.title || e.name) + "(" + e.folderName.nearest + ")" : e.textForFilter = e.title || e.name
                            })
                        }, !0), n.filterData = n.union_filter, n.operatorMap = a, n.dateTimeByHalfHour = r, n.tableSelectChange = function (e) {
                            e.tb ? (e.field = null, e.value = null, e.operator = null) : e = o()
                        }, n.fieldSelectChange = function (e) {
                            "date" == e.field.data_type ? (e.operator = 10, e.value = "", e.startDate = null, e.endDate = null) : (e.operator = 0, e.startDate = null, e.endDate = null, e.value = null)
                        }, n.operatorChange = function (e) {
                            8 != e.operator && 9 != e.operator && 10 != e.operator || (e.value = ""), 10 != e.operator && (e.startDate = null, e.endDate = null)
                        }, n.selectWhere = function (t) {
                            l(t) ? s(t) ? n.filterData.where.unshift(o()) : e(n.tips["error.filterValueError"] + "：" + t.value) : e(n.tips["join.optionsCanNotNull"]), n.currentItem = o()
                        }, n.delWhereFun = function (e) {
                            n.filterData.where.splice(e, 1)
                        }, n.dateRangeShow = function (e) {
                            var t = [e.startDate, e.endDate];
                            if (t[0] || t[1] || (t[0] = Highcharts.dateFormat("%Y-%m-%d", +new Date), t[1] = Highcharts.dateFormat("%Y-%m-%d", +new Date)), t.length > 1) {
                                var a = t[0] ? t[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                    r = t[1] ? t[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                t = t.concat([a, r])
                            } else 0 === t.length && (t = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                            i.open({
                                template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                data: {
                                    filterItem: e,
                                    range: t
                                },
                                scope: n
                            })
                        }, n.saveDateRange = function (t) {
                            var a = t.sDate ? d(new Date(t.sDate)) + " " + t.sDateHour : null,
                                r = t.eDate ? d(new Date(t.eDate)) + " " + t.eDateHour : null;
                            if (!a && !r) return e(n.tips["chart.dateRangeRequired"]), !1;
                            if (a && r) {
                                if (!t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                if (!t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1;
                                if (new Date(a) - new Date(r) > 0) return e(n.tips["filter.dateRangeInvalid"]), !1
                            } else {
                                if (a && !r && !t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                if (!a && r && !t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1
                            }
                            t.data.filterItem.startDate = a, t.data.filterItem.endDate = r, i.closeAll()
                        }, t(["join.optionsCanNotNull", "error.filterValueError", "chart.dateRangeRequired", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2"], n)
                    }
                }
            }]),
            function () {
                angular.module("BC.controllers.dataSource")
                .controller("joinTableController", [
                    "$scope", "$rootScope", "$http", "$location", "$timeout", "errHint", 
                    "commonHttp", "commonService", "$stateParams", "ngDialog", "$jsTipTranslate", "verifyTbName", "$q", "$translate", function (e, t, a, i, r, n, o, l, s, d, c, u, f, p) {
                    function g() {
                        r(function () {
                            e.goJsReady.join = !0, s.tbId && (e.joinViewData.isEdit = !0, D(s.tbId))
                        }, 0), window.GOJS = "GOJS"
                    }

                    function h(t, a) {
                        function i(e, t, a) {
                            for (var i = "from" == a ? 0 : 1, r = 0, n = t.length; r < n; r++)
                                if (t[r].join_field[i] == e) return !0;
                            return !1
                        }
                        for (var r = e.diagram.model.linkDataArray, n = 0, o = r.length; n < o; n++)
                            if (r[n].from == t) {
                                if (i(a, r[n].join_fields, "from")) return !0
                            } else if (r[n].to == t && i(a, r[n].join_fields, "to")) return !0;
                        return !1
                    }

                    function m(t) {
                        if (!t.length) {
                            if (1 == e.diagram.model.nodeDataArray.length) return e.diagram.model.nodeDataArray[0].key;
                            throw new Error("diagram model unnormal!! no links, nodes.length != 1")
                        }
                        var a = {};
                        t.forEach(function (e) {
                            a[e.from] = !1, 0 != a[e.to] && (a[e.to] = !0)
                        });
                        for (var i in a)
                            if (1 == a[i]) return i
                    }

                    function _(t) {
                        var a = angular.copy(e.diagram.model.nodeDataArray);
                        a.forEach(function (t, a, i) {
                            t.tb_id == e.target_id && i.splice(a, 1)
                        });
                        var i = {
                                fields: t.result.columns,
                                key: t.result.tb_id,
                                tb_id: t.result.tb_id,
                                name: t.result.tb_name
                            },
                            r = null;
                        (r = s.tbId ? E(e.src_tb.tb_id, i, "modify", "isRepeat") : E(e.src_tb.tb_id, i)) && r.then(function () {
                            delete e.selectedTbs[e.target_id], a.push(i), e.dragOption.diagram_nodes = a;
                            var r = angular.copy(e.diagram.model.linkDataArray);
                            r.forEach(function (a) {
                                var i = {},
                                    r = {},
                                    n = 0;
                                if (a.from == e.target_id && (a.from = t.result.tb_id, n = 1), a.to == e.target_id && (a.to = t.result.tb_id, n = 1), 1 == n) {
                                    var o = 0;
                                    e.fieldsMap[a.from].forEach(function (t) {
                                        e.fieldsMap[a.to].forEach(function (e) {
                                            e.original_nick_name == t.original_nick_name && 0 == o && (i.id = t.fid, i.name = t.original_nick_name, r.id = e.fid, r.name = e.original_nick_name, o = 1)
                                        })
                                    }), 0 == o && (i.id = e.fieldsMap[a.from][0].fid, i.name = e.fieldsMap[a.from][0].original_nick_name, r.id = e.fieldsMap[a.to][0].fid, r.name = e.fieldsMap[a.to][0].original_nick_name), a.join_fields = [{
                                        join_field: [i.id, r.id],
                                        name: [i.name, r.name]
                                    }]
                                }
                            }), e.$broadcast("InitializeCurItem");
                            var o = [];
                            if (e.joinViewData.where.condition.filters.forEach(function (t) {
                                    t.tb_id != e.target_id && o.push(t)
                                }), e.joinViewData.where.condition.filters = o, e.diagram.model.nodeDataArray = angular.copy(a), e.diagram.model.linkDataArray = angular.copy(r), e.$broadcast("updateTbList"), J("preview"), e.joinViewData.tables) {
                                var l = [],
                                    s = {};
                                e.joinViewData.tables.forEach(function (t) {
                                    t.tb_id == e.src_tb.tb_id && (t.checkAll = !0), t.fields.forEach(function (a) {
                                        e.targetNodeInfo.fields.forEach(function (i) {
                                            a.nick_name == i.original_nick_name && t.tb_id == e.src_tb.tb_id && (s[a.fid] = i.nick_name)
                                        }), t.tb_id == e.src_tb.tb_id && (a.check = !0), l.push(a)
                                    })
                                }), e.joinViewData.tables.forEach(function (e) {
                                    e.fields.forEach(function (e) {
                                        s[e.fid] && (e.original_nick_name = e.nick_name, e.nick_name = s[e.fid])
                                    })
                                }), e.joinViewData.field = l, e.joinViewData.isEdit && (e.original_tb_mapping[e.original_target_id] = e.src_tb.tb_id), n(e.tips["join.replaceSuccess"])
                            }
                        })
                    }

                    function b(t) {
                        e.joinViewData.showGuide = t, t || localStorage.setItem(de, 1)
                    }

                    function v() {
                        if (localStorage.getItem(de)) return !1;
                        for (var t = 0, a = e.folderList.length; t < a; t++)
                            for (var i = 0, r = e.folderList[t].tb_list.length; i < r; i++) {
                                var n = e.folderList[t].tb_list[i];
                                if ("join" == n.type) return !1
                            }
                        return !0
                    }

                    function y() {
                        e.diagram.model.nodeDataArray.length ? d.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            scope: e,
                            data: {
                                message: e.tips["join.confirmToBack"]
                            }
                        }).then(function () {
                            w()
                        }) : w()
                    }

                    function w() {
                        t.wsId ? i.path("/data_source/" + t.wsId) : i.path("/data_source")
                    }

                    function D(t) {
                        e.joinViewData.mainLoading = !0, o.get("/api/tb/model_struct", {
                            tb_id: t
                        }).then(function (t) {
                            if (0 == t.status) {
                                var a = t.result,
                                    i = a.info;
                                e.originalNodeDataArray = t.result.info.nodeDataArray, e.tableInfo.table_name = a.table_name, e.original_tb_mapping = {}, i.nodeDataArray.forEach(function (t) {
                                    e.original_tb_mapping[t.tb_id] = t.tb_id
                                }), e.fieldsMap = {}, e.modifyInfo = {
                                    fields: {},
                                    info: {
                                        nodeDataArray: i.nodeDataArray,
                                        linkDataArray: i.linkDataArray
                                    }
                                };
                                var r = i.nodeDataArray.map(function (t) {
                                    return e.modifyInfo.fields[t.tb_id] = [], angular.forEach(t.fields, function (a) {
                                        e.modifyInfo.fields[t.tb_id].push(a.fid)
                                    }), E(t.tb_id, t, "modify")
                                });
                                f.all(r).then(function () {
                                    e.joinViewData.mainLoading = !1, e.diagram.model = go.Model.fromJson(angular.toJson(e.modifyInfo.info)), e.joinViewData.where = S(i.where), j(), A(), "field" == e.joinViewData.activeTab && e.$broadcast("broadcastJoinField", !0)
                                })
                            } else e.joinViewData.mainLoading = !1
                        })
                    }

                    function F(a) {
                        var i = a && a.folder_list || [];
                        e.loadingFolderStructure = !0, l.folder.getStructureWithParam({
                            get_root: 1,
                            folder_list: i
                        }).then(function (a) {
                            e.loadingFolderStructure = !1;
                            var i = angular.element(".J-search-worktable-input").find("input");
                            if (i && i.val()) return !1;
                            if (0 == a.status) {
                                var r = s.tbId;
                                angular.forEach(a.result.folder_list, function (e) {
                                    "folder_root" == e.folder_id && (e.name = "en" == $.cookie("locale") ? "Root" : "根目录"), r && angular.forEach(e.tb_list, function (t, a) {
                                        t.tb_id == r && e.tb_list.splice(a, 1)
                                    })
                                }), e.saveFolderList = angular.copy(a.result.folder_list);
                                var n = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.tableInfo.table_folder_id);
                                e.tableInfo.table_folder_name = n ? n.name : "", e.original_folderList = angular.copy(a.result.folder_list), e.folderList = angular.copy(a.result.folder_list), e.replaceList = angular.copy(a.result.folder_list), T(e.folderList), e.$broadcast("updatefolderList", e.original_folderList), t.$broadcast("updateWorktableListStyle"), v() && e.joinViewFunc.toggleGuide(!0)
                            }
                        })
                    }

                    function T(t) {
                        e.tableSplitData = null, e.tableSplitFolder.sectionFolderList = [];
                        var a = bdp.bdpTables.initTableSplitFunc(t, e.tableSplitData, "");
                        e.tableSplitFolder.sectionFolderList = a.sectionFolderList, e.tableSplitData = a.tableSplitData
                    }

                    function S(t) {
                        var a = angular.copy(t);
                        if ("sql" == a.where_type) {
                            var i = {},
                                n = "";
                            angular.forEach(a.sql, function (e, t) {
                                i[e.tb_id] = e.sql, 0 == t && (n = e.tb_id)
                            }), a.sql = i, a.condition = {
                                filters: []
                            }, r(function () {
                                e.$broadcast("initSql", n)
                            }, 10)
                        } else a.sql = {};
                        return a
                    }

                    function C() {
                        e.joinViewData.tables = [], e.joinViewData.field = [], e.joinViewData.data = [], e.joinViewData.info = ""
                    }

                    function L(t, a, i, r) {
                        e.src_tb = i, e.dragOption.dragTb = {
                            tb_id: i.tb_id,
                            name: i.name
                        }, e.joinViewFunc.toggleGuide(!1)
                    }

                    function k(t, a) {
                        var i = e.dragOption.parentNode.getBoundingClientRect();
                        return {
                            x: t - i.left,
                            y: a - i.top
                        }
                    }

                    function x(t, a) {
                        var i, r;
                        return r = k(t, a), i = new go.Point(r.x, r.y), e.diagram.transformViewToDoc(i)
                    }

                    function I(t, a) {
                        if (0 == e.dragOption.diagram_nodes.length) return !1;
                        for (var i = x(a.offset.left, a.offset.top), r = e.dragOption.diagram_nodes.length, n = e.dragOption.overlap_node, o = a.helper.outerWidth(), l = a.helper.outerHeight(); r--;) {
                            var s = e.dragOption.diagram_nodes[r];
                            if (s.actualBounds.intersects(i.x, i.y, o, l)) return s.background = "#ff855a", n != s && (n && (n.background = "#44ccff"), e.dragOption.overlap_node = s), !0
                        }
                        e.dragOption.overlap_node && (e.dragOption.overlap_node.background = "#44ccff", e.dragOption.overlap_node = null)
                    }

                    function E(t, a, i, n) {
                        var o = {
                            dstb_id: t
                        };
                        return l.tb.joinTbInfo(o).then(function (o) {
                            if (0 == o.status) {
                                e.fieldsMap[t] = [];
                                var l = o.result,
                                    s = l.columns,
                                    d = angular.copy(s);
                                angular.forEach(d, function (e) {
                                    e.title = e.nick_name
                                }), e.selectedTbs[t] = {
                                    tb_id: l.tb_id,
                                    name: l.tb_name,
                                    fields: d,
                                    update_mode: l.update_mode
                                };
                                var c = null == l.partition ? "" : angular.fromJson(l.partition).base_field;
                                if ("modify" == i) {
                                    d = e.modifyInfo.fields, angular.forEach(s, function (i) {
                                        var r = $.inArray(i.fid, d[t]),
                                            o = {
                                                fid: i.fid,
                                                name: i.name,
                                                type: i.data_type,
                                                original_nick_name: i.nick_name || i.name,
                                                comment: i.comment || "",
                                                forceCheck: 1 === l.update_mode && i.fid == c
                                            };
                                        r > -1 ? (o.nick_name = a.fields[r].nick_name || i.name, o.comment = a.fields[r].comment || "", o.check = !0) : (o.nick_name = i.nick_name || i.name, o.comment = i.comment || "", o.check = !1), n && (o.check = !0), e.fieldsMap[t].push(o)
                                    });
                                    var u = 0;
                                    angular.forEach(e.modifyInfo.info.nodeDataArray, function (e) {
                                        e.tb_id == t && (u = e)
                                    }), 0 != u ? angular.forEach(u.fields, function (a) {
                                        angular.forEach(e.fieldsMap[t], function (e) {
                                            a.fid == e.fid && (angular.extend(a, e), a.gen_fid && (e.gen_fid = a.gen_fid))
                                        })
                                    }) : e.fieldsMap[t].forEach(function (e) {
                                        a.fields.forEach(function (t) {
                                            "" != t.gen_fid && t.fid == e.fid && (e.gen_fid = t.gen_fid)
                                        })
                                    }), se || e.joinViewData.where.sql[t] && (se = !0, r(function () {
                                        e.$broadcast("initTbList", t)
                                    }, 10))
                                } else angular.forEach(s, function (a) {
                                    e.fieldsMap[t].push({
                                        fid: a.fid,
                                        name: a.name,
                                        type: a.data_type,
                                        nick_name: a.nick_name || a.name,
                                        original_nick_name: a.nick_name || a.name,
                                        comment: a.comment || "",
                                        check: !0,
                                        forceCheck: 1 === l.update_mode && a.fid == c
                                    })
                                })
                            }
                            return o
                        })
                    }

                    function N(t) {
                        function a(e) {
                            e.sub_folders && e.sub_folders.length > 0 && e.sub_folders.map(a), e.tb_list.map(function (e) {
                                t == e.tb_id && (i = e.name)
                            })
                        }
                        var i;
                        return e.original_folderList.map(a), i || e.modifyInfo && e.modifyInfo.info && e.modifyInfo.info.nodeDataArray && e.modifyInfo.info.nodeDataArray.map(function (e) {
                            e.key == t && (i = e.name)
                        }), i
                    }

                    function j() {
                        if (e.joinViewData.where && e.folderList) {
                            var t = e.joinViewData.where;
                            "sql" != t.where_type && t.condition.filters.map(function (e) {
                                e.tb_name = N(e.tb_id)
                            })
                        }
                    }

                    function A(t) {
                        var a = 0,
                            i = e.diagram.model.nodeDataArray;
                        e.joinViewData.field = [], e.joinViewData.tables = [], angular.forEach(i, function (t) {
                            t.fields = [];
                            var i = {
                                name: t.name,
                                tb_id: t.tb_id,
                                fields: [],
                                field_count: e.fieldsMap[t.tb_id].length
                            };
                            a = 0, e.joinViewData.tables.push(i), angular.forEach(e.fieldsMap[t.tb_id], function (r) {
                                r.original_nick_name = r.original_nick_name || r.nick_name, r.linkField = h(t.tb_id, r.fid) && r.original_nick_name != r.nick_name, r.check && (t.fields.push(r), a++), r.tb_name = t.name, r.tb_id = t.tb_id, e.joinViewData.field.push(r), i.fields.push(r)
                            })
                        })
                    }

                    function P(t) {
                        var a = {
                            flag: !0,
                            data: null
                        };
                        if ("preview" != t && !e.tableInfo.table_name) return n(e.tips["join.inputWorkSheetName"]), a.flag = !1, a;
                        if (0 == e.diagram.model.nodeDataArray.length) return "preview" != t && n(e.tips["join.doNotSelectSheet"]), C(), a.flag = !1, a;
                        if (!R() || !O()) return a.flag = !1, a;
                        if (!B(t)) return n(e.tips["join.selectField"]), a.flag = !1, a;
                        var i = M(e.joinViewData.where);
                        if (!q(i)) return a.flag = !1, a;
                        A(t);
                        var r = {
                            table_name: e.tableInfo.table_name,
                            info: JSON.parse(e.diagram.model.toJson())
                        };
                        return r.class && delete r.class, r.info.where = i, a = {
                            flag: !0,
                            data: r
                        }
                    }

                    function M(e) {
                        var t = [],
                            a = {
                                where_type: e.where_type,
                                where_linker: e.where_linker
                            };
                        return "sql" == e.where_type ? (angular.forEach(e.sql, function (e, a) {
                            e && t.push({
                                tb_id: a,
                                sql: e
                            })
                        }), a.sql = t) : a.condition = {
                            filters: H(e.condition.filters)
                        }, a
                    }

                    function q(e) {
                        var t = e,
                            a = !0;
                        if (t.info && t.info.hasOwnProperty("where"))
                            for (var i = 0, r = t.info.where.length; i < r && (8 != t.info.where[i].operator && (9 != t.info.where[i].operator || "" !== t.info.where[i].value)); i++)
                                if (!t.info.where[i].value && 0 != t.info.where[i].value) {
                                    a = !1;
                                    break
                                }
                        return a
                    }

                    function O() {
                        for (var t = e.diagram.model.linkDataArray, a = 0, i = t.length; a < i; a++)
                            for (var r = t[a].join_fields, o = 0, l = r.length; o < l; o++) {
                                var s = r[o].join_field;
                                if (!s || !s[0] || !s[1]) return n(e.tips["join.fieldCanNotNull"]), !1
                            }
                        return !0
                    }

                    function R() {
                        var t = JSON.parse(e.diagram.model.toJson()).linkDataArray,
                            a = !0,
                            i = 0;
                        return angular.forEach(t, function (e) {
                            "full join" == e.join_type && i++
                        }), i >= 2 && (a = !1, n(e.tips["join.fullJoinTip"])), a
                    }

                    function B(t) {
                        var a = 0;
                        for (var i in e.fieldsMap)
                            if (e.fieldsMap.hasOwnProperty(i))
                                for (var r = 0, o = e.fieldsMap[i].length; r < o; r++)
                                    if (e.fieldsMap[i][r].check && (a++, "preview" != t && !e.fieldsMap[i][r].nick_name)) return n(e.tips["join.fieldAliasInvalid"]), !1;
                        return 0 != a
                    }

                    function V(t) {
                        e.joinViewData.previewData = t.result, e.joinViewData.previewTbHeader = {
                            tables: [],
                            fields: []
                        }, e.joinViewData.tables.map(function (t) {
                            var a = angular.copy(t),
                                i = 0;
                            t.fields.map(function (e) {
                                i = e.check ? ++i : i
                            }), a.check_field_count = i, e.joinViewData.previewTbHeader.tables.push(a), e.joinViewData.previewTbHeader.fields = e.joinViewData.previewTbHeader.fields.concat(a.fields)
                        })
                    }

                    function H(e) {
                        var t = angular.copy(e);
                        return t = $.map(t, function (e, t) {
                            return W(e) && U(e) ? e : null
                        })
                    }

                    function W(e) {
                        if ("number" == e.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                            if (isNaN(Number(e.value))) return !1;
                            if ("" === e.value) return !1;
                            e.value = Number(e.value)
                        }
                        return !0
                    }

                    function U(e) {
                        return !(!e.fid || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && ("" == e.start_date || "" == e.end_date))
                    }

                    function J() {
                        "module" == e.joinViewData.activeTab && r(function () {
                            e.$broadcast("broadcastRedrawJoinModule")
                        }, 100);
                        var t = P("preview");
                        if (!t.flag) return !1;
                        var a = t.data,
                            i = {
                                info: angular.toJson(a)
                            };
                        e.joinTableFt.open || (e.joinTableFt.tab = "preview", Z()), e.joinTableFt.loading = !0, l.tb.joinTbPreview(i).then(function (t) {
                            e.joinTableFt.loading = !1, 0 == Number(t.status) ? V(t) : n(+t.status, {
                                warn_msg: t.errstr
                            })
                        })
                    }

                    function z() {
                        e.requestDone = !1;
                        var a = {
                            tb_id: s.tbId
                        };
                        l.tb.joinTbModify(a).then(function (a) {
                            e.requestDone = !0, t.pageLoading = !1, 0 == Number(a.status) ? w() : 30003 == Number(a.status) ? n(a.errstr) : 40002 != Number(a.status) && 40014 != Number(a.status) || (a.errstr ? (t.global.hint = !1, 40014 == Number(a.status) ? e.joinViewData.repeatFieldTip = e.tips["error.fieldRepeat"] : e.joinViewData.repeatFieldTip = a.errstr + ", " + e.tips["join.editFirst"]) : n(Number(a.status)), t.pageLoading = !1), 40014 == Number(a.status) && a.errstr && ie(a.result)
                        })
                    }

                    function G() {
                        if (t.pageLoading || !e.requestDone) return !1;
                        var a = P();
                        if (!a.flag) return !1;
                        var r = a.data;
                        if (t.pageLoading = !0, e.joinViewData.isEdit) ce(r);
                        else {
                            var o = e.tableInfo.table_folder_id,
                                s = {
                                    info: angular.toJson(r),
                                    folder_id: o
                                };
                            l.tb.joinTbCreate(s).then(function (a) {
                                if (0 == Number(a.status)) {
                                    var r = a.result.tb_id;
                                    $.cookie("ds_tb_id", r), t.wsId ? i.path("/data_source/" + t.wsId) : i.path("/data_source")
                                } else 40002 != Number(a.status) && 40014 != Number(a.status) || (a.errstr ? (t.global.hint = !1, 40014 == Number(a.status) ? e.joinViewData.repeatFieldTip = e.tips["error.fieldRepeat"] : e.joinViewData.repeatFieldTip = a.errstr + ", " + e.tips["join.editFirst"]) : n(Number(a.status)));
                                40014 == Number(a.status) && a.errstr && ie(a.result)
                            }).finally(function () {
                                e.requestDone = !0, t.pageLoading = !1
                            })
                        }
                    }

                    function Q() {
                        if (0 == e.diagram.model.nodeDataArray.length || !O()) return !1;
                        A("preview");
                        var t = {
                            table_name: e.tableInfo.table_name,
                            info: JSON.parse(e.diagram.model.toJson())
                        };
                        t.info.where = M(e.joinViewData.where), e.joinViewData.info = angular.toJson(t), K(angular.toJson(t))
                    }

                    function Y(t) {
                        0 != e.diagram.model.nodeDataArray.length && (e.joinViewData.export = !0, Highcharts.post("/api/wb/profile_export", {
                            info: e.joinViewData.info
                        }), setTimeout(function () {
                            e.joinViewData.export = !1
                        }, 50))
                    }

                    function K(a) {
                        e.joinTableFt.loading = !0;
                        var i = {
                            info: a
                        };
                        l.tb.getJoinErrorReport(i).then(function (a) {
                            e.joinTableFt.loading = !1, t.pageLoading = !1, 0 == Number(a.status) ? e.joinViewData.report = a.result : 30003 == Number(a.status) ? n(a.errstr) : 40002 != Number(a.status) && 40014 != Number(a.status) || (a.errstr ? (t.global.hint = !1, 40014 == Number(a.status) ? e.joinViewData.repeatFieldTip = e.tips["error.fieldRepeat"] : e.joinViewData.repeatFieldTip = a.errstr + ", " + e.tips["join.editFirst"]) : n(Number(a.status))), 40014 == Number(a.status) && ie(a.result)
                        })
                    }

                    function X(t) {
                        function a() {
                            angular.element(".J-merge-field-select").css({
                                left: -400,
                                top: -400,
                                opacity: 10
                            }), angular.element(".J-merge-table-context-menu").hide()
                        }
                        switch (t) {
                            case "module":
                                e.$broadcast("broadcastRedrawJoinModule"), re();
                                break;
                            case "filter":
                                "sql" == e.joinViewData.where.where_type && r(function () {
                                    e.$broadcast("initSql")
                                }, 100), j(), a(), re();
                                break;
                            case "field":
                                e.joinViewData.repeatFieldTip = "", A("preview"), a()
                        }
                        e.joinViewData.activeTab = t, r(function () {
                            ee()
                        }, 100)
                    }

                    function Z() {
                        e.joinTableFt.open = !e.joinTableFt.open, r(function () {
                            ee(), e.$broadcast("broadcastRedrawJoinModule")
                        }, 0)
                    }

                    function ee() {
                        var t = angular.element(".J-auto-height"),
                            a = angular.element(".J-join-table-footer"),
                            i = a.height(),
                            r = e.joinTableFt.open ? i : 0;
                        t.css("height", "calc( 100% - " + r + "px)")
                    }

                    function te(t, a) {
                        a && a.stopPropagation(), e.joinTableFt.tab = t, e.joinTableFt.open = !0, "preview" == t ? J() : "error" == t && Q()
                    }

                    function ae() {
                        "field" != e.joinViewData.activeTab && X("field"), r(function () {
                            e.$broadcast("broadcastToggleRepeatFields", !0)
                        }, 10), e.joinViewData.repeatFieldTip = ""
                    }

                    function ie(t) {
                        t.map(function (e) {
                            e.tb_id;
                            e.fid = e.fid || e.field_id, e.nick_name = e.title, e.original_nick_name = e.nick_name;
                            var t = 2 == e.type ? "string" : "date";
                            t = 1 == e.type ? "number" : t, e.type = t, e.special_type = "chart"
                        }), e.joinViewData.chartCalcField = {
                            fields: t
                        }
                    }

                    function re() {
                        e.joinViewData.chartCalcField = {}
                    }

                    function ne() {
                        d.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: e,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                tbType: "join",
                                optType: "baseChoose",
                                folderList: e.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderId: e.tableInfo.table_folder_id || "folder_root",
                                targetFolderType: "",
                                queryText: "",
                                open: {},
                                confirmSave: oe,
                                loadingDirectory: !0
                            },
                            controller: "chooseTbFolderCtrl"
                        })
                    }

                    function oe(t) {
                        e.tableInfo.table_folder_id = t.targetFolderId;
                        var a = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.tableInfo.table_folder_id);
                        e.tableInfo.table_folder_name = a ? a.name : "", d.closeAll()
                    }
                    var le = {
                        funcQueue: [],
                        loadLibInProgress: !1
                    };
                    e.goJsReady = {
                        join: !1
                    }, thirdPluginLoader({
                        initFun: g,
                        libSrc: "https://s1.bdp.cn/static/js/lib/go_latest_eec1082.js",
                        libId: window.GOJS
                    }, le);
                    var se = !1;
                    e.initView = function () {
                        t.view = "table", t.show_bdp_header = !1, e.table_view = "add", e.checkAll = !1, e.requestDone = !0, e.tableInfo = {
                            table_name: "",
                            table_folder_id: $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root",
                            table_folder_name: ""
                        }, e.workTbInfo = {}, e.chooseShow = !1, e.fieldsMap = {}, e.diagram = window.diagram, e.diagram && e.diagram.clear(), e.dragOption = {
                            diagram_nodes: [],
                            dragTb: null,
                            overlap_node: null,
                            rect: null,
                            canDrop: function () {
                                return !0
                            }
                        }, e.currentLink = null, e.src_tb = null, e.joinViewData = {
                            showGuide: !1,
                            activeTab: "module",
                            previewData: [],
                            previewTbHeader: {
                                tables: [],
                                fields: []
                            },
                            chartCalcField: {},
                            repeatFieldTip: "",
                            mainLoading: !1,
                            isEdit: !1,
                            tables: [],
                            field: [],
                            data: [],
                            where: {
                                where_type: "condition",
                                where_linker: "and",
                                condition: {
                                    filters: []
                                },
                                sql: {}
                            },
                            export: null,
                            report: null
                        }, 
                        e.joinViewFunc = {
                            toggleGuide: b,
                            showTopTab: X,
                            goPreview: J,
                            dragTbFunc: L,
                            onDrag: I,
                            getTbField: E,
                            backToWorktable: y,
                            createWorkTable: G,
                            goToRepeatFields: ae,
                            showSelectFolder: ne,
                            joinExportExcel: Y
                        }, e.selectedTbs = {}, e.selectedTbList = [], e.initSelectedTbList = !1, e.joinTableFt = {
                            tab: "",
                            open: !1,
                            loading: !1,
                            switchFooterFun: Z,
                            tabFooterFun: te
                        }, e.joinTable = {
                            nodeDataArray: [],
                            linkDataArray: []
                        }, e.tableSplitFolder = {
                            sectionFolderList: []
                        }, e.tableSplitData = null, F()
                    }, 
                    e.initView(), e.$watch("selectedTbs", function (t) {
                        e.selectedTbList.length = 0;
                        var a = e.selectedTbs;
                        for (var i in a) a.hasOwnProperty(i) && e.selectedTbList.push(a[i]);
                        e.selectedTbList.length && !e.initSelectedTbList ? (e.$broadcast("initTbList"), e.initSelectedTbList = !0) : e.$broadcast("updateTbList")
                    }, !0), e.getWorktable = function (a, i) {
                        return !a.unfolded && 0 != a.open && 0 == a.tb_list.length && a.mark !== !1 && (a.mark && a.sub_folders && a.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), i && i.stopPropagation(), a.loadingWorktables = !0, l.folder.getWorktable({
                            folder_id: a.folder_id
                        }).then(function (i) {
                            a.loadingWorktables = !1, e.folderList.forEach(function (e) {
                                e.folder_id == a.folder_id && 0 == e.tb_list.length && (i.result.forEach(function (t) {
                                    e.tb_list.push(t)
                                }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (t) {
                                    t.folder_id == a.folder_id && 0 == t.tb_list.length && (i.result.forEach(function (e) {
                                        t.tb_list.push(e)
                                    }), t.unfolded = !0, t.open = !0, e.open = !0)
                                })
                            }), t.$broadcast("updateWorktableListStyle")
                        }))
                    }, 
                    e.openReplaceTableDialog = function (t) {
                        e.targetNodeInfo = t, e.target_id = e.targetNodeInfo.tb_id, e.src_tb = null, e.currentFolderIndex = 0, e.currentSubfolderIndex = void 0, d.open({
                            templateUrl: "/static/js/worktable/tableDialog/select_join_replace_table.html",
                            scope: e,
                            className: "ngdialog-theme-default ngdialog-width-348 ngdialog-select-table ngdialog-replace-join-table",
                            controller: ["$scope", function (e) {
                                e.getWorktable = function (t, a) {
                                    return !t.unfolded && 1 != t.open && 0 == t.tb_list.length && t.mark !== !1 && (t.mark && t.sub_folders && t.sub_folders.forEach(function (e) {
                                        e.hide = !1
                                    }), a && a.stopPropagation(), t.loadingWorktables = !0, l.folder.getWorktable({
                                        folder_id: t.folder_id
                                    }).then(function (a) {
                                        t.loadingWorktables = !1, e.replaceList.forEach(function (e) {
                                            e.folder_id == t.folder_id && 0 == e.tb_list.length && (a.result.forEach(function (t) {
                                                e.tb_list.push(t)
                                            }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                                i.folder_id == t.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                                    i.tb_list.push(e)
                                                }), i.unfolded = !0, i.open = !0, e.open = !0)
                                            })
                                        })
                                    }))
                                }
                            }]
                        })
                    }, 
                    e.checkWorktable = function (t) {
                        e.src_tb = t
                    }, 
                    e.showWarningDialog = function (e) {
                        return d.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            data: {
                                message: e,
                                hideCancel: !0
                            }
                        })
                    }, 
                    e.joinResultUpdateMode = function () {
                        for (var t = e.diagram.model.linkDataArray, a = t.length; a--;)
                            if ("full join" == t[a].join_type) return 0;
                        var i = m(t);
                        return 1 == e.selectedTbs[i].update_mode ? 1 : 0
                    }, 
                    e.checkOnTbWillin = function (t, a) {
                        var i = {
                            then: function (e) {
                                e()
                            }
                        };
                        return t in e.selectedTbs ? (n(e.tips["join.worktablePlaced"]), !1) : (e.src_tb && t == e.src_tb.tb_id && e.diagram.model.nodeDataArray.length && (1 != e.src_tb.update_mode || e.joinResultUpdateMode() || (!a || a && a != m(e.diagram.model.linkDataArray) && ! function () {
                            for (var t = e.diagram.model.linkDataArray, a = t.length; a--;)
                                if ("full join" == t[a].join_type) return i
                        }()) && (i = e.showWarningDialog("wb.transform.combTbCantIncre"))), i)
                    }, 
                    e.sendReplaceWorktable = function () {
                        if (!e.src_tb) return n(e.tips["wb.selectWorkSheet"]), !1;
                        var t = e.src_tb.tb_id,
                            a = e.checkOnTbWillin(t, e.target_id);
                        a && (e.checkTableResult = "", d.closeAll(), a.then(function () {
                            if (s.tbId) {
                                e.original_target_id = "";
                                for (var a in e.original_tb_mapping) e.original_tb_mapping.hasOwnProperty(a) && e.original_tb_mapping[a] == e.target_id && (e.original_target_id = a);
                                if ("" == e.original_target_id || e.original_target_id == t) return e.openReplaceConfirmDialog(), d.closeAll(), !1;
                                var i = {
                                    src_tb_id: t,
                                    target_tb_id: e.original_target_id,
                                    join_tb_id: s.tbId
                                };
                                l.tb.replaceCheck(i).then(function (t) {
                                    if (0 == t.status && t.result.can_replace) e.checkTableResult = t.result, e.openReplaceConfirmDialog();
                                    else if (0 == t.status && !t.result.can_replace) {
                                        e.missing_fields = t.result.missing_fields, e.conflict_fields = t.result.conflict_fields;
                                        var a;
                                        return e.missing_fields.length > 0 && (a = 1), e.conflict_fields.length > 0 && (a = 2), e.conflict_fields.length > 0 && e.missing_fields.length > 0 && (a = 3), a > 0 && d.open({
                                            templateUrl: "/static/partials/dialogTemplates/replace_fail_hint.html",
                                            className: "ngdialog-theme-default",
                                            scope: e,
                                            data: {
                                                conflict_type: a
                                            }
                                        }), !1
                                    }
                                })
                            } else e.openReplaceConfirmDialog()
                        }))
                    }, 
                    e.openReplaceConfirmDialog = function () {
                        d.openConfirm({
                            templateUrl: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            data: {
                                title: e.tips["join.replaceWorktable"],
                                message: e.tips["join.replaceWorktableConfirmMessage"]
                            }
                        }).then(function () {
                            e.checkTableResult ? _({
                                result: e.checkTableResult
                            }) : o.post("/api/dstb/info", {
                                dstb_id: e.src_tb.tb_id
                            }).then(function (e) {
                                0 == e.status && _(e)
                            })
                        })
                    }, 
                    e.$watch("folderList", function () {
                        t.$broadcast("updateWorktableListStyle")
                    });
                    var de = "bdp_merge_table_guide";
                    e.$on("initTableSplit", function (t, a) {
                        a && (a.pos && "top" == a.pos ? (T(e.folderList), r(function () {
                            angular.element(".J-table-list > ul")[0].scrollTop = 0, angular.element(".J-list-go-top").css("display", "none")
                        }, 0)) : T(a.folderList, a.noDefault))
                    }), 
                    e.$on("regainFolderList", function (t, a) {
                        F({
                            folder_list: bdp.bdpTables.getOpenedFolderLists(e.folderList)
                        })
                    });
                    var ce = function (a) {
                        var i = s.tbId,
                            r = {
                                tb_id: i,
                                info: angular.toJson(a.info),
                                tb_name: a.table_name,
                                folder_id: e.tableInfo.table_folder_id
                            };
                        e.requestDone = !1, l.tb.joinTbCheckPreview(r).then(function (a) {
                            if (e.requestDone = !0, 0 == Number(a.status)) {
                                var i = a.result.can_del;
                                if (1 == i) z();
                                else if (2 == i) w();
                                else {
                                    e.responseHint = {
                                        dependency: a.result.dependency
                                    };
                                    var r = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                    angular.forEach(e.responseHint.dependency, function (e) {
                                        angular.forEach(e.chart, function (e) {
                                            e.ct_name || (e.ct_name = r)
                                        })
                                    }), d.open({
                                        template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                        className: "ngdialog-theme-default",
                                        scope: e
                                    })
                                }
                            } else 30003 == Number(a.status) ? n(a.errstr) : 40002 != Number(a.status) && 40014 != Number(a.status) || (a.errstr ? (t.global.hint = !1, 40014 == Number(a.status) ? e.joinViewData.repeatFieldTip = e.tips["error.fieldRepeat"] : e.joinViewData.repeatFieldTip = a.errstr + ", " + e.tips["join.editFirst"]) : n(Number(a.status)));
                            40014 == Number(a.status) && a.errstr && ie(a.result)
                        }).finally(function () {
                            t.pageLoading = !1
                        })
                    };
                    $(window).off("beforeunload.tip").on("beforeunload.tip", function () {
                        if (e.diagram.model.nodeDataArray.length && !e.joinViewData.export) return e.tips["join.beforeunload"]
                    }), e.$on("$destroy", function () {
                        $(window).off("beforeunload.tip")
                    }), 
                    c(["error.fieldRepeat", 
                    "join.confirmToBack", 
                    "join.saveSuccess", 
                    "join.saveFailed", 
                    "join.inputWorkSheetName", 
                    "join.doNotSelectSheet", 
                    "join.fieldAliasInvalid", 
                    "join.selectField", "wb.databaseView", "wb.worktableView", "nameInvalid", "join.worksheetname", "join.fieldCanNotNull", 
                    "join.optionsCanNotNull", "join.filterTypeAndValueError", "join.beforeunload", "join.fullJoinTip", "sql.previewErrInfo1", 
                    "join.editFirst", "sql.previewErrInfo2", "join.replaceWorktable", "join.replaceWorktableConfirmMessage", "join.worktablePlaced", 
                    "join.replaceSuccess", "join.replaceFieldFailedMissing", "join.replaceFieldFailedConflict", "wb.selectWorkSheet"], e)
                }])
            }(),
            function () {
                function e(e, t, a, i, r) {
                    return {
                        restrict: "A",
                        replace: !0,
                        templateUrl: "/static/js/worktable/join/view/join-table-filter.html",
                        link: function (n, o, l) {
                            function s() {
                                return {
                                    tb: null,
                                    field: "",
                                    value: null,
                                    tb_name: "",
                                    operator: 0,
                                    start_date: null,
                                    end_date: null
                                }
                            }

                            function d(e) {
                                return Highcharts.dateFormat("%Y-%m-%d", e)
                            }
                            n.curItem = s(), n.fields = {}, n.filter = {
                                add: !0
                            }, n.operatorMap = a, n.dateTimeByHalfHour = r;
                            var c = n.curItem;
                            n.tableSelectChange = function (e) {
                                e.tb ? (e.field = null, e.value = null, e.operator = null) : e = s()
                            }, n.operatorChange = function (e) {
                                8 != e.operator && 9 != e.operator && 10 != e.operator || (e.value = ""), 10 != e.operator && (e.start_date = null, e.end_date = null)
                            }, n.fieldSelectChange = function (e) {
                                "date" == e.field.type ? (e.operator = 10, e.value = "", e.start_date = null, e.end_date = null) : (e.operator = 0, e.value = "")
                            }, n.selectWhere = function (t) {
                                if (c = n.curItem, !n.curItem.tb || !n.curItem.field || void 0 == n.curItem.operator || 8 != n.curItem.operator && 9 != n.curItem.operator && 10 != n.curItem.operator && ("" === n.curItem.value || void 0 == n.curItem.value) || 10 == n.curItem.operator && !n.curItem.start_date && !n.curItem.end_date) return void("click" == t && e(n.tips["join.optionsCanNotNull"]));
                                if ("number" == c.field.type && 8 != n.curItem.operator && 9 != n.curItem.operator && 10 != n.curItem.operator) {
                                    if (isNaN(Number(c.value))) return void e(n.tips["error.filterValueError"] + "：" + c.value);
                                    if ("" === c.value) return !1;
                                    c.value = Number(c.value)
                                }
                                n.joinViewData.where.condition.filters.push({
                                    tb_id: c.tb.tb_id,
                                    field: c.field.name,
                                    fid: c.field.fid,
                                    data_type: c.field.type,
                                    value: c.value,
                                    operator: c.operator,
                                    tb_name: c.tb.name,
                                    name: c.field.nick_name,
                                    start_date: c.start_date,
                                    end_date: c.end_date
                                }), n.curItem = s()
                            }, n.$on("InitializeCurItem", function (e, t) {
                                n.curItem = s()
                            }), n.$on("save", function () {
                                n.selectWhere()
                            }), n.delWhereFun = function (e) {
                                n.joinViewData.where.condition.filters.splice(e, 1)
                            }, n.dateRangeShow = function (e) {
                                var t = [e.start_date, e.end_date];
                                if (t[0] || t[1] || (t[0] = Highcharts.dateFormat("%Y-%m-%d", +new Date), t[1] = Highcharts.dateFormat("%Y-%m-%d", +new Date)), t.length > 1) {
                                    var a = t[0] ? t[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                        r = t[1] ? t[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                    t = t.concat([a, r])
                                } else 0 === t.length && (t = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                                i.open({
                                    template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                    className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                    data: {
                                        filterItem: e,
                                        range: t
                                    },
                                    scope: n
                                })
                            }, n.saveDateRange = function (t) {
                                var a = t.sDate ? d(new Date(t.sDate)) + " " + t.sDateHour : null,
                                    r = t.eDate ? d(new Date(t.eDate)) + " " + t.eDateHour : null;
                                if (!a && !r) return e(n.tips["chart.dateRangeRequired"]), !1;
                                if (a && r) {
                                    if (!t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                    if (!t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1;
                                    if (new Date(a) - new Date(r) > 0) return e(n.tips["filter.dateRangeInvalid"]), !1
                                } else {
                                    if (a && !r && !t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                    if (!a && r && !t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1
                                }
                                t.data.filterItem.start_date = a, t.data.filterItem.end_date = r, i.closeAll()
                            }, t(["join.optionsCanNotNull", "error.filterValueError", "chart.dateRangeRequired", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2"], n)
                        }
                    }
                }
                angular.module("BC.controllers.dataSource")
                .directive("joinTableFilter", e), 
                e.$inject = ["errHint", "$jsTipTranslate", "filterOperatorMapWithType", "ngDialog", "dateTimeByHalfHour"]
            }(),
            function () {
                function e(e, t, a) {
                    return {
                        restrict: "A",
                        replace: !0,
                        scope: !0,
                        templateUrl: "/static/js/worktable/join/view/join-table-field.html",
                        link: function (i, r, n) {
                            function o() {
                                var e = 0;
                                i.joinFieldConfig.tableList.map(function (t) {
                                    e = 0, t.fields.map(function (t) {
                                        e = t.check && !t.special_type ? ++e : e
                                    }), t.checkAll = e == t.fields.length
                                })
                            }

                            function l(e) {
                                i.joinFieldConfig.repeatTbFieldMap = {};
                                var t = !1,
                                    r = angular.copy(i.joinFieldConfig.fieldList);
                                if (i.joinFieldConfig.chartCalcField && (r = r.concat(i.joinFieldConfig.chartCalcField.fields)), angular.forEach(r, function (a, n) {
                                        e || (a.isRepeat = !1);
                                        for (var o = 0, l = r.length; o < l; o++)
                                            if (r[o].nick_name == a.nick_name && n != o) {
                                                e || (a.isRepeat = !0), t = !0, i.joinFieldConfig.repeatTbFieldMap[a.tb_id] || (i.joinFieldConfig.repeatTbFieldMap[a.tb_id] = []), i.joinFieldConfig.repeatTbFieldMap[a.tb_id].push(a.fid);
                                                break
                                            }
                                    }), i.joinFieldConfig.hasRepeat = t, !e) {
                                    var n = i.joinFieldConfig.tableList,
                                        o = i.joinFieldConfig.repeatTbFieldMap;
                                    angular.forEach(n, function (e, t) {
                                        e.hasRepeat = !1;
                                        var a = o[e.tb_id];
                                        a && e.fields.map(function (t) {
                                            t.isRepeat = !1, a.indexOf(t.fid) >= 0 && (t.isRepeat = !0, e.hasRepeat = !0)
                                        }), f(e)
                                    }), i.joinFieldConfig && i.joinFieldConfig.showRepeat && (a(function () {
                                        i.$broadcast("broadcastShowRepeatField", {
                                            show: i.joinFieldConfig.showRepeat
                                        })
                                    }, 0), i.joinFieldConfig.hideTableMap = {}, $(".J-join-table").slideDown(200))
                                }
                            }

                            function s(t) {
                                i.joinFieldConfig.hasRepeat || e(i.tips["join.noRepeatField"]), t && t.stopPropagation()
                            }

                            function d() {
                                if (i.joinFieldConfig.showRepeat) {
                                    if (!i.joinFieldConfig.hasRepeat) return e(i.tips["join.noRepeatField"]), i.joinFieldConfig.showRepeat = !1, !1;
                                    l()
                                } else angular.forEach(i.joinFieldConfig.tableList, function (e) {
                                    e.field_count = e.fields.length
                                }), i.joinFieldConfig.showRepeat = !1, a(function () {
                                    i.$broadcast("broadcastShowRepeatField", {
                                        show: i.joinFieldConfig.showRepeat
                                    })
                                }, 0)
                            }

                            function c(e, t) {
                                if (e) {
                                    e.stopPropagation();
                                    var a = null,
                                        r = $(e.target);
                                    if (r.hasClass("J-join-table-name")) a = r.next(".J-join-table");
                                    else {
                                        a = r.parent(".J-join-table-name").next(".J-join-table")
                                    }
                                    var n = t.tb_id,
                                        o = i.joinFieldConfig.hideTableMap;
                                    a && (o[n] = !o[n], a.slideToggle(200))
                                }
                            }

                            function u(e) {
                                e.fields && e.fields.map(function (t) {
                                    t.check = e.checkAll
                                })
                            }

                            function f(e) {
                                var t = 0;
                                e.fields && e.fields.map(function (e) {
                                    t = e.check ? ++t : t
                                }), e.checkAll = t == e.fields.length
                            }

                            function p() {
                                l("onlyHit")
                            }

                            function g(e) {
                                13 == (e || window.event).keyCode && p()
                            }
                            i.init = function (e) {
                                i.joinFieldConfig = {
                                    showRepeat: !1,
                                    hasRepeat: !1,
                                    repeatTbFieldMap: {},
                                    hideTableMap: {},
                                    tableList: i.joinViewData.tables || [],
                                    fieldList: i.joinViewData.field || [],
                                    chartCalcField: $.isEmptyObject(i.joinViewData.chartCalcField) ? null : i.joinViewData.chartCalcField,
                                    toggleRepeatFields: d,
                                    toggleTableDom: c,
                                    checkAllFields: u,
                                    checkOneField: f,
                                    editFieldName: p,
                                    keyUpFieldName: g,
                                    clickShowRepeat: s
                                }, e || (o(), l("onlyHit"))
                            }, a(function () {
                                i.init()
                            }, 0), i.$on("broadcastJoinField", function (e, t) {
                                t && i.init()
                            }), i.$on("broadcastToggleRepeatFields", function (e, t) {
                                t && (i.init("broadcastToggleRepeatFields"), i.joinFieldConfig.showRepeat = !0, l())
                            }), t(["join.noRepeatField"], i)
                        }
                    }
                }

                function t(e, t, a, i) {
                    return {
                        restrict: "A",
                        scope: {
                            tableData: "="
                        },
                        link: function (t, a, i) {
                            var r, n, o, l, s, d, c, u, f, p, g, h, m, _, b, v, y = a,
                                w = bdpChart.language || "zh",
                                D = 2 == e.usedThemeId ? "LIGHT" : "DARK",
                                F = "LIGHT" == D,
                                T = y.width(),
                                S = y.offset(),
                                C = function () {
                                    x = {
                                        objs: {
                                            pageNum: 1,
                                            perPageNum: 30,
                                            descTipEle: null,
                                            init: function () {
                                                var e = x.objs.spread;
                                                x.objs.initThemeProps(), x.objs.initLangProps(), e.suspendPaint(), x.objs.prepareTableData(), x.objs.config(), x.objs.draw(), x.objs.setStyles(), e.resumePaint()
                                            },
                                            initThemeProps: function () {
                                                F ? (r = "#F7F8F9", n = "#ECEFF1", o = "#DFE4E7", l = "rgba(0, 0, 0, .82)", s = "rgba(0, 0, 0, .6)", c = "#FFF") : (r = "#2B2E44", n = "#1E2033", o = "#24273E", l = "#FFF", s = "rgba(255, 255, 255, .5)", c = "#313449"), fontOrangeColor = "#ff855a", x.objs.initCornerTheme(o)
                                            },
                                            initLangProps: function () {
                                                if (d = "12px Arial", "zh" === w) return u = "保留全部", f = "保留", p = "原字段名", g = "新字段名", h = "字段类型", m = "字段描述", _ = "文本", b = "数值", void(v = "日期");
                                                u = "Remain All", f = "Remain", p = "Origin Field", g = "New Field", h = "Type", m = "Comment", _ = "String", b = "Number", v = "Date"
                                            },
                                            config: function () {
                                                var e = x.objs.spread,
                                                    t = x.objs.sheet,
                                                    a = x.objs.spreadNS;
                                                e.options.backColor = "transparent", e.options.grayAreaBackColor = "transparent", t.options.gridline.color = o, e.options.showVerticalScrollbar = !1, e.options.showHorizontalScrollbar = !1, e.options.scrollbarMaxAlign = !0, e.options.scrollbarShowMax = !0, e.options.allowUserZoom = !1, e.options.tabEditable = !1, e.options.tabStripVisible = !1, e.options.tabNavigationVisible = !1, e.options.newTabVisible = !1, e.options.autoFitType = a.AutoFitType.cellWithHeader, t.options.selectionBorderColor = "transparent", t.options.selectionBackColor = "transparent", t.clearSelection(), t.selectionPolicy(0), t.options.isProtected = !0, t.options.protectionOptions = {
                                                    allowFilter: !0,
                                                    allowSort: !1,
                                                    allowResizeRows: !1,
                                                    allowResizeColumns: !1,
                                                    allowEditObjects: !1
                                                }, t.defaults.rowHeight = 34, t.defaults.colHeaderRowHeight = 1
                                            },
                                            prepareTableData: function () {
                                                var e = x.objs.joinTableData = t.canvasTableData;
                                                x.objs.joinTableConfig = {
                                                    joinTbHeaderCol: 5,
                                                    joinTbHeaderRow: 1,
                                                    joinTbHeaderList: [u, p, g, h, m],
                                                    joinTbBodyCol: 5,
                                                    joinTbBodyRow: e.fields && e.fields.length || 0,
                                                    joinTbBodyList: e.fields || []
                                                };
                                                var a = 34 * (e.fields.length + 1) + 1;
                                                y.height(a)
                                            },
                                            setStyles: function (e) {
                                                var t = x.objs.sheet,
                                                    a = x.objs.spread,
                                                    i = x.objs.spreadNS,
                                                    u = x.objs.sheetStyles = new i.Style,
                                                    f = x.objs.viewport,
                                                    p = x.objs.colHeader,
                                                    g = x.objs.rowHeader,
                                                    h = x.objs.headerRowRange,
                                                    m = x.objs.viewportRange,
                                                    _ = x.objs.rowHeaderRange,
                                                    b = t.getRowCount(),
                                                    v = t.getColumnCount(),
                                                    y = 0,
                                                    w = 0,
                                                    D = x.objs.lineStyle,
                                                    S = x.objs.lineBorder = x.objs.lineBorder || new i.LineBorder(o, D),
                                                    C = x.objs.specialChartField;
                                                u.foreColor = l;
                                                for (var L = 0; L < b; L++) {
                                                    var k = t.getRange(L, -1, 1, -1, f);
                                                    0 == L ? (k.font("bold 12px Arial"), k.backColor(n), k.foreColor(s)) : L % 2 == 0 ? k.backColor(r) : F ? k.backColor(c) : k.backColor("#313449"), w += t.getRowHeight(L)
                                                }
                                                for (var $ = 1; $ < 5; $++) w += t.getRowHeight($, p);
                                                for (var I = 0; I < v; I++) y += t.getColumnWidth(I);
                                                y < T && (x.objs.resetWidth(y), a.options.showHorizontalScrollbar = !1), h.font("bold 12px Arial"), h.backColor(n), h.foreColor(s), h.setBorder(S, {
                                                    inside: !0,
                                                    right: !0,
                                                    bottom: !0
                                                }), h.vAlign(i.VerticalAlign.center), h.hAlign(i.VerticalAlign.left), h.cellPadding("0 16 0 16"), m.font(d), m.foreColor(l), m.setBorder(S, {
                                                    inside: !0,
                                                    right: !0,
                                                    bottom: !0
                                                }), m.vAlign(i.VerticalAlign.center), m.hAlign(i.VerticalAlign.left), m.cellPadding("0 16 0 16");
                                                for (var L = 0; L < b; L++) {
                                                    t.getCell(L, 1, f).foreColor(l)
                                                }
                                                C.map(function (e) {
                                                    t.getCell(e.row, e.col, f).foreColor(fontOrangeColor)
                                                }), t.setColumnWidth(0, 1, g), _.foreColor("transparent"), _.setBorder(S, {
                                                    right: !0
                                                })
                                            },
                                            setColumnWidth: function (e, t) {
                                                var a = x.objs.sheet,
                                                    i = e.col,
                                                    r = {
                                                        0: 120,
                                                        1: 270,
                                                        2: 270,
                                                        3: 160,
                                                        4: 250
                                                    };
                                                a.setColumnWidth(i, r[i], t)
                                            },
                                            resetWidth: function (e) {
                                                var t = x.objs.sheet,
                                                    a = x.objs.colHeader,
                                                    i = t.getColumnCount(),
                                                    r = $(".join-table-field-wrapper"),
                                                    n = T;
                                                S.top - r.offset().top > r[0].clientHeight && (n = T + 14);
                                                var o = Math.floor(n - e - 20) - 2;
                                                t.setColumnWidth(i - 1, o + 250, a)
                                            },
                                            getCanvas: function () {
                                                var e = x.objs.sheet,
                                                    t = e.getParent().getHost(),
                                                    a = t.id + "vp_vp";
                                                return $("#" + a, t)[0]
                                            },
                                            draw: function () {
                                                var e = x.objs.sheet,
                                                    t = x.objs.colHeader,
                                                    a = x.objs.rowHeader,
                                                    i = x.objs.viewport,
                                                    r = x.objs.joinTableConfig,
                                                    n = r.joinTbHeaderRow,
                                                    o = r.joinTbHeaderCol;
                                                x.objs.specialChartField = [];
                                                var l = 0;
                                                ! function () {
                                                    e.setRowCount(n, t), e.setColumnCount(o, t), x.objs.drawHeader(), x.objs.drawViewport(), l = e.getRowCount(), x.objs.headerRowRange = e.getRange(0, -1, o, -1, t), x.objs.viewportRange = e.getRange(0, -1, l, -1, i), x.objs.rowHeaderRange = e.getRange(-1, 0, l, 1, a)
                                                }()
                                            },
                                            reDraw: function () {
                                                x.objs.spread.suspendPaint(), x.objs.prepareTableData(), x.objs.config(), x.objs.draw(), x.objs.setStyles(), x.objs.spread.resumePaint()
                                            },
                                            drawHeader: function () {
                                                var e = x.objs.sheet,
                                                    t = x.objs.colHeader,
                                                    a = x.objs.joinTableConfig,
                                                    i = a.joinTbHeaderCol,
                                                    r = a.joinTbHeaderList;
                                                ! function () {
                                                    for (var a = 0; a < i; a++) {
                                                        var n = {
                                                                text: 0 == a ? u : r[a],
                                                                val: r[a],
                                                                col: a,
                                                                row: 0
                                                            },
                                                            o = e.getCell(0, a, t);
                                                        o.value(n.text), x.objs.setColumnWidth(o, t)
                                                    }
                                                }()
                                            },
                                            drawViewport: function () {
                                                function e(e, t) {
                                                    var a = "";
                                                    if (a = e[{
                                                            0: "check",
                                                            1: "original_nick_name",
                                                            2: "nick_name",
                                                            3: "type",
                                                            4: "comment"
                                                        }[t]], 3 == t) switch (a) {
                                                        case "string":
                                                            a = _;
                                                            break;
                                                        case "number":
                                                            a = b;
                                                            break;
                                                        case "date":
                                                            a = v
                                                    }
                                                    return a
                                                }
                                                var a = (x.objs.sheet, x.objs.spreadNS, x.objs.viewport),
                                                    i = x.objs.joinTableConfig,
                                                    r = i.joinTbHeaderRow,
                                                    n = i.joinTbHeaderCol,
                                                    o = i.joinTbHeaderList,
                                                    l = i.joinTbBodyRow,
                                                    s = i.joinTbBodyCol,
                                                    d = i.joinTbBodyList,
                                                    c = 0,
                                                    u = 0;
                                                ! function () {
                                                    var i = x.objs.sheet,
                                                        f = l + r,
                                                        p = x.objs.specialChartField;
                                                    i.setRowCount(f, a), i.setColumnCount(s, a);
                                                    for (var g = 0; g < f; g++)
                                                        if (0 == g) {
                                                            for (c = 0; c < n; c++) {
                                                                var h = {
                                                                        text: 0 == c ? "" : o[c],
                                                                        val: o[c],
                                                                        col: c,
                                                                        row: g,
                                                                        type: "header",
                                                                        data: x.objs.joinTableData
                                                                    },
                                                                    m = i.getCell(g, c, a);
                                                                m.value(h.text)
                                                            }
                                                            x.objs.setColumnWidth(m, a)
                                                        } else {
                                                            u = g - 1;
                                                            var _ = d[u];
                                                            for (c = 0; c < s; c++) {
                                                                var b = e(_, c),
                                                                    v = {
                                                                        text: 0 != c && 2 != c && 4 != c || t.specialType ? b : "",
                                                                        val: b,
                                                                        col: c,
                                                                        row: g,
                                                                        type: "body",
                                                                        data: _
                                                                    },
                                                                    y = i.getCell(g, c, a);
                                                                "chart" == _.special_type && 1 == c && p.push({
                                                                    row: g,
                                                                    col: c
                                                                }), y.value(v.text)
                                                            }
                                                            x.objs.setColumnWidth(y, a)
                                                        }
                                                }()
                                            },
                                            initCornerTheme: function (e) {
                                                var t = x.objs.cornerStyleDom = document.createElement("style"),
                                                    a = ".gc-corner-triangle-normal {border-style:solid;border-left-color: $borderTbHeader !important;border-right-color: $borderTbHeader !important;border-bottom-color: $borderTbHeader !important;border-top-color: $borderTbHeader !important;background-color: $borderTbHeader !important;}";
                                                a = a.replace(/\$borderTbHeader/g, e), t.type = "text/css", t.styleSheet ? t.styleSheet.cssText = a : t.innerHTML = a, document.getElementsByTagName("head")[0].appendChild(t)
                                            }
                                        }
                                    }
                                },
                                L = function () {
                                    var e = x.objs.spread = new GC.Spread.Sheets.Workbook(y[0], {
                                            sheetCount: 1
                                        }),
                                        t = x.objs.spreadNS = GC.Spread.Sheets;
                                    x.objs.lineStyle = t.LineStyle.thin;
                                    var a = x.objs.sheetArea = t.SheetArea;
                                    x.objs.sheet = e.getActiveSheet(), x.objs.colHeader = a.colHeader, x.objs.viewport = a.viewport, x.objs.rowHeader = a.rowHeader, x.objs.corner = a.corner, x.objs.hAlign = t.HorizontalAlign, x.objs.vAlign = t.VerticalAlign, x.objs.underlineStyle = t.TextDecorationType.underline, x.objs.canvas = x.objs.getCanvas(), x.objs.rightSpaceLock = !1, x.objs.init()
                                },
                                k = function () {
                                    C(), L()
                                },
                                x = {};
                            t.specialType = t.$eval(i.specialType), t.canvasTableData = angular.copy(t.tableData), bdp.loadjs({
                                callback: k,
                                src: "https://s1.bdp.cn/static/js/lib/spreadjs.min_4b931ef.js"
                            }), t.$on("broadcastShowRepeatField", function (e, a) {
                                if (a) {
                                    if (t.specialType) return !1;
                                    var i = angular.copy(t.tableData),
                                        r = [];
                                    a.show && (t.tableData.fields.map(function (e) {
                                        e.isRepeat && r.push(e)
                                    }), i.fields = r), t.canvasTableData = i, x.objs.reDraw()
                                }
                            }), t.$on("$destroy", function () {
                                if ($(window).off("resize.redrawCanvasTable"), t.canvasTableData = null, x && x.objs) {
                                    for (var e in x.objs) {
                                        var a = x.objs[e];
                                        a && a.destroy && a.destroy()
                                    }
                                    x = null
                                }
                            }), $(window).on("resize.redrawCanvasTable", bdp.utils.debounce(function () {
                                x = null, k()
                            }, 200))
                        }
                    }
                }
                angular.module("BC.controllers.dataSource")
                .directive("joinTableField", e)
                .directive("joinTableCanvas", t), 
                e.$inject = ["errHint", "$jsTipTranslate", "$timeout"], 
                t.$inject = ["$rootScope", "errHint", "$jsTipTranslate", "$timeout"]
            }(), 
            angular.module("BC.controllers.dataSource")
            .directive("showRelationProduce", ["$rootScope", "commonService", "$timeout", "$jsTipTranslate", "errHint", function (e, t, a, i, r) {
                return {
                    restrict: "A",
                    link: function (t, r, n) {
                        function o() {
                            t.relationColors = {
                                bgLinkPanel: 1 == e.usedThemeId || 1 == $.cookie("theme_id") ? "#24273E" : "#fff",
                                fontTextBlock: 1 == e.usedThemeId || 1 == $.cookie("theme_id") ? "#9D9EA8" : "#11121B"
                            }
                        }

                        function l(e) {
                            var t = angular.element(".relation-produce").scrollTop();
                            angular.element("#show_relation_produce").children("div:eq(0)").scrollLeft();
                            if ("hide" == e) r.parent().parent().parent().parent().find(".relation-node-message").css({
                                display: "none"
                            });
                            else {
                                var a = h.transformDocToView(new go.Point(e.x, e.y)),
                                    i = 0;
                                i = parseInt(r.parent().width()) < a.x + 350 ? -320 : 90, r.parent().parent().parent().parent().find(".relation-node-message.rela-table").css({
                                    left: a.x + i,
                                    top: a.y + 116 - t,
                                    display: "block"
                                })
                            }
                        }

                        function s(a) {
                            var i = "";
                            switch (a.update_status) {
                                case 1:
                                    i = "zh" == e.language ? "更新成功" : "Success";
                                    break;
                                case 0:
                                case 3:
                                case 6:
                                    i = "zh" == e.language ? "更新中" : "Updating";
                                    break;
                                case 2:
                                    i = "zh" == e.language ? "更新失败" : "Failed"
                            }
                            var r = "tbType." + bdp.bdpTables.getTableTypeForShow(a);
                            t.relationNodeData = {
                                tb_id: a.tb_id,
                                tb_name: a.tb_name,
                                tb_type: t.tips[r],
                                schema_total: a.schema_total,
                                update_status: a.update_status,
                                update_status_str: i,
                                update_time: a.update_time
                            }, t.$$phase || t.$digest()
                        }

                        function d(e) {
                            var t = "#40A276";
                            switch (e) {
                                case 1:
                                    t = "#40A276";
                                    break;
                                case 3:
                                    t = "#FFC063";
                                    break;
                                case 2:
                                    t = "#EE4B4B"
                            }
                            return t
                        }

                        function c() {
                            h.nodeTemplate = g(go.Node, "Horizontal", {
                                selectionAdorned: !1
                            }, g(go.Panel, "Auto", {
                                cursor: "pointer"
                            }, g(go.Shape, "File", {
                                stroke: null
                            }, new go.Binding("figure", "figure"), new go.Binding("fill", "update_status", d)), g(go.TextBlock, "Default Text", {
                                margin: new go.Margin(2, 0, 8, 0),
                                stroke: "white",
                                font: "12px sans-serif bold",
                                overflow: go.TextBlock.OverflowEllipsis,
                                wrap: go.TextBlock.None,
                                maxSize: new go.Size(100, NaN),
                                minSize: new go.Size(100, NaN),
                                textAlign: "center"
                            }, new go.Binding("text", "tb_name"))), {
                                click: function (t, a) {
                                    "1" != a.data.key && (e.$broadcast("skipTargetTable", a.data.tb_id), r.parent().parent().parent().parent().find(".relation-node-message").css({
                                        display: "none"
                                    }))
                                },
                                mouseEnter: function (e, a) {
                                    t.showRelationProduceLoading || (s(a.data), l(a.position))
                                },
                                mouseLeave: function (e, t) {
                                    l("hide")
                                }
                            })
                        }

                        function u(t) {
                            var a = "";
                            switch (t) {
                                case 0:
                                    a = "zh" == e.language ? "多表关联" : "Join";
                                    break;
                                case 1:
                                    a = "zh" == e.language ? "数据聚合" : "Aggr";
                                    break;
                                case 2:
                                    a = "zh" == e.language ? "追加合并" : "Union";
                                    break;
                                case 3:
                                    a = "zh" == e.language ? "SQL提取" : "Sql";
                                    break;
                                case 7:
                                    a = "zh" == e.language ? "二维转一维" : "Transpose";
                                    break;
                                default:
                                    a = ""
                            }
                            return a
                        }

                        function f() {
                            h.linkTemplate = g(go.Link, {
                                routing: go.Link.Orthogonal,
                                corner: 0
                            }, g(go.Shape, {
                                strokeWidth: 2,
                                stroke: "#5182E4",
                                isPanelMain: !0
                            }), g(go.Panel, "Auto", {
                                segmentIndex: 0,
                                segmentOffset: new go.Point(40, 12),
                                segmentOrientation: go.Link.OrientUpright
                            }, g(go.Shape, "Rectangle", {
                                fill: t.relationColors.bgLinkPanel,
                                stroke: null,
                                strokeWidth: 1,
                                width: 60,
                                height: 20
                            }), g(go.TextBlock, "join", {
                                margin: 0,
                                stroke: t.relationColors.fontTextBlock,
                                font: "10px sans-serif bold"
                            }, new go.Binding("text", "produce_type", u))))
                        }

                        function p() {
                            "path" == t.relationView.view && (o(), a(function () {
                                c(), f(), r.parent().parent().parent().parent().find(".relation-node-message").css({
                                    display: "none"
                                }), t.$$phase || t.$digest(), h.model = m
                            }, 10))
                        }
                        t.relationNodeData = {
                            tb_id: "",
                            tb_name: "",
                            tb_type: "",
                            schema_total: "",
                            update_status: "",
                            update_status_str: "",
                            update_time: ""
                        }, t.$on("showRelationMapData", function (e, a) {
                            a && a.length > 0 && (t.exportTableName = a[0] && a[0].tb_name || "过程视图", r.parent().parent().parent().parent().find(".relation-node-message").css({
                                display: "none"
                            }), o(), c(), f(), m.nodeDataArray = a, h.model = m, t.showRelationProduceLoading = !1)
                        }), o();
                        var g, h, m;
                        ! function () {
                            g = go.GraphObject.make, h = g(go.Diagram, "show_relation_produce", {
                                contentAlignment: new go.Spot(.02, 0, 0, 0),
                                allowMove: !1,
                                allowZoom: !1,
                                layout: g(go.TreeLayout, {
                                    angle: 180,
                                    layerSpacing: 150
                                }),
                                AnimationFinished: function () {
                                    t.showRelationProduceLoading = !1, t.$$phase || t.$digest()
                                }
                            }), m = g(go.TreeModel)
                        }(), angular.element(".relation-produce").scroll(function () {
                            r.parent().parent().parent().parent().find(".relation-node-message").css({
                                display: "none"
                            })
                        }), c(), f(), t.$on("refresh-relation-path", function () {
                            p()
                        }), e.$on("$translateChangeSuccess", function () {
                            p()
                        }), t.exportProcedureJpg = function () {
                            var e, a, i = $("#show_relation_produce");
                            e = i.find("canvas").next("div").children("div").width(), e = e <= 1 ? i.find("canvas").width() : e, a = i.find("canvas").next("div").next("div").children("div").height(), a = a <= 1 ? i.find("canvas").height() : a;
                            var r = h.makeImage({
                                    scale: 1,
                                    type: "image/png",
                                    background: t.relationColors.bgLinkPanel,
                                    maxSize: new go.Size(e + 100, a + 100)
                                }),
                                n = "<img src='" + r.src + "' style='margin:10px'>";
                            Highcharts.post("/api/chart/export_png", {
                                filename: t.exportTableName,
                                type: "image/png",
                                background: t.relationColors.bgLinkPanel,
                                width: e + 20,
                                height: a + 20,
                                svg: n
                            })
                        }, i(["wb.joinTable", "wb.polymerTable", "wb.unionTable", "wb.scriptTable", "tbType.excel", "tbType.share", "tbType.allot", "tbType.public", "tbType.join", "tbType.union", "tbType.transpose", "tbType.aggr", "tbType.sql", "tbType.extract", "tbType.db", "tbType.opends"], t)
                    }
                }
            }])
            .directive("showCurrentRelation", ["$rootScope", "$timeout", "$jsTipTranslate", "errHint", function (e, t, a, i) {
                return {
                    restrict: "A",
                    link: function (i, r, n) {
                        function o() {
                            i.relationColors = {
                                bgLinkPanel: 1 == e.usedThemeId || 1 == $.cookie("theme_id") ? "#24273E" : "#fff",
                                fontTextBlock: 1 == e.usedThemeId || 1 == $.cookie("theme_id") ? "#9D9EA8" : "#11121B"
                            }
                        }

                        function l(e, t) {
                            var a = angular.element("#show_current_relation").children("div:eq(0)").scrollLeft();
                            if (a = 0, "hide" == e) r.parent().parent().parent().parent().find(".relation-node-message").css({
                                display: "none"
                            });
                            else {
                                r.parent().parent().parent().parent().find(".relation-node-message").css({
                                    display: "none"
                                });
                                var n = y.transformDocToView(new go.Point(e.x, e.y)),
                                    o = 0;
                                "table" == t || "chart" == t ? o = parseInt(r.parent().width()) < n.x + parseInt(angular.element(".relation-node-message").width()) + 10 ? -320 : 90 : "user" == t ? o = parseInt(r.parent().width()) < n.x + parseInt(angular.element(".relation-node-message.rela-user").width()) + 50 ? 10 - parseInt(angular.element(".relation-node-message.rela-user").width()) : 90 : "group" == t && (o = parseInt(r.parent().width()) < n.x + parseInt(angular.element(".relation-node-message.rela-group").width()) + 60 ? 10 - parseInt(angular.element(".relation-node-message.rela-group").width()) : 90);
                                var l = 0,
                                    s = parseInt(angular.element("#show_relation_produce").height());
                                l = i.hasRelationMap ? s + 56 > 200 ? s : 140 : -25, "table" == t && r.parent().parent().parent().parent().find(".relation-node-message.rela-table").css({
                                    left: n.x + o - a,
                                    top: n.y + l - 0,
                                    display: "block"
                                }), "chart" == t && r.parent().parent().parent().parent().find(".relation-node-message.rela-chart").css({
                                    left: n.x + o - a,
                                    top: n.y + l + 100,
                                    display: "block"
                                }), "user" == t && r.parent().parent().parent().parent().find(".relation-node-message.rela-user").css({
                                    left: n.x + o - a,
                                    top: n.y + l + 160,
                                    display: "block"
                                }), "group" == t && r.parent().parent().parent().parent().find(".relation-node-message.rela-group").css({
                                    left: n.x + o - a,
                                    top: n.y + l + 160,
                                    display: "block"
                                })
                            }
                        }

                        function s(t) {
                            if ("table" == t.node_type) {
                                var a = "";
                                switch (t.update_status) {
                                    case 1:
                                        a = "zh" == e.language ? "更新成功" : "Success";
                                        break;
                                    case 0:
                                    case 3:
                                    case 6:
                                        a = "zh" == e.language ? "更新中" : "Updating";
                                        break;
                                    case 2:
                                        a = "zh" == e.language ? "更新失败" : "Failed"
                                }
                                var r = "tbType." + bdp.bdpTables.getTableTypeForShow(t);
                                i.relationNodeData = {
                                    tb_id: t.tb_id,
                                    tb_name: t.name,
                                    tb_type: i.tips[r],
                                    schema_total: t.schema_total,
                                    update_status: t.update_status,
                                    update_status_str: a,
                                    update_time: t.update_time
                                }
                            }
                            "chart" == t.node_type && (i.relationNodeData = {
                                ct_name: t.name,
                                dsh_name: t.dsh_name,
                                proj_name: t.proj_name
                            }), "user" != t.node_type && "group" != t.node_type || (i.relationNodeData = {
                                name: t.name
                            }), i.$$phase || i.$digest()
                        }

                        function d(e) {
                            var t = "File";
                            switch (e) {
                                case "classify":
                                    t = "Rectangle";
                                    break;
                                default:
                                    t = "File"
                            }
                            return t
                        }

                        function c(e) {
                            var t = "#5182E4";
                            switch (e) {
                                case "classify":
                                    t = null;
                                    break;
                                default:
                                    t = "#5182E4"
                            }
                            return t
                        }

                        function u(e) {
                            var t = null;
                            switch (e) {
                                case "classify":
                                    t = "#5182E4";
                                    break;
                                default:
                                    t = null
                            }
                            return t
                        }

                        function f(e) {
                            var t = "#fff";
                            switch (e) {
                                case "classify":
                                    t = i.relationColors.fontTextBlock;
                                    break;
                                default:
                                    t = "#fff"
                            }
                            return t
                        }

                        function p(e) {
                            var t = new go.Margin(2, 0, 8, 0);
                            switch (e) {
                                case "classify":
                                    t = new go.Margin(8, 0, 8, 0);
                                    break;
                                default:
                                    t = new go.Margin(2, 0, 8, 0)
                            }
                            return t
                        }

                        function g(e) {
                            var t = "pointer";
                            switch (e) {
                                case "classify":
                                case "user":
                                case "group":
                                    t = "default";
                                    break;
                                default:
                                    t = "pointer"
                            }
                            return t
                        }

                        function h() {
                            y.nodeTemplate = v(go.Node, "Horizontal", {
                                selectionAdorned: !1
                            }, v(go.Panel, "Auto", new go.Binding("cursor", "node_type", g), v(go.Shape, "File", new go.Binding("figure", "node_type", d), new go.Binding("fill", "node_type", c), new go.Binding("stroke", "node_type", u)), v(go.TextBlock, "Default Text", {
                                margin: new go.Margin(2, 0, 8, 0),
                                font: "12px sans-serif bold",
                                overflow: go.TextBlock.OverflowEllipsis,
                                wrap: go.TextBlock.None,
                                maxSize: new go.Size(100, NaN),
                                minSize: new go.Size(100, NaN),
                                textAlign: "center"
                            }, new go.Binding("text", "name"), new go.Binding("stroke", "node_type", f), new go.Binding("margin", "node_type", p))), {
                                click: function (t, a) {
                                    "table" == a.data.node_type && "1" != a.data.key && (e.$broadcast("skipTargetTable", a.data.tb_id), r.parent().parent().parent().parent().find(".relation-node-message").css({
                                        display: "none"
                                    })), "chart" == a.data.node_type && (i.$emit("jumpToDashChart", a.data), r.parent().parent().parent().parent().find(".relation-node-message").css({
                                        display: "none"
                                    }))
                                },
                                mouseEnter: function (e, t) {
                                    i.showCurrentRelationLoading || "classify" != t.data.node_type && (s(t.data), l(t.position, t.data.node_type))
                                },
                                mouseLeave: function (e, t) {
                                    "classify" != t.data.node_type && l("hide", t.data.node_type)
                                }
                            })
                        }

                        function m(t) {
                            var a = "";
                            switch (t) {
                                case 0:
                                    a = "zh" == e.language ? "多表关联" : "Join";
                                    break;
                                case 1:
                                    a = "zh" == e.language ? "数据聚合" : "Aggr";
                                    break;
                                case 2:
                                    a = "zh" == e.language ? "追加合并" : "Union";
                                    break;
                                case 3:
                                    a = "zh" == e.language ? "SQL提取" : "Sql";
                                    break;
                                case 7:
                                    a = "zh" == e.language ? "二维转一维" : "Transpose";
                                    break;
                                default:
                                    a = ""
                            }
                            return a
                        }

                        function _() {
                            y.linkTemplate = v(go.Link, {
                                routing: go.Link.Orthogonal,
                                corner: 0
                            }, v(go.Shape, {
                                strokeWidth: 2,
                                stroke: "#5182E4",
                                isPanelMain: !0
                            }), v(go.Panel, "Auto", {
                                segmentIndex: -1,
                                segmentOffset: new go.Point(-40, -12)
                            }, v(go.Shape, "Rectangle", {
                                fill: i.relationColors.bgLinkPanel,
                                stroke: null,
                                strokeWidth: 1,
                                width: 60,
                                height: 20
                            }), v(go.TextBlock, "join", {
                                margin: 0,
                                stroke: i.relationColors.fontTextBlock,
                                font: "10px sans-serif bold"
                            }, new go.Binding("text", "produce_type", m))))
                        }

                        function b() {
                            "path" == i.relationView.view && (o(), t(function () {
                                h(), _(), r.parent().parent().parent().parent().find(".relation-node-message").css({
                                    display: "none"
                                }), i.showCurrentRelationLoading = !0, i.$$phase || i.$digest(), y.model = w
                            }, 10))
                        }
                        i.relationNodeData = {
                            tb_id: "",
                            tb_name: "",
                            tb_type: "",
                            schema_total: "",
                            update_status: "",
                            update_status_str: "",
                            update_time: ""
                        }, i.$on("showCurrentRelationData", function (e, t) {
                            t.length > 0 && (o(), h(), _(), w.nodeDataArray = t, y.model = w, i.showCurrentRelationLoading = !1)
                        }), o();
                        var v, y, w;
                        ! function () {
                            v = go.GraphObject.make, y = v(go.Diagram, "show_current_relation", {
                                contentAlignment: new go.Spot(.02, 0, 0, 0),
                                allowMove: !1,
                                allowZoom: !1,
                                layout: v(go.TreeLayout, {
                                    angle: 0,
                                    layerSpacing: 150
                                }),
                                AnimationFinished: function () {
                                    i.showCurrentRelationLoading = !1, i.$$phase || i.$digest()
                                }
                            }), w = v(go.TreeModel)
                        }(), angular.element(".current-relation").scroll(function () {
                            r.parent().parent().parent().parent().find(".relation-node-message").css({
                                display: "none"
                            })
                        }), h(), _(), i.$on("refresh-relation-path", function () {
                            b()
                        }), e.$on("$translateChangeSuccess", function () {
                            angular.forEach(w.nodeDataArray, function (t) {
                                switch (t.key) {
                                    case "2":
                                        t.name = "zh" == e.language ? "工作表" : "table", t.produce_type = "zh" == e.language ? "工作表" : "table";
                                        break;
                                    case "3":
                                        t.name = "zh" == e.language ? "图表" : "Chart", t.produce_type = "zh" == e.language ? "图表" : "Chart";
                                        break;
                                    case "4":
                                        t.name = "zh" == e.language ? "用户" : "User", t.produce_type = "zh" == e.language ? "用户" : "User";
                                        break;
                                    case "5":
                                        t.name = "zh" == e.language ? "组" : "Group", t.produce_type = "zh" == e.language ? "组" : "Group"
                                }
                            }), b()
                        }), a(["wb.joinTable", "wb.polymerTable", "wb.unionTable", "wb.scriptTable", "tbType.excel", "tbType.share", "tbType.allot", "tbType.public", "tbType.join", "tbType.union", "tbType.transpose", "tbType.aggr", "tbType.sql", "tbType.extract", "tbType.db", "tbType.opends"], i)
                    }
                }
            }]), 
            angular.module("BC.controllers.dataSource")
            .config(["$compileProvider", function (e) {
                e.aHrefSanitizationWhitelist(/\s*/)
            }])
            .constant("goColors", {
                bg: "#5182E4",
                highlightBg: "#ff8555a",
                font: "#fff",
                highlightFont: "#fff"
            })
            .directive("goLinkEdit", [function () {
                return {
                    link: function (e, t, a) {}
                }
            }])
            .directive("goDiagram", ["goColors", "$rootScope", "$timeout", "$document", "$jsTipTranslate", "errHint", function (e, t, a, i, r, n) {
                return angular.map = function (e, t) {
                    for (var a = [], i = 0, r = e.length; i < r; i++) a.push(t(e[i], i, e));
                    return a
                }, {
                    link: function (o, l, s) {
                        function d(e, t) {
                            for (var a = $scope.fieldsMap[e] || [], i = $scope.fieldsMap[t] || [], r = 0, n = a.length; r < n; r++)
                                for (var o = a[r], l = 0, s = i.length; l < s; l++) {
                                    var d = i[l];
                                    if (o.nick_name == d.nick_name) return {
                                        from: o,
                                        to: d
                                    }
                                }
                            return {
                                from: a[0],
                                to: i[0]
                            }
                        }

                        function c() {
                            $scope.collect_node()
                        }

                        function u() {
                            for (var e = $scope.currentLink.join_fields, t = 0, a = e.length; t < a; t++) {
                                var i = e[t].join_field;
                                if (!i || !i[0] || !i[1]) return n($scope.tips["join.fieldCanNotNull"]), !1
                            }
                            return !0
                        }

                        function f(e, t) {
                            var a = JSON.parse($scope.diagram.model.toJson()).linkDataArray,
                                i = !0,
                                r = 0,
                                o = [];
                            return angular.forEach(a, function (e, t) {
                                "full join" == e.join_type && (r++, o.push(t))
                            }), $.inArray(t, o) == -1 && r++, r >= 2 && (i = !1, n($scope.tips["join.fullJoinTip"])), i
                        }
                        $scope = o.$parent.$parent;
                        var p = function () {
                                function a() {
                                    go.ForceDirectedLayout.call(this)
                                }
                                go.Diagram.inherit(a, go.ForceDirectedLayout), a.prototype.makeNetwork = function (e) {
                                    var t = go.ForceDirectedLayout.prototype.makeNetwork.call(this, e);
                                    return t.vertexes.each(function (e) {
                                        var t = e.node;
                                        null !== t && (e.isFixed = t.isSelected || !("number" == typeof t.location.x && isNaN(t.location.x)))
                                    }), t
                                };
                                var i = go.GraphObject.make;
                                return {
                                    AppLayout: a,
                                    goWidget: {
                                        makeButton: function (e, t, a) {
                                            return void 0 === a && (a = function () {
                                                return !0
                                            }), i("ContextMenuButton", i(go.Shape, "Rectangle", {
                                                stroke: null,
                                                fill: "#fff",
                                                width: 80,
                                                height: 28,
                                                cursor: "pointer"
                                            }), i(go.TextBlock, {
                                                stroke: "#666",
                                                margin: new go.Margin(5, 10, 0, 10)
                                            }, e), {
                                                click: t
                                            }, new go.Binding("visible", "", a).ofObject())
                                        },
                                        textLabel: function (t, a) {
                                            return i(go.TextBlock, angular.extend({
                                                font: "10px",
                                                wrap: go.TextBlock.WrapDesiredSize,
                                                margin: 0,
                                                textAlign: "center",
                                                stroke: e.font,
                                                alignments: go.Spot.Bottom
                                            }), new go.Binding("text", a || "text").makeTwoWay())
                                        },
                                        tbNode: function (a, r, n) {
                                            return i(go.Node, "Spot", new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), {
                                                locationSpot: go.Spot.Center,
                                                locationObjectName: "SHAPE",
                                                selectionAdorned: !1
                                            }, i(go.Panel, "Auto", i(go.Shape, "File", {
                                                fill: e.bg,
                                                stroke: null
                                            }, new go.Binding("figure", "figure")), i(go.Panel, "Horizontal", i(go.TextBlock, {
                                                stroke: e.highlightFont,
                                                margin: new go.Margin(2, 4, 2, 10),
                                                maxSize: new go.Size(160, NaN),
                                                overflow: go.TextBlock.OverflowEllipsis,
                                                wrap: go.TextBlock.WrapFit,
                                                height: 20
                                            }, new go.Binding("text", a || "text").makeTwoWay()), i(go.Picture, {
                                                width: 16,
                                                height: 16,
                                                maxSize: new go.Size(16, 16),
                                                margin: new go.Margin(-2, 8, 0, 0),
                                                source: "/static/images/join_triangle_down_white.png"
                                            }))), {
                                                cursor: n ? "pointer" : "default",
                                                click: function (e, a) {
                                                    n && t.$broadcast("skipTargetTable", a.data.tb_id)
                                                }
                                            })
                                        },
                                        joinLink: function (e) {
                                            return i(go.Link, {
                                                toShortLength: 4,
                                                layerName: "Background"
                                            }, i(go.Shape, {
                                                isPanelMain: !0,
                                                stroke: "rgba(81, 130, 228, .6)",
                                                strokeWidth: 2
                                            }), i(go.Shape, {
                                                toArrow: "standard",
                                                stroke: null,
                                                fill: "rgba(81, 130, 228, .6)"
                                            }), i(go.Panel, "Auto", i(go.Shape, "RoundedRectangle", {
                                                fill: "#fff",
                                                stroke: "#A3ABB0",
                                                strokeWidth: 1,
                                                width: 58,
                                                height: 20
                                            }), i(go.TextBlock, "join", {
                                                margin: 5,
                                                stroke: "#333"
                                            }, new go.Binding("text", "join_type"))))
                                        }
                                    }
                                }
                            }(),
                            g = p.goWidget,
                            h = go.GraphObject.make,
                            m = h(go.Diagram, l[0], {
                                initialContentAlignment: go.Spot.Center,
                                layout: h(go.LayeredDigraphLayout)
                            });
                        $scope.dragOption.parentNode = l[0];
                        var _ = m.layout;
                        _.direction = 180, _.layerSpacing = 160, _.columnSpacing = 30, window.diagram = $scope.diagram = m, $scope.$on("broadcastRedrawJoinModule", function (e) {
                            a(function () {
                                m.requestUpdate(), m.model = go.Model.fromJson(m.model.toJson())
                            }, 10)
                        }), $scope.dragStart = function (e, t, a) {}, $scope.updateWorktableListStyle = function (e) {
                            m.model.nodeDataArray.length > 0 ? m.model.nodeDataArray.forEach(function (e) {
                                var t = [];
                                m.model.nodeDataArray.forEach(function (a) {
                                    a.tb_id != e.tb_id && t.push(a.tb_id)
                                }), $scope.folderList.forEach(function (a) {
                                    "folder_root" != a.folder_id && (a.sub_folders.forEach(function (a) {
                                        a.tb_list.forEach(function (a) {
                                            a.tb_id == e.tb_id ? a.in_chart = !0 : t.indexOf(a.tb_id) <= -1 && (a.in_chart = !1)
                                        })
                                    }), a.tb_list.forEach(function (a) {
                                        a.tb_id == e.tb_id ? a.in_chart = !0 : t.indexOf(a.tb_id) <= -1 && (a.in_chart = !1)
                                    })), a.tb_list.forEach(function (a) {
                                        a.tb_id == e.tb_id ? a.in_chart = !0 : t.indexOf(a.tb_id) <= -1 && (a.in_chart = !1)
                                    })
                                })
                            }) : $scope.folderList.forEach(function (e) {
                                "folder_root" != e.folder_id && (e.sub_folders.forEach(function (e) {
                                    e.tb_list.forEach(function (e) {
                                        e.in_chart = !1
                                    })
                                }), e.tb_list.forEach(function (e) {
                                    e.in_chart = !1
                                })), e.tb_list.forEach(function (e) {
                                    e.in_chart = !1
                                })
                            }), e || $scope.$digest()
                        }, $scope.$on("updateWorktableListStyle", $scope.updateWorktableListStyle), $scope.onDrop = function (e) {
                            var t = $scope.dragOption.overlap_node;
                            if (!$scope.dragOption.canDrop()) return n($scope.tips["join.canNotEditChart"]), !1;
                            if ($scope.dragOption.diagram_nodes.length > 0 && !t) return n($scope.tips["join.mustDropOnNodes"]), !1;
                            if (!$scope.checkOnTbWillin($scope.dragOption.dragTb.tb_id)) return !1;
                            var a, i = $scope.dragOption.dragTb,
                                r = angular.extend({}, {
                                    key: i.tb_id,
                                    tb_id: i.tb_id,
                                    name: i.name
                                });
                            $scope.dragOption.diagram_nodes.length ? (a = m.model, a.nodeDataArray.push(r), $scope.joinViewFunc.getTbField(i.tb_id).then(function () {
                                var e = d(i.tb_id, t.data.key),
                                    n = e.from ? e.from.fid : "",
                                    o = e.to ? e.to.fid : "";
                                a.linkDataArray.push({
                                    from: i.tb_id,
                                    to: t.data.key,
                                    join_type: "left join",
                                    join_fields: [{
                                        join_field: [n, o]
                                    }]
                                }), r.fields = [].concat($scope.fieldsMap[i.tb_id]), m.model = go.Model.fromJson(m.model.toJson()), c()
                            })) : (a = go.GraphObject.make(go.GraphLinksModel), a.nodeDataArray = [r], m.model = a, $scope.joinViewFunc.getTbField(i.tb_id).then(function () {
                                r.fields = [].concat($scope.fieldsMap[i.tb_id]), c()
                            }))
                        }, $scope.collect_node = function () {
                            $scope.dragOption.diagram_nodes = angular.map(m.model.nodeDataArray, function (e) {
                                return m.findNodeForKey(e.tb_id)
                            })
                        }, $scope.currentLink = null, $scope.to_tb_fields = [], $scope.from_tb_fields = [], $scope.showLinkEdit = function (e, t, a, i) {
                            $scope.$apply(function () {
                                $scope.currentLink = angular.copy(a), $scope.from_tb = e, $scope.to_tb = t, $scope.from_tb_fields = $scope.fieldsMap[a.from], $scope.to_tb_fields = $scope.fieldsMap[a.to], setTimeout(function () {
                                    var e = i.x + i.width / 2 + 25,
                                        t = i.y + i.height / 2 + 15,
                                        a = m.transformDocToView(new go.Point(e, t));
                                    l.parent().width(), l.parent().height();
                                    l.parent().parent().find(".J-merge-field-select").css({
                                        left: a.x - 55,
                                        top: a.y,
                                        opacity: 1
                                    })
                                }, 0)
                            })
                        }, $scope.showContextMenu = function (e, t) {
                            $scope.clickingNode = !0, $scope.currentPartInfo = t;
                            var a = e.x + e.width / 2,
                                i = e.y + e.height / 2,
                                r = m.transformDocToView(new go.Point(a, i)),
                                n = e.width;
                            $(".J-merge-table-context-menu").toggle().css({
                                left: r.x + n / 2 - 80,
                                top: r.y + 16,
                                width: 80
                            }), $scope.replaceTableInChart = function () {
                                $scope.openReplaceTableDialog(t.data)
                            }, $scope.deleteTableInChart = function () {
                                setTimeout(function () {
                                    t.diagram.commandHandler.canDeleteSelection() && t.diagram.commandHandler.deleteSelection()
                                }, 0)
                            }
                        };
                        var b = function () {
                            $scope.clickingNode || $(".J-merge-table-context-menu").hide(), $scope.clickingNode = !1
                        };
                        i.bind("click", b), $scope.$on("$destroy", function () {
                                i.unbind("click", b)
                            }), $scope.changeJoinType = function (e) {
                                $scope.currentLink.join_type = e, "full join" == e && $scope.joinResultUpdateMode() && $scope.showWarningDialog("join.fullJoinCantUpdateIncre")
                            }, $scope.save_field = function () {
                                if (u()) {
                                    for (var e, t = m.model.linkDataArray, a = 0, i = 0, r = t.length; i < r; i++) t[i].from == $scope.currentLink.from && t[i].to == $scope.currentLink.to && (e = t[i], a = i);
                                    if (e) {
                                        var n = $scope.currentLink.join_type;
                                        ("full join" != n || f(n, a)) && (e.join_type = $scope.currentLink.join_type, e.join_fields = $scope.currentLink.join_fields, $scope.redrawDiagram(), $scope.currentLink = null)
                                    }
                                }
                            }, $scope.addField = function () {
                                u() && $scope.currentLink.join_fields.push({
                                    join_field: []
                                })
                            }, $scope.removeField = function (e) {
                                e > 0 ? $scope.currentLink.join_fields.splice(e, 1) : $scope.currentLink.join_fields.length > 1 ? $scope.currentLink.join_fields.splice(e, 1) : $scope.currentLink.join_fields[0].join_field = []
                            }, $scope.hideLinkEdit = function () {
                                $scope.currentLink || ($scope = $scope.$parent);
                                for (var e = $scope.currentLink.join_fields, t = e.length - 1; t >= 0;) {
                                    var a = e[t].join_field;
                                    a && a[0] && a[1] || e.splice(t, 1), t--
                                }
                                $scope.currentLink = null
                            }, $scope.redrawDiagram = function (e, t) {
                                m.model = go.Model.fromJson(e || m.model.toJson())
                            },
                            function () {
                                m.nodeTemplate = g.tbNode("name", !0, !1), m.linkTemplate = g.joinLink()
                            }(),
                            function () {
                                function e() {
                                    for (var e = m.model.nodeDataArray, t = m.model.linkDataArray, a = !1, i = e.length; i; i--) {
                                        for (var r = e[i - 1].key, n = !0, o = 0, l = t.length; o < l; o++)
                                            if (r == t[o].from || r == t[o].to) {
                                                n = !1;
                                                break
                                            }
                                        n && (a = !0, e.length > 1 && e.splice(i - 1, 1))
                                    }
                                    if (a) {
                                        var s = m.model.toJson();
                                        m.clear(), $scope.redrawDiagram(s, "del")
                                    }
                                    $scope.collect_node(), $scope.$apply(function () {
                                        var e = [];
                                        angular.forEach(m.model.nodeDataArray, function (t) {
                                            e.push(t.key)
                                        }), e = e.join("$$$$");
                                        for (var t in $scope.fieldsMap) $scope.fieldsMap.hasOwnProperty(t) && e.indexOf(t) < 0 && delete $scope.fieldsMap[t];
                                        for (var t in $scope.selectedTbs) $scope.selectedTbs.hasOwnProperty(t) && e.indexOf(t) < 0 && delete $scope.selectedTbs[t]
                                    })
                                }
                                m.addDiagramListener("LinkDrawn", function (e) {
                                    console.log("add_a_link")
                                }), m.addDiagramListener("AnimationFinished", function (e) {
                                    $scope.collect_node()
                                }), m.addDiagramListener("ExternalObjectsDropped", function (e) {
                                    console.log(arguments)
                                }), m.addDiagramListener("ObjectSingleClicked", function (e) {
                                    var t = e.subject.part;
                                    $scope.showLinkEdit && $scope.showContextMenu || ($scope = $scope.$parent), t instanceof go.Link && $scope.showLinkEdit(t.fromNode.data, t.toNode.data, t.data, t.actualBounds), t instanceof go.Node && $scope.showContextMenu(t.actualBounds, t)
                                }), m.addDiagramListener("LayoutCompleted", function (e) {
                                    if ($scope.folderList) $scope.updateWorktableListStyle();
                                    else var t = $scope.$watch("folderList", function (e, a) {
                                        e && e.length > 0 && ($scope.updateWorktableListStyle("initial"), t())
                                    })
                                }), m.addDiagramListener("SelectionDeleting", function (e) {
                                    console.log($scope.tips["join.deleteNode"], arguments)
                                }), m.addDiagramListener("SelectionDeleted", function (t) {
                                    if (e(), "add" === $scope.table_view) {
                                        var a = $scope.joinViewData.where.condition.filters;
                                        if (0 == $scope.diagram.model.nodeDataArray.length) a.length = 0;
                                        else
                                            for (var i = a.length; i--;) a[i].tb_id in $scope.selectedTbs || a.splice(i, 1);
                                        $scope.$broadcast("InitializeCurItem"), $scope.$$phase || $scope.$apply()
                                    }
                                })
                            }(), r(["join.deleteNode", "join.canNotEditChart", "join.fieldCanNotNull", "join.tbExists", "join.mustDropOnNodes"], $scope)
                    }
                }
            }])
            .directive("goWbcat", ["goColors", "$timeout", "$rootScope", function (e, t, a) {
                function i() {
                    function t() {
                        go.ForceDirectedLayout.call(this)
                    }
                    go.Diagram.inherit(t, go.ForceDirectedLayout), t.prototype.makeNetwork = function (e) {
                        var t = go.ForceDirectedLayout.prototype.makeNetwork.call(this, e);
                        return t.vertexes.each(function (e) {
                            var t = e.node;
                            null !== t && (e.isFixed = t.isSelected || !("number" == typeof t.location.x && isNaN(t.location.x)))
                        }), t
                    };
                    var i, r = go.GraphObject.make,
                        n = {
                            makeButton: function (e, t, a) {
                                return void 0 === a && (a = function () {
                                    return !0
                                }), r("ContextMenuButton", r(go.Shape, "Rectangle", {
                                    stroke: null,
                                    fill: "#fff",
                                    width: 80,
                                    height: 28,
                                    cursor: "pointer"
                                }), r(go.TextBlock, {
                                    stroke: "#666",
                                    margin: new go.Margin(5, 10, 0, 10)
                                }, e), {
                                    click: t
                                }, new go.Binding("visible", "", a).ofObject())
                            },
                            textLabel: function (t, a) {
                                return r(go.TextBlock, angular.extend({
                                    font: "10px",
                                    wrap: go.TextBlock.WrapDesiredSize,
                                    margin: 0,
                                    textAlign: "center",
                                    stroke: e.font,
                                    alignments: go.Spot.Bottom
                                }), new go.Binding("text", a || "text").makeTwoWay())
                            },
                            tbNode: function (t, i, n) {
                                var o = i ? {
                                    contextMenu: r(go.Adornment, "Vertical", s.replaceButton(), s.delButton())
                                } : {};
                                return r(go.Node, "Spot", new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), {
                                    locationSpot: go.Spot.Center,
                                    locationObjectName: "SHAPE",
                                    selectionAdorned: !1
                                }, r(go.Panel, "Auto", r(go.Shape, "File", {
                                    fill: e.bg,
                                    stroke: null
                                }, new go.Binding("figure", "figure")), r(go.TextBlock, {
                                    stroke: e.highlightFont,
                                    margin: new go.Margin(5, 10, 0, 10),
                                    maxSize: new go.Size(160, NaN),
                                    overflow: go.TextBlock.OverflowEllipsis,
                                    wrap: go.TextBlock.WrapFit,
                                    height: 20
                                }, new go.Binding("text", t || "text").makeTwoWay()), o), {
                                    cursor: n ? "pointer" : "default",
                                    click: function (e, t) {
                                        n && a.$broadcast("skipTargetTable", t.data.tb_id)
                                    }
                                })
                            },
                            joinLink: function (e) {
                                return r(go.Link, {
                                    toShortLength: 4
                                }, r(go.Shape, {
                                    isPanelMain: !0,
                                    stroke: "rgba(81, 130, 228, .6)",
                                    strokeWidth: 2
                                }), r(go.Shape, {
                                    toArrow: "standard",
                                    stroke: null,
                                    fill: "rgba(81, 130, 228, .6)"
                                }), r(go.Panel, "Auto", r(go.Shape, "RoundedRectangle", {
                                    fill: "#fff",
                                    stroke: "#A3ABB0",
                                    strokeWidth: 1,
                                    width: 58,
                                    height: 20
                                }), r(go.TextBlock, "join", {
                                    margin: 5,
                                    stroke: "#333"
                                }, new go.Binding("text", "join_type"))))
                            }
                        },
                        o = "",
                        l = "";
                    "zh" == $.cookie("locale") ? (o = "替换", l = "删除") : (o = "Replace", l = "Delete");
                    var s = {
                        replaceButton: function () {
                            return n.makeButton(o, function () {
                                a.$broadcast("replaceWorktable", i)
                            }, function (e) {
                                return i = e.data, !0
                            })
                        },
                        delButton: function () {
                            return n.makeButton(l, function (e, t) {
                                e.diagram.commandHandler.deleteSelection()
                            }, function (e) {
                                return e.diagram.commandHandler.canDeleteSelection()
                            })
                        }
                    };
                    return {
                        goContextMenu: s,
                        AppLayout: t,
                        goWidget: n
                    }
                }
                return {
                    restrict: "A",
                    link: function (e, a, r) {
                        function n() {
                            d.nodeTemplate = l.tbNode("name", !1, !0), d.linkTemplate = l.joinLink()
                        }
                        var o = i(),
                            l = o.goWidget,
                            s = go.GraphObject.make,
                            d = s(go.Diagram, a[0], {
                                initialContentAlignment: go.Spot.Center,
                                layout: s(go.LayeredDigraphLayout)
                            }),
                            c = d.layout;
                        e.$on("broadcastRedrawJoinModule", function (e, a) {
                            d.requestUpdate(), t(function () {
                                d.model = go.Model.fromJson(d.model.toJson())
                            }, 10)
                        }), e.$watch("modelData.diagram", function (a) {
                            a && (c.direction = 180, c.layerSpacing = 160, c.columnSpacing = 30, e.currentLink = null, t(function () {
                                d.model = go.Model.fromJson(angular.toJson(a)), n()
                            }, 10))
                        }, !0);
                        var u = function (t, i, r, n) {
                            e.$apply(function () {
                                e.currentLink = r, setTimeout(function () {
                                    var e = n.x + n.width / 2 + 25,
                                        t = n.y + n.height / 2 + 15,
                                        i = d.transformDocToView(new go.Point(e, t)),
                                        r = a.parent().width(),
                                        o = a.parent().height(),
                                        l = Math.min(i.x, r - 445),
                                        s = Math.min(i.y, o - 150);
                                    a.parent().find(".J-merge-field-select").css({
                                        left: l,
                                        top: s,
                                        opacity: 1
                                    })
                                }, 0)
                            })
                        };
                        d.addDiagramListener("ObjectSingleClicked", function (e) {
                            var t = e.subject.part;
                            t instanceof go.Link && u(t.fromNode.data, t.toNode.data, t.data, t.actualBounds)
                        })
                    }
                }
            }]),
            function () {
                angular.module("BC.controllers.dataSource")
                .controller("SQLTableCtrl", ["$scope", "$rootScope", "$location", "$timeout", "errHint", "commonService", "$stateParams", "formulaDocument", "ngDialog", "$jsTipTranslate", "verifyTbName", function (e, t, a, i, r, n, o, l, s, d, c) {
                    function u(t) {
                        for (var a = e.fieldMap[t.tb_id], i = e.fieldMap[t.tb_id].length, r = " ", n = 0; n < i; n++) r += a[n].name + ",";
                        r = r.substring(0, r.length - 1), e.$broadcast("insert", r)
                    }

                    function f(t) {
                        var a = t && t.folder_list || [];
                        e.loadingFolderStructure = !0, n.folder.getStructureWithParam({
                            get_root: 1,
                            get_first: 1,
                            folder_list: a
                        }).then(function (t) {
                            function a(e) {
                                angular.forEach(e, function (e) {
                                    angular.forEach(e.tb_list, function (e) {
                                        o.push(e.name)
                                    }), e.sub_folders && e.sub_folders.length > 0 && a(e.sub_folders)
                                })
                            }
                            e.searchingFolderAndTable = !1, e.loadingFolderStructure = !1;
                            var i = angular.element(".J-search-worktable-input").find("input");
                            if (i && i.val()) return !1;
                            var r = t.result.folder_list;
                            e.saveFolderList = angular.copy(r), angular.forEach(e.saveFolderList, function (e) {
                                "folder_root" == e.folder_id && (e.name = "en" == $.cookie("locale") ? "Root" : "根目录")
                            });
                            var n = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.viewData.save_folder_id);
                            e.viewData.save_folder_name = n ? n.name : "", e.original_folderList = angular.copy(r), e.$broadcast("updatefolderList", e.original_folderList), e.folderList = r, p(r);
                            var o = [];
                            a(e.folderList), e.table_name_array = o
                        })
                    }

                    function p(t) {
                        e.tableSplitData = null, e.tableSplitFolder.sectionFolderList = [];
                        var a = bdp.bdpTables.initTableSplitFunc(t, e.tableSplitData, "");
                        e.tableSplitFolder.sectionFolderList = a.sectionFolderList, e.tableSplitData = a.tableSplitData
                    }

                    function g(t) {
                        n.field.getList(t).then(function (a) {
                            0 == a.status && (a = a.result, e.fieldMap[t] = a.schema.filter(function (e) {
                                return !e.formula
                            }), e.fieldMap[t] = bdp.utils.addSpecParamsToFields(e.fieldMap[t]), e.tbTypeMap[t] = a.tb_type)
                        })
                    }
                    t.view = "worktable", 
                    t.show_bdp_header = !1, 
                    e.folderList = null, 
                    e.table_name_array = [], 
                    e.fieldMap = {}, 
                    e.tbTypeMap = {}, 
                    e.requestDone = !0, 
                    e.actionType = void 0 === o.tbId ? "create" : "modify", 
                    e.tbId = o.tbId, 
                    e.tableSplitData = null, 
                    e.viewData = {
                        table_name: "",
                        sql: "",
                        sqlFunctions: "",
                        func_list: [],
                        save_folder_name: "",
                        save_folder_id: "",
                        increase: {}
                    }, 
                    e.tableSplitFolder = {
                        sectionFolderList: []
                    }, 
                    e.viewData.save_folder_id = $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root", e.sqlTablePreview = {
                        open: !0
                    }, 
                    e.tabs = {
                        index: 0
                    }, 
                    e.sqlCodeMirrorLoad = {
                        complete: !1
                    }, 
                    t.pageLoading = !0;
                    var h = {
                        funcQueue: [],
                        loadLibInProgress: !1
                    };
                    thirdPluginLoader({
                        initFun: function () {
                            e.sqlCodeMirrorLoad.complete = !0, e.$$phase || e.$apply()
                        },
                        libSrc: "https://s1.bdp.cn/static/js/lib/bdpFormula/bdp-codemirror_1fb68f2.js",
                        otherSrc: "",
                        libId: window.CodeMirror && window.CM_bdpFormulaPlugin
                    }, h);
                    var m = e.$watch("sqlCodeMirrorLoad.complete", function (e) {
                        e && (t.pageLoading = !1, m())
                    });
                    e.toggleOpenFormula = function () {
                        e.viewData.openFormula = !e.viewData.openFormula
                    }, e.toggleShowFields = function (t) {
                        t.open = !t.open, e.fieldMap[t.tb_id] || g(t.tb_id)
                    }, e.insertAllTable = function (t) {
                        e.fieldMap[t.tb_id] ? u(t) : n.field.getList(t.tb_id).then(function (a) {
                            0 == a.status && (a = a.result, e.fieldMap[t.tb_id] = a.schema.filter(function (e) {
                                return !e.formula
                            }), e.tbTypeMap[t.tb_id] = a.tb_type, u(t))
                        })
                    }, e.calculatePosition = function (t, a) {
                        var i = t.target;
                        "I" == i.nodeName && (i = $(i).parent(".sql-drop-down"));
                        var r = $(i).offset();
                        $(window).height() - r.top < 100 ? $(i).children(".addSqlOption").css({
                            top: r.top - 72,
                            left: r.left - 66
                        }) : $(i).children(".addSqlOption").css({
                            top: r.top + 20,
                            left: r.left - 66
                        }), e.clickShow = !e.clickShow
                    }, e.insertTable = function (t) {
                        e.$broadcast("insert", t.name)
                    }, e.insertFieldName = function (t) {
                        e.$broadcast("insert", t)
                    }, e.insertFunc = function (t) {
                        t = "COUNT_DISTINCT" === t ? "COUNT(DISTINCT())" : t + "()", e.$broadcast("insert", t), e.$broadcast("setCursor", "COUNT(DISTINCT())" == t ? 2 : 1)
                    }, e.undo = function () {
                        e.$broadcast("undo")
                    }, e.redo = function () {
                        e.$broadcast("redo")
                    }, e.resetFormat = function () {
                        if (!e.viewData.sql) return !1;
                        var a = {
                            sql: e.viewData.sql
                        };
                        t.pageLoading = !0, n.tb.sqlFormat(a).then(function (a) {
                            0 == a.status && (e.viewData.sql = e.viewData.originSql = a.result.sql, e.$broadcast("resetFormat", a.result.sql)), t.pageLoading = !1
                        })
                    }, e.show_help = function (t) {
                        e.show_syntax_help = !e.show_syntax_help, e.show_syntax_help && i(function () {
                            $(document).on("click.show_help", function (t) {
                                0 == $(t.target).closest(".sql-syntax-help").length && (e.show_syntax_help = !1, $(document).off("click.show_help"), e.$$phase || e.$digest())
                            })
                        })
                    }, e.sqlTrans = function (t) {
                        t.stopPropagation();
                        var a = e.viewData.sql;
                        if (!a) return void r(e.tips["where.sqlScriptNull"]);
                        n.tb.sqlScript({
                            sql: a
                        }).then(function (t) {
                            0 == t.status && r(e.tips["filter.checkSuccess"])
                        })
                    }, e.preview = function (a) {
                        if (a.stopPropagation(), e.tabs.index = 2, e.sqlTablePreview.open = !0, !e.viewData.sql) return r(e.tips["sql.sqlScriptNotBeNullToPreview"]), !1;
                        t.pageLoading = !0;
                        var i = {
                            info: e.viewData.sql
                        };
                        "create" != e.actionType && (i.current_tb_id = e.tbId || ""), n.sql_script.preview(i).then(function (a) {
                            var i = a;
                            if (t.pageLoading = !1, e.sql_script_err = void 0, 0 == i.status) e.viewData.preview = i.result.data, e.viewData.schema = i.result.schema;
                            else {
                                var n = r(parseInt(i.status), {
                                    warn_msg: i.errstr,
                                    always_show: !0
                                });
                                e.sql_script_err = n ? i.errstr : t.global.hint, t.global.hint = ""
                            }
                        })
                    }, e.save = function () {
                        if (e.requestDone) {
                            if (!e.viewData.sql) return r(e.tips["where.sqlScriptNull"]), !1;
                            if (e.viewData.sql.length > 15e4) return r(e.tips["sql.sqlTooLong"]), !1;
                            e.increaseTables && e.increaseTables.length > 0 && e.increaseTables.forEach(function (t) {
                                t.tb_id == e.viewData.increase.master_tb_id && (e.viewData.increase.partition_field_id = t.partition_field_id)
                            }), "create" == e.actionType ? e.saveWorkTable() : e.modifyWorktable()
                        }
                    }, e.saveWorkTable = function (a) {
                        function i(i) {
                            e.requestDone = !0, t.pageLoading = !1;
                            var n = i;
                            if (e.sql_script_err = void 0, 0 == n.status) {
                                var o;
                                "create" == a && (o = n.result.tb_id), e.preview_by_tb_id(o)
                            } else 29e3 == n.status ? e.sql_script_err = n.errstr : t.global.hint || t.global.dialog_hint ? e.sql_script_err = t.global.hint || t.global.dialog_hint : r(n.errstr)
                        }
                        a = a || "create";
                        var o = e.viewData.table_name;
                        if (!o) return r(e.tips["sql.workSheetCanNotNull"]), !1;
                        if ("create" == a && e.table_name_array.indexOf(e.viewData.table_name) > -1) return r(e.tips["sql.worksheet"] + '"' + o + '"' + e.tips["sql.existAndChangeName"]), !1;
                        if (!e.viewData.sql) return r(e.tips["sql.sqlScriptNotBeNullToSave"]), !1;
                        if (t.pageLoading = !0, e.requestDone = !1, "create" == a) {
                            var l = e.viewData.save_folder_id;
                            n.sql_script[a](e.viewData.table_name, e.viewData.sql, l, e.viewData.increase).then(i)
                        } else n.sql_script[a](e.viewData.table_name, e.viewData.sql, e.tbId, "", e.viewData.increase).then(i)
                    }, e.modifyWorktable = function () {
                        t.pageLoading = !0, e.requestDone = !1, n.sql_script.modifyPreview(e.viewData.table_name, e.viewData.sql, e.tbId, e.viewData.save_folder_id, e.viewData.increase).success(function (i) {
                            if (e.requestDone = !0, t.pageLoading = !1, 0 == i.status) {
                                var n = i.result.can_del;
                                if (1 == n) e.saveWorkTable("modify");
                                else if (2 == n) t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source");
                                else {
                                    e.responseHint = {
                                        dependency: i.result.dependency
                                    };
                                    var o = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                    angular.forEach(e.responseHint.dependency, function (e) {
                                        angular.forEach(e.chart, function (e) {
                                            e.ct_name || (e.ct_name = o)
                                        })
                                    }), s.open({
                                        template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                        className: "ngdialog-theme-default",
                                        scope: e
                                    })
                                }
                            } else 29e3 == i.status ? e.sql_script_err = i.errstr : t.global.hint || t.global.dialog_hint ? e.sql_script_err = t.global.hint || t.global.dialog_hint : r(40002 == Number(i.status) ? i.errstr ? e.tips["error.fieldRepeat"] + ":" + i.errstr : Number(i.status) : i.errstr)
                        })
                    }, e.back = function () {
                        function i() {
                            t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source")
                        }
                        e.viewData.sql ? s.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            scope: e,
                            data: {
                                message: e.tips["join.confirmToBack"]
                            }
                        }).then(function () {
                            i()
                        }) : i()
                    }, e.getAdvanceSetting = function () {
                        var t = {
                            sql: e.viewData.sql
                        };
                        e.tbId && (t.join_tb_id = e.tbId), n.sql_script.checkIncrease(t).then(function (t) {
                            e.viewData.increase.switch_status = t.result.switch_status, e.viewData.increase.master_tb_id = t.result.master_tb_id, e.viewData.increase.cur_partition_field_id = t.result.cur_partition_field_id, e.can_incr = t.result.can_incr, e.increaseTables = t.result.tb_list
                        })
                    }, e.sqlTablePreview.tabFun = function (t, a) {
                        e.tabs.index = t, e.sqlTablePreview.open = !0, 1 == t && e.getAdvanceSetting(), a.stopPropagation()
                    }, e.preview_by_tb_id = function (e) {
                        e && $.cookie("ds_tb_id", e), t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source")
                    }, angular.forEach(l, function (t, a) {
                        e.viewData.func_list.push(t)
                    }), f(), "modify" == e.actionType && function (e) {
                        return n.tb.getModelStruct(e)
                    }(e.tbId).success(function (t) {
                        0 == t.status && (e.viewData.table_name = t.result.table_name, e.viewData.sql = e.viewData.originSql = t.result.info, e.getAdvanceSetting())
                    }), e.$on("regainFolderList", function () {
                        f({
                            folder_list: bdp.bdpTables.getOpenedFolderLists(e.folderList)
                        })
                    }), e.$on("initTableSplit", function (t, a) {
                        a && (a.pos && "top" == a.pos ? (p(e.folderList), i(function () {
                            angular.element(".J-table-list > ul")[0].scrollTop = 0, angular.element(".J-list-go-top").css("display", "none")
                        }, 0)) : p(a.folderList, a.noDefault))
                    }), e.getWorktable = function (t, a) {
                        return !t.unfolded && t.open !== !1 && 0 == t.tb_list.length && t.mark !== !1 && (t.mark && t.sub_folders && t.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), a && a.stopPropagation(), t.loadingWorktables = !0, n.folder.getWorktable({
                            folder_id: t.folder_id
                        }).then(function (a) {
                            t.loadingWorktables = !1, e.folderList.forEach(function (e) {
                                e.folder_id == t.folder_id && 0 == e.tb_list.length && (a.result.forEach(function (t) {
                                    e.tb_list.push(t)
                                }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                    i.folder_id == t.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, e.open = !0)
                                })
                            })
                        }))
                    }, e.showSelectFolder = function () {
                        s.open({
                            templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                            scope: e,
                            className: "ngdialog-theme-default ngdialog-choose-table-folder",
                            data: {
                                tbType: "sql",
                                optType: "baseChoose",
                                folderList: e.saveFolderList || [],
                                folderQueryList: [],
                                targetFolderId: e.viewData.save_folder_id || "folder_root",
                                targetFolderType: "",
                                queryText: "",
                                open: {},
                                confirmSave: e.saveSelectFolder,
                                loadingDirectory: !0
                            },
                            controller: "chooseTbFolderCtrl"
                        })
                    }, e.saveSelectFolder = function (t) {
                        e.viewData.save_folder_id = t.targetFolderId;
                        var a = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.viewData.save_folder_id);
                        e.viewData.save_folder_name = a ? a.name : "", s.closeAll()
                    }, d(["sql.sqlScriptNotBeNullToSave", "sql.sqlScriptNotBeNullToPreview", "sql.workSheetCanNotNull", "sql.preViewFailedAndCannotSave", "sql.saveSuccess", "sql.saveFailed", "sql.existAndChangeName", "sql.worksheet", "sql.previewErrInfo1", "sql.previewErrInfo2", "join.confirmToBack", "where.sqlScriptNull", "filter.checkSuccess", "error.fieldRepeat", "wb.transform.realtimeTableCantJoin", "sql.sqlTooLong"], e)
                }]).directive("bdpSqlEditor", function () {
                    return {
                        link: function (e, t, a) {
                            function i() {
                                r = CodeMirror.fromTextArea(t[0], {
                                    mode: "text/x-bdp-sql",
                                    indentWithTabs: !0,
                                    smartIndent: !0,
                                    lineWrapping: !0,
                                    matchBrackets: !0,
                                    readOnly: !!o && "nocursor",
                                    theme: "paraiso-light",
                                    autofocus: !o,
                                    fields: e.table_name_array,
                                    extraKeys: {
                                        "Ctrl-Space": "autocomplete"
                                    }
                                }), o || (e.$on("insert", function (e, t) {
                                    r.replaceSelection(t), r.focus()
                                }), e.$on("setCursor", function (e, t) {
                                    var a = r.getCursor(),
                                        i = a.ch - t;
                                    r.setCursor(a.line, i)
                                }), r.on("blur", function () {
                                    e.viewData.sql = r.getValue().replace(/0xa0/, "")
                                }), e.$on("undo", function () {
                                    r.undo(), e.viewData.sql = e.viewData.originSql = r.getValue()
                                }), e.$on("redo", function () {
                                    r.redo(), e.viewData.sql = e.viewData.originSql = r.getValue()
                                }), e.$on("resetFormat", function (e, t) {
                                    r.setValue(t)
                                })), n = e.$watch(a.sqlContent, function (e) {
                                    e && (r.setValue(e), n())
                                }), e.$watch("table_name_array", function (e) {
                                    e && e.length && r.setOption("fields", e)
                                })
                            }
                            var r, n, o = !!a.readonly,
                                l = {
                                    funcQueue: [],
                                    loadLibInProgress: !1
                                };
                            thirdPluginLoader({
                                initFun: i,
                                libSrc: "https://s1.bdp.cn/static/js/lib/bdpFormula/bdp-codemirror_1fb68f2.js",
                                otherSrc: "",
                                libId: window.CodeMirror && window.CM_bdpFormulaPlugin
                            }, l)
                        }
                    }
                }).directive("sqlDropDown", ["$timeout", function (e) {
                    return {
                        restrict: "A",
                        scope: {
                            dropDownFlag: "="
                        },
                        link: function (t) {
                            t.$watch("dropDownFlag", function (a, i) {
                                if (a !== i && 1 == a) {
                                    var r = angular.element(".ds-list").scrollTop();
                                    e(function () {
                                        angular.element(".ds-list").on("scroll.sqlfolder", function (a) {
                                            Math.abs(r - $(a.target).scrollTop()) > 8 && (t.dropDownFlag = !1, e(function () {
                                                t.$digest()
                                            }, 0))
                                        })
                                    }, 0)
                                } else a !== i && 0 == a && angular.element(".ds-list").off("scroll.sqlfolder")
                            })
                        }
                    }
                }])
            }(),
            function () {
                function e(e, t, a, i, r, n, o, l, s) {
                    function d(t) {
                        p(t, function (e) {
                            e.forceChoose = e.choose || void 0
                        }), bdp.bdpTables.initFolderListChoose(t), e.updateExtractTableData()
                    }

                    function c() {
                        i.pageLoading = !0, a.db.subOwnWbList({
                            sub_id: b.user.userid
                        }).then(function (t) {
                            if (i.pageLoading = !1, 0 == t.status) {
                                b.folderList = t.result, d(b.folderList), i.pageLoading = !1;
                                var a = h(b.folderList);
                                if (b.empty = 0 == a, b.empty) return;
                                e.setCurFolder(0)
                            }
                        })
                    }

                    function u() {
                        b.workspaceList = i.workspaceList.dash
                    }

                    function f() {
                        i.pageLoading = !0, a.db.subOwnWbList({
                            sub_id: b.workspace.ws_id
                        }).then(function (t) {
                            if (0 == t.status) {
                                b.folderList = t.result, d(b.folderList), i.pageLoading = !1;
                                var a = h(b.folderList);
                                if (b.empty = 0 == a, b.empty) return;
                                e.setCurFolder(0)
                            }
                        })
                    }

                    function p(e, t) {
                        function a(e) {
                            angular.forEach(e, function (e) {
                                angular.forEach(e.tb_list, function (e) {
                                    t(e)
                                }), e.sub_folders && e.sub_folders.length > 0 && a(e.sub_folders)
                            })
                        }
                        a(e)
                    }

                    function g(e) {
                        function t(e) {
                            angular.forEach(e, function (e) {
                                angular.forEach(e.tb_list, function (e) {
                                    e.choose && (a += 1)
                                }), e.sub_folders && e.sub_folders.length > 0 && t(e.sub_folders)
                            })
                        }
                        var a = 0;
                        return t(e), a
                    }

                    function h(e) {
                        function t(e) {
                            angular.forEach(e, function (e) {
                                a += e.tb_list.length, e.sub_folders && e.sub_folders.length > 0 && t(e.sub_folders)
                            })
                        }
                        var a = 0;
                        return t(e), a
                    }

                    function m(e, t) {
                        function a(e, t, r) {
                            angular.forEach(e, function (e) {
                                angular.forEach(e.tb_list, function (a) {
                                    a.choose && i.push({
                                        folder_name: e.name,
                                        parent_name: r,
                                        sub_id: t,
                                        tb_id: a.tb_id
                                    })
                                }), e.sub_folders && e.sub_folders.length > 0 && a(e.sub_folders, t, e.name)
                            })
                        }
                        var i = [];
                        return angular.forEach(t, function (t) {
                            "user" == e ? a(t.data, t.userid, "") : "workspace" == e && a(t.data, t.ws_id, "")
                        }), i
                    }

                    function _(e, t) {
                        function a(e, t) {
                            t.map(function (t) {
                                t.choose = e || t.forceChoose
                            })
                        }
                        var i, r = [];
                        r = void 0 === t ? b.folderList[e] : b.folderList[e].sub_folders[t], i = r.choose, r.className = "", a(i, r.tb_list), void 0 === t && r.sub_folders && r.sub_folders.length > 0 && r.sub_folders.map(function (e) {
                            e.choose = i, a(i, e.tb_list)
                        }), bdp.bdpTables.initFolderListChoose(b.folderList, e)
                    }
                    i.view = "worktable", i.show_bdp_header = !1, l(function () {
                        $(".extract-table-content").get(0).addEventListener("scroll", function () {
                            var e = $(".bdp-tips");
                            e.length > 0 && e.hide(), e = null
                        })
                    }, 1e3), e.extractTableData = {
                        user: {
                            data: {}
                        },
                        selected: null,
                        viewType: "user",
                        workspace: {
                            data: {}
                        },
                        ws_selected: null,
                        empty: null,
                        ws_empty: null
                    }, e.extractTableView = {
                        sharedTbList: {}
                    }, e.curFolder = {}, e.curFolderItem = null;
                    var b = e.extractTableData,
                        v = e.extractTableView;
                    e.changeTab = function (t) {
                            b.viewType != t && (b.folderList = [], e.curFolderItem = null, b.viewType = t, v.query = "", "user" == t ? (b.userList.length > 0 && e.chooseUser(b.userList[0], "init"), b.workspace.data = {}, b.ws_empty = {}) : "workspace" == t && (b.workspaceList.length > 0 && e.chooseWorkspace(b.workspaceList[0], "init"), b.user.userid = "", b.user.data = {}, b.empty = {}))
                        },
                        function () {
                            a.user.userList().then(function (t) {
                                if (0 == t.status) {
                                    var a = $.cookie("user_id"),
                                        i = [];
                                    for (var r in t.result) a !== t.result[r].userid && i.push(t.result[r]);
                                    b.userList = i, e.chooseUser(b.userList[0], "init")
                                }
                            })
                        }(), e.$watch(function () {
                            return i.workspaceList
                        }, function (e) {
                            e && u()
                        }), e.updateExtractTableData = function () {
                            if ("user" == b.viewType) {
                                var e = b.user.userid,
                                    t = b.user.data;
                                t["u_" + e] || (t["u_" + e] = {
                                    data: [],
                                    empty: !1,
                                    total: 0,
                                    userid: e
                                }), t["u_" + e].data = angular.copy(b.folderList), t["u_" + e].total = g(t["u_" + e].data)
                            } else if ("workspace" == b.viewType) {
                                var a = b.workspace.ws_id,
                                    i = b.workspace.data;
                                i[a] || (i[a] = {
                                    data: [],
                                    empty: !1,
                                    total: 0,
                                    ws_id: a
                                }), i[a].data = angular.copy(b.folderList), i[a].total = g(i[a].data)
                            }
                            return 0
                        }, e.chooseUser = function (t) {
                            if (v.userlist = !1, b.user.userid != t.userid) {
                                b.selected = !0, b.user.name = t.name, b.user.userid = t.userid;
                                var a = b.user.data;
                                if (a["u_" + t.userid]) return b.folderList = angular.copy(a["u_" + t.userid].data), b.empty = !1, void e.setCurFolder(0);
                                c()
                            }
                        }, e.chooseWorkspace = function (t) {
                            b.ws_selected = !0, b.workspace.name = t.name, b.workspace.ws_id = t.ws_id;
                            var a = b.workspace.data;
                            if (a[t.ws_id]) return b.folderList = angular.copy(a[t.ws_id].data), b.empty = !1, void e.setCurFolder(0);
                            f()
                        }, e.saveTb = function () {
                            var n = [];
                            if (!i.pageLoading)
                                if ("user" == b.viewType) {
                                    var o = b.user.data;
                                    if (!(n = m("user", o)) || 0 == n.length) return void t(e.tips["extract.selectworksheetextract"]);
                                    i.pageLoading = !0, a.db.extractTb({
                                        data: angular.toJson(n)
                                    }).then(function (e) {
                                        i.pageLoading = !1, 0 == e.status && r.path("/data_source")
                                    })
                                } else if ("workspace" == b.viewType) {
                                var l = b.workspace.data;
                                if (!(n = m("workspace", l)) || 0 == n.length) return void t(e.tips["extract.selectworksheetextract"]);
                                i.pageLoading = !0, a.db.extractTb({
                                    workspace: 1,
                                    data: angular.toJson(n)
                                }).then(function (e) {
                                    i.pageLoading = !1, 0 == e.status && r.path("/data_source")
                                })
                            }
                        }, e.previewTbData = function (t, r) {
                            t.stopPropagation(), i.pageLoading = !0, a.tb.preview({
                                tb_id: r.tb_id,
                                ws_id: b.workspace.ws_id
                            }).then(function (t) {
                                t && (t.generateCoordinateStatus = t.has_gis, 2 == t.has_gis && a.tb.gisModify({
                                    tb_id: r.tb_id
                                }), t.tableName = r.name, t.latestData = t.data.length, t.totalData = t.count, t.tableUpdateTime = o("date")(1e3 * t.update_time, "yyyy-MM-dd HH:mm:ss"), t.currentStatus = "", 3 == t.status || 6 == t.status ? t.currentStatus = e.tips["wb.isUpdatingWaiting"] : 2 == t.status && (t.currentStatus = e.tips["wb.updateFailed"]), e.ngDialogData = t, n.open({
                                    template: "/static/partials/dialogTemplates/preview-table-data.html",
                                    className: "ngdialog-theme-default chart-preview-data",
                                    scope: e,
                                    controller: ["$scope", "$timeout", "$element", function (e, t, a) {
                                        function i() {
                                            s = 0, $(n).children("td").each(function (e, t) {
                                                var a = parseInt($(t).width());
                                                $(l[e]).width(a)
                                            })
                                        }
                                        var r, n, o, l, s;
                                        t(function () {
                                            a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), r = a.find(".table-scroll"), n = a.find(".table-scroll").find("tbody").find("tr")[0], o = a.find(".J-table-fixhead").find("thead").find("tr")[0], l = $(o).children("th"), i(), r.scroll(function (e) {
                                                a.find(".J-table-fixhead").css({
                                                    left: -e.target.scrollLeft + "px"
                                                })
                                            })
                                        }, 100);
                                        $(window).resize(function () {
                                            clearTimeout(void 0), setTimeout(function () {
                                                a.find(".J-table-fixhead").width(a.find(".table-scroll").children("table").width()), i()
                                            }, 10)
                                        })
                                    }]
                                })), i.pageLoading = !1
                            })
                        }, e.back = function () {
                            i.wsId ? r.path("/data_source/" + i.wsId) : r.path("/data_source")
                        }, e.setCurFolder = function (t, a) {
                            var i = e.curFolder;
                            i.index = t, i.subIndex = a;
                            var r;
                            r = void 0 === a ? b.folderList[t] : b.folderList[t].sub_folders[a], e.curFolderItem = r
                        }, e.openFolder = function (t, a) {
                            e.setCurFolder(t, a)
                        }, e.checkAll = function (t, a) {
                            _(t, a), e.updateExtractTableData()
                        }, e.checkOne = function (t) {
                            bdp.bdpTables.initFolderListChoose(b.folderList, t), e.updateExtractTableData()
                        }, s(["extract.selectworksheetextract"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("ExtractTableCtrl", e), 
                e.$inject = ["$scope", "errHint", "commonService", "$rootScope", "$location", "ngDialog", "$filter", "$timeout", "$jsTipTranslate"]
            }(),
            function () {
                angular.module("BC.controllers.dataSource.polymer", [])
                .controller("polymerTableCtrl", [
                    "$scope", "$rootScope", "$location", "ngDialog", "$timeout", "errHint", "commonHttp", 
                    "$stateParams", "commonService", "$jsTipTranslate", "filterOperatorMapWithType", 
                    "formulaKeyMap", "dateNameMap", "verifyTbName", 
                    "setAdvanceAggregatorName", "formulaService", function (e, t, a, i, r, n, o, l, s, d, c, u, f, p, g, h) {
                    function m(t, a, n) {
                        void 0 === a && (e.polymerData.data.x = [], e.polymerData.data.y = []), e.polymerData.preview_list = [], e.polymerData.schema = [], o.get("/api/data_aggr/fields", {
                            tb_id: t.tb_id
                        }).then(function (a) {
                            if (0 == Number(a.status) && (e.polymerData.fields = a.result.fields, e.polymerData.chooseTableTbType = a.result.tb_type, e.polymerData.fieldValues = {}, k(), i.closeAll(), e.polymerData.current_tb_name = t.name, e.polymerData.current_tb_id = t.tb_id, e.tb_id = t.tb_id, _(), r(function () {
                                    e.$broadcast("initSql", t.tb_id)
                                }, 10), ("create" == e.action || "modify" == e.action && n) && (e.polymerData.data.filters = [], e.$broadcast("InitializeCurItem")), "modify" == e.action)) {
                                for (var o = e.polymerData.data.x.length, l = e.polymerData.data.y.length, d = 0; d < o; d++) e.polymerData.data.x[d].gen_fid || e.polymerData.data.x.splice(d, 1);
                                for (var d = 0; d < l; d++) e.polymerData.data.y[d].gen_fid || e.polymerData.data.y.splice(d, 1);
                                var c = angular.copy(e.polymerData.data);
                                T(c), n ? s.tb.modelCheck({
                                    info: c,
                                    base_tb_id: e.polymerData.current_tb_id
                                }).then(function (t) {
                                    0 == t.status ? e.preViewTb() : (e.polymerData = e.originalPolymerData, e.preViewTb())
                                }) : e.isAutoPreview && e.preViewTb()
                            }
                        })
                    }

                    function _() {
                        var t = angular.copy(e.polymerData.fields);
                        angular.forEach(t, function (e) {
                            e.title = e.nick_name
                        }), e.polymerData.tbList = [{
                            name: e.polymerData.current_tb_name,
                            tb_id: e.polymerData.current_tb_id,
                            open: !0,
                            fields: t
                        }]
                    }

                    function b(e, t) {
                        var a = Math.abs(e.x1 + e.x2 - t.x1 - t.x2),
                            i = e.x2 - e.x1 + (t.x2 - t.x1),
                            r = Math.abs(e.y1 + e.y2 - t.y1 - t.y2),
                            n = e.y2 - e.y1 + (t.y2 - t.y1);
                        return a <= i && r <= n
                    }

                    function v(e, t) {
                        var a = {
                                x1: t.offset.left,
                                y1: t.offset.top,
                                x2: t.offset.left + t.helper.width(),
                                y2: t.offset.top + t.helper.height()
                            },
                            i = $(".polymer-content-hd"),
                            r = i.offset();
                        return !b(a, {
                            x1: r.left,
                            y1: r.top,
                            x2: r.left + i.width(),
                            y2: r.top + i.height()
                        })
                    }

                    function y(e) {
                        return 1 !== e.is_build_aggregated || "date" == e.data_type && (e.formula.indexOf("MAX_DATE") >= 0 || e.formula.indexOf("max_date") >= 0 || e.formula.indexOf("MIN_DATE") >= 0) || e.formula.indexOf("min_date") >= 0
                    }

                    function w(t) {
                        for (var a = e.polymerData.data.x, i = 0, r = a.length; i < r; i++)
                            if (a[i].fid == t.fid) return !0;
                        return !1
                    }

                    function D(t, a) {
                        var i = e.polymerData.data.x,
                            r = e.polymerData.data.y,
                            n = e.polymerView.show_formula_y,
                            o = {};
                        if ("x" == a) o = {
                            fid: t.fid,
                            name: t.name,
                            nick_name: t.nick_name || t.name,
                            data_type: t.data_type,
                            is_build_aggregated: t.is_build_aggregated,
                            formula: t.formula
                        }, "date" == t.data_type && (o.granularity = "day"), i.push(o);
                        else {
                            var l, s = "SUM";
                            "number" !== t.data_type && (s = "COUNT"), l = u[s], o = {
                                fid: t.fid,
                                name: t.name,
                                nick_name: t.nick_name || t.name,
                                data_type: t.data_type,
                                aggregator: 1 != t.is_build_aggregated ? s : "",
                                aggregator_name: 1 != t.is_build_aggregated ? l : "",
                                is_build_aggregated: t.is_build_aggregated,
                                formula: t.formula
                            }, "date" == t.data_type && (o.granularity = "day"), r.push(o), n.push(!1)
                        }
                    }

                    function F() {
                        r(function () {
                            var t = $("#polymer-content-hd").height();
                            e.polymerView.top = t + 23 + "px"
                        }, 10)
                    }

                    function T(e) {
                        var t = {};
                        t.where_type = e.filterType, t.where_linker = e.where_linker, "sql" == t.where_type ? (t[t.where_type] = [], angular.forEach(e.sql, function (e, a) {
                            e && t[t.where_type].push({
                                tb_id: a,
                                sql: e
                            })
                        })) : t[t.where_type] = {
                            filters: S(e.filters)
                        }, e.where = t, delete e.filterType, delete e.where_linker, delete e.filters, delete e.sql
                    }

                    function S(e) {
                        var t = angular.copy(e);
                        return t = $.map(t, function (e, t) {
                            return C(e) && L(e) ? e : null
                        })
                    }

                    function C(e) {
                        if ("number" == e.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                            if (isNaN(Number(e.value))) return !1;
                            if ("" === e.value) return !1;
                            e.value = Number(e.value)
                        }
                        return !0
                    }

                    function L(e) {
                        return !(!e.fid || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && ("" == e.start_date || "" == e.end_date))
                    }

                    function k() {
                        e.polymerData.fields_list = bdp.utils.addSpecParamsToFields(e.polymerData.fields), angular.forEach(e.polymerData.fields_list, function (e) {
                            e.origin_name = e.name, e.name = e.nick_name
                        })
                    }

                    function x(e) {
                        N = 0;
                        var t = $("#tb-header"),
                            a = t.find("li"),
                            i = 0;
                        e.find("thead").eq(0).find("th").each(function (e) {
                            var t = $(this).outerWidth(),
                                r = e == a.length - 1 ? t - N - 1 : 0 == e ? t + 1 : t;
                            i += r, a.eq(e).css("width", r)
                        }), t.css("width", i), t.show()
                    }

                    t.view = "data_source", t.show_bdp_header = !1, e.requestDone = !0, e.isRequestFieldList = !1, e.formulaKeyMap = u, e.action = l.tbId ? "modify" : "create", e.isAutoPreview = !1, e.dropShowPreviewData = !1, e.polymerView = {
                        show_formula_y: [],
                        show_formula_date: {},
                        loading: !1,
                        show_edit: {}
                    }, 

                    e.polymerData = {
                        tbList: [],
                        current_tb: {
                            tb_id: "",
                            name: ""
                        },
                        current_tb_name: "",
                        editting_text: "",
                        preview_list: [],
                        table_name: "",
                        data: {
                            x: [],
                            y: [],
                            where_linker: "and",
                            filters: [],
                            filterType: "condition",
                            sql: {}
                        },
                        formula: [{
                            name: "求和",
                            type: "SUM",
                            show: "number"
                        }, {
                            name: "平均值",
                            type: "AVG",
                            show: "number"
                        }, {
                            name: "计数",
                            type: "COUNT",
                            show: "all"
                        }, {
                            name: "去重计数",
                            type: "COUNT_DISTINCT",
                            show: "all"
                        }, {
                            name: "最大值",
                            type: "MAX",
                            show: "number"
                        }, {
                            name: "最小值",
                            type: "MIN",
                            show: "number"
                        }],
                        date_formula: [{
                            name: "按年",
                            type: "year"
                        }, {
                            name: "按季",
                            type: "quarter"
                        }, {
                            name: "按月",
                            type: "month"
                        }, {
                            name: "按周",
                            type: "week"
                        }, {
                            name: "按日",
                            type: "day"
                        }, {
                            name: "按时",
                            type: "hour"
                        }, {
                            name: "按分",
                            type: "minute"
                        }, {
                            name: "按秒",
                            type: "second"
                        }]
                    }, 
                    
                    e.polymerFilter = {
                        open: !0
                    };

                    var I = e.polymerData;
                    e.saveFolderList = null, 
                    e.save_folder = {
                        folder_id: $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root",
                        folder_name: ""
                    }, 

                    e.filterMergedTable = function (e) {
                        return "excel" !== e.type && "aggr" !== e.type && "db" !== e.type
                    }, 

                    e.back = function () {
                        function r() {
                            t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source")
                        }
                        I.data.x.length > 0 || I.data.y.length > 0 ? i.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngdialog-width-340",
                            scope: e,
                            data: {
                                message: e.tips["join.confirmToBack"]
                            }
                        }).then(function () {
                            r()
                        }) : r()
                    }, 
                    
                    e.chooseTbModel = function (t, a) {
                        return e.loadingFolderList = !0, 
                        o.get("/api/folder/list").then(function (r) {
                            if (0 == r.status) {
                                e.loadingFolderList = !1;
                                var n = r.result;
                                e.saveFolderList = angular.copy(n), angular.forEach(e.saveFolderList, function (e) {
                                    "folder_root" == e.folder_id && (e.name = "en" == $.cookie("locale") ? "Root" : "根目录")
                                });
                                var o = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.save_folder.folder_id);
                                if (e.save_folder.folder_name = o ? o.name : "", ("create" == e.action || 1 == t) && !a) {
                                    var l = "modify" == e.action;
                                    i.open({
                                        template: "/static/partials/choose-table-list.html",
                                        className: "ngdialog-theme-default data-source",
                                        data: {
                                            json_data: {
                                                title: "选择聚合数据表",
                                                type: "choose",
                                                show_upload: !1,
                                                polymer_hint: l
                                            },
                                            choose_table: {
                                                tb_id: ""
                                            },
                                            saveFolderList: e.saveFolderList
                                        },
                                        scope: e,
                                        controller: ["$scope", function (e) {
                                            e.folderList = e.ngDialogData.saveFolderList, e.getWorktable = function (t, a) {
                                                return t.unfolded !== !0 && t.open !== !0 && 0 == t.tb_list.length && t.mark !== !1 && (t.mark && t.sub_folders && t.sub_folders.forEach(function (e) {
                                                    e.hide = !1
                                                }), a && a.stopPropagation(), t.loadingWorktables = !0, s.folder.getWorktable({
                                                    folder_id: t.folder_id
                                                }).then(function (a) {
                                                    t.loadingWorktables = !1, e.saveFolderList.forEach(function (e) {
                                                        e.folder_id == t.folder_id && 0 == e.tb_list.length && (a.result.forEach(function (t) {
                                                            e.tb_list.push(t)
                                                        }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                                            i.folder_id == t.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                                                i.tb_list.push(e)
                                                            }), i.unfolded = !0, i.open = !0, e.open = !0)
                                                        })
                                                    })
                                                }))
                                            }
                                        }]
                                    })
                                }
                            }
                        })
                    }, 
                    
                    e.$on("regainFolderList", function () {
                        e.chooseTbModel("", !0)
                    }), 
                    
                    e.getModelStruct = function (t) {
                        s.tb.getModelStruct(t).then(function (t) {
                            var a = t;
                            if ("0" == a.status) {
                                var i = a.result;
                                angular.extend(e.polymerData, {
                                    table_name: i.tb_title,
                                    current_tb: {
                                        tb_id: i.origin_tb_id,
                                        name: i.origin_name
                                    },
                                    data: i.info,
                                    current_tb_name: i.origin_name
                                });
                                var r = i.info.where,
                                    o = I.data.filterType = r.where_type;
                                if (I.data.where_linker = r.where_linker, I.data.filters = [], "sql" == r.where_type) {
                                    var l = {};
                                    angular.forEach(r[o], function (e) {
                                        l[e.tb_id] = e.sql
                                    }), I.data.sql = l
                                } else {
                                    var s = r[o];
                                    I.data.filters = s.filters
                                }
                                e.chooseTableOk({
                                    name: i.origin_name,
                                    tb_id: i.origin_tb_id
                                }, !0), F()
                            } else n(Number(a.status))
                        })
                    }, 
                    
                    e.chooseTableOk = function (t, a, r) {
                        if (!t.tb_id) return void n(e.tips["polymer.selectWorkSheet"]);
                        var o = {
                            src_tb_id: t.tb_id,
                            target_tb_id: e.polymerData.current_tb.tb_id,
                            join_tb_id: l.tbId
                        };
                        if (o.target_tb_id == o.src_tb_id && r) return n(e.tips["join.tbExists"]), !1;
                        r && (e.originalPolymerData = angular.copy(e.polymerData), e.polymerData.data.where = {
                            where_type: "",
                            where_linker: "",
                            condition: {
                                filters: []
                            }
                        }, e.polymerData.data.sql = {}, e.polymerData.data.filterType = "condition"), "modify" == e.action ? o.target_tb_id == o.src_tb_id ? m(t, a) : s.tb.replaceCheck(o).then(function (a) {
                            if (0 == a.status) {
                                if (!a.result.can_replace) {
                                    e.polymerData = e.originalPolymerData, i.closeAll(), e.missing_fields = a.result.missing_fields, e.conflict_fields = a.result.conflict_fields;
                                    var n;
                                    return e.missing_fields.length > 0 && (n = 1), e.conflict_fields.length > 0 && (n = 2), e.conflict_fields.length > 0 && e.missing_fields.length > 0 && (n = 3), n > 0 && i.open({
                                        templateUrl: "/static/partials/dialogTemplates/replace_fail_hint.html",
                                        className: "ngdialog-theme-default",
                                        scope: e,
                                        data: {
                                            conflict_type: n
                                        }
                                    }), !1
                                }
                                m(t, !0, r), a.result.columns.forEach(function (t) {
                                    t.gen_fid && (e.polymerData.data.x.forEach(function (e) {
                                        e.gen_fid == t.gen_fid && (e.info = t.info ? t.info : t.fid, e.fid = t.fid, e.formula = t.formula)
                                    }), e.polymerData.data.y.forEach(function (e) {
                                        e.gen_fid == t.gen_fid && (e.info = t.info ? t.info : t.fid, e.fid = t.fid, e.formula = t.formula, e.formula ? e.formula && !e.aggregator ? e.is_build_aggregated = 1 : e.formula && e.aggregator && (e.is_build_aggregated = 2) : e.is_build_aggregated = 0)
                                    }))
                                })
                            }
                        }) : m(t, a, r)
                    }, 
                    "modify" == e.action ? (e.tbId = l.tbId, e.chooseTbModel(), e.getModelStruct(e.tbId)) : e.chooseTbModel(), e.setAdvanceAggregatorName = g, e.showFieldTip = function (e, t) {
                        if (t.nick_name) {
                            $(e.target).parents(".data-tag").next(".field-tip").addClass("J-field-tip-show")
                        }
                    }, 
                    e.hideFieldTip = function (e) {
                        $(e.target).parents(".data-tag").next(".field-tip").removeClass("J-field-tip-show")
                    }, 
                    e.startDragField = function (t, a, i, r) {
                        return e.isRequestFieldList ? void n("正在加载字段列表，请稍等") : (e.polymerData.current_field = {}, curField = e.polymerData.current_field, curField.fid = i.fid, curField.name = i.name, curField.data_type = i.data_type, curField.nick_name = i.nick_name, curField.is_build_aggregated = i.is_build_aggregated, curField.formula = i.formula, angular.element(".axis").append('<div class="draggable-area"></div>'), r ? (e.sortPolymerOption.originAxis = r, curField.fid = i.fid + "_" + r, curField.data_type = "sub_date", void(curField.name = f[r] + "(" + curField.name + ")")) : void(e.sortPolymerOption.originAxis = "field-list"))
                    }, 
                    e.sortPolymerOption = {
                        originAxis: "",
                        targetAxis: "",
                        currentAction: "",
                        originData: {
                            x: "",
                            y: ""
                        }
                    }, 
                    e.sortPolymerField = {
                        connectWith: ".axis-field-list",
                        opacity: .6,
                        "ui-floating": !0,
                        start: function (t, a) {
                            $(a.item[0].parentNode).hasClass("x-field-list") ? e.sortPolymerOption.originAxis = "x" : $(a.item[0].parentNode).hasClass("y-field-list") && (e.sortPolymerOption.originAxis = "y"), e.sortPolymerOption.originData.x = angular.copy(e.polymerData.data.x), e.sortPolymerOption.originData.y = angular.copy(e.polymerData.data.y)
                        },
                        sort: function (e, t) {},
                        over: function (e, t) {},
                        beforeStop: function (t, a) {
                            e.sortPolymerOption.currentAction = v(t, a) ? "del" : "sort", "del" == e.sortPolymerOption.currentAction && a.item.sortable.cancel()
                        },
                        receive: function (e, t) {},
                        update: function (e, t) {},
                        stop: function (t, a) {
                            var i = a.item.sortable.model;
                            if ("del" == e.sortPolymerOption.currentAction) return void("x" == e.sortPolymerOption.originAxis ? e.deleteField("x", i) : e.deleteField("y", i));
                            if ($(a.item.sortable.droptarget).hasClass("x-field-list")) e.dropShowPreviewData = !1, y(i) ? e.sortPolymerOption.targetAxis = "x" : (n(e.tips["polymer.useAggregate"]), a.item.sortable.cancel(), e.polymerData.data.x = angular.copy(e.sortPolymerOption.originData.x), e.polymerData.data.y = angular.copy(e.sortPolymerOption.originData.y));
                            else {
                                if (!$(a.item.sortable.droptarget).hasClass("y-field-list")) return void a.item.sortable.cancel();
                                e.dropShowPreviewData = !1, e.sortPolymerOption.targetAxis = "y"
                            }
                            "x" == e.sortPolymerOption.targetAxis ? (i = e.sortFieldAtX(i), e.formatFieldForAxis("x")) : (i = e.sortFieldAtY(i), e.formatFieldForAxis("y")), F(), e.isAutoPreview && e.preViewTb();
                            for (var r = 0, o = e.polymerView.show_formula_y.length; r < o; r++) e.polymerView.show_formula_y[r] = !1
                        }
                    }, 
                    e.stopDragField = function () {
                        angular.element(".draggable-area").remove()
                    }, 
                    e.sortFieldAtX = function (e) {
                        return e = {
                            fid: e.fid,
                            name: e.name,
                            nick_name: e.nick_name || e.name,
                            data_type: e.data_type,
                            is_build_aggregated: e.is_build_aggregated,
                            formula: e.formula
                        }, "date" == e.data_type && (e.granularity = "day"), e
                    }, 
                    e.sortFieldAtY = function (t) {
                        var a, i = "SUM";
                        return "number" !== t.data_type && (i = "COUNT"), a = u[i], t = {
                            fid: t.fid,
                            name: t.name,
                            nick_name: t.nick_name || t.name,
                            data_type: t.data_type,
                            aggregator: 1 != t.is_build_aggregated ? i : "",
                            aggregator_name: 1 != t.is_build_aggregated ? a : "",
                            is_build_aggregated: t.is_build_aggregated,
                            formula: t.formula
                        }, "date" == t.data_type && (t.granularity = "day"), e.polymerView.show_formula_y.push(!1), t
                    }, 
                    e.formatFieldForAxis = function (t) {
                        if ("x" == t) angular.forEach(e.polymerData.data.x, function (e) {
                            "date" == e.data_type && "" != e.granularity && (e.granularity = "day"), e.hasOwnProperty("aggregator") && (delete e.aggregator, delete e.aggregator_name)
                        });
                        else {
                            var a = "",
                                i = "";
                            angular.forEach(e.polymerData.data.y, function (e) {
                                e.hasOwnProperty("aggregator") || (a = "number" !== e.data_type ? "COUNT" : "SUM", i = u[a], e.aggregator = 1 != e.is_build_aggregated ? a : "", e.aggregator_name = 1 != e.is_build_aggregated ? a : ""), "date" == e.data_type && "" != e.granularity && (e.granularity = "day")
                            })
                        }
                    }, 
                    e.deleteField = function (t, a) {
                        if ("x" == t) {
                            var i = e.polymerData.data.x.indexOf(a);
                            i > -1 && e.polymerData.data.x.splice(i, 1)
                        } else {
                            var i = e.polymerData.data.y.indexOf(a);
                            i > -1 && e.polymerData.data.y.splice(i, 1)
                        }
                        F(), e.isAutoPreview && e.preViewTb(), e.dropShowPreviewData = !1
                    }, 
                    e.batchOnDropAdd = function (t) {
                        if (!e.polymerData.fields_list || 0 == e.polymerData.fields_list.length) return !1;
                        i.open({
                            template: "/static/partials/polymer_batch_add_ondrop.html",
                            className: "ngdialog-theme-default batch-add-axis-dialog",
                            scope: e,
                            data: {
                                fieldList: e.polymerData.fields_list,
                                axisType: t
                            },
                            controller: ["$scope", "$filter", function (e, a) {
                                e.fieldTypeList = [{
                                    type: "date",
                                    selected: !1
                                }, {
                                    type: "string",
                                    selected: !1
                                }, {
                                    type: "number",
                                    selected: !1
                                }], e.initText = {
                                    dialogFooterTip: function (t) {
                                        switch (t) {
                                            case "x":
                                                return e.tips["polymer.batchAddTips"];
                                            case "y":
                                                return ""
                                        }
                                    }(e.ngDialogData.axisType),
                                    dialogTitleKeyWord: function (t) {
                                        return "x" === t ? e.tips["polymer.addFieldsToAxisX"] : e.tips["polymer.addFieldsToAxisY"]
                                    }(e.ngDialogData.axisType)
                                }, e.axisType = e.ngDialogData.axisType, angular.forEach(e.ngDialogData.fieldList, function (t) {
                                    t.selected = !1, t.disabled = !1, "x" === e.axisType && (y(t) && !w(t) || (t.disabled = !0))
                                }), e.selectedAllByType = function (t, i) {
                                    var r = i.selected,
                                        n = a("getFieldsByDataType")(e.ngDialogData.fieldList, t);
                                    angular.forEach(n, function (e) {
                                        e.disabled || (e.selected = r)
                                    })
                                }, e.checkBatchAddType = function (t, i) {
                                    var r = 0,
                                        n = 0,
                                        o = a("getFieldsByDataType")(e.ngDialogData.fieldList, t);
                                    angular.forEach(o, function (e) {
                                        e.disabled || (n += 1, e.selected && (r += 1))
                                    }), i.selected = r == n
                                }, e.batchAdd = function () {
                                    var a = [];
                                    if (angular.forEach(e.ngDialogData.fieldList, function (e) {
                                            e.selected && a.push(e)
                                        }), 0 == a.length) return n(e.tips["chart.canNotAddEmpty"]), !1;
                                    angular.forEach(a, function (e) {
                                        D(e, t)
                                    }), F(), e.dropShowPreviewData = !1, e.isAutoPreview && e.preViewTb(), e.closeThisDialog()
                                }
                            }]
                        })
                    }, 
                    e.onDropAdd = function (t, a, i) {
                        if ("x" != e.sortPolymerOption.originAxis && "y" != e.sortPolymerOption.originAxis) {
                            if ("x" == i) {
                                if (w(e.polymerData.current_field)) return n(e.tips["polymer.isAdd"]), !1;
                                if (!y(e.polymerData.current_field)) return n(e.tips["polymer.useAggregate"]), !1
                            }
                            D(e.polymerData.current_field, i), F(), e.dropShowPreviewData = !1, e.isAutoPreview && e.preViewTb()
                        }
                    }, 
                    e.removeAxis = function (t, a, i, r) {
                        e.polymerData.data[r].splice(i, 1), e.isAutoPreview && e.preViewTb()
                    }, 
                    e.switchAggregator = function (t, a) {
                        e.polymerData.data.y[a].aggregator = t.type, e.polymerData.data.y[a].aggregator_name = t.name, e.isAutoPreview && e.preViewTb()
                    }, 
                    e.switchGranularity = function (t, a) {
                        e.polymerData.data.x[a].granularity = t.type, e.isAutoPreview && e.preViewTb()
                    }, 
                    e.edit = function (t) {
                        var a = e.polymerData.schema;
                        angular.forEach(a, function (e, a) {
                            e.editting = !1, a == t && (e.editting = !0)
                        }), e.polymerData.editting_text = e.polymerData.schema[t].name
                    }, 
                    e.keyupFun = function (t, a) {
                        13 == t.keyCode && e.commit(a)
                    }, 
                    e.commit = function (t) {
                        var a = e.polymerData.editting_text,
                            i = e.polymerData.data.x.length;
                        e.polymerData.schema[t].name = a, t < i ? e.polymerData.data.x[t].nick_name = a : e.polymerData.data.y[t - i].nick_name = a, e.polymerData.schema[t].editting = !1
                    }, 
                    e.saveTb = function () {
                        var i = e.polymerData.data,
                            r = e.polymerData.table_name;
                        if (!r) return void n(e.tips["polymer.inputTableName"]);
                        if (0 == i.x.length && 0 == i.y.length) return void n(e.tips["polymer.dimensionOrValueCanNotNull"]);
                        var l = angular.copy(e.polymerData.data);
                        T(l), t.pageLoading = !0;
                        var s = "/api/data_aggr/create",
                            d = {
                                info: angular.toJson(l),
                                tb_name: r,
                                base_tb_id: e.polymerData.current_tb_id
                            };
                        "modify" == e.action ? (s = "api/data_aggr/modify", d.tb_id = e.tbId) : d.folder_id = e.save_folder.folder_id, e.requestDone = !1, o.post(s, d).then(function (i) {
                            if (e.requestDone = !0, t.pageLoading = !1, 0 == Number(i.status)) {
                                if ("modify" != e.action) {
                                    var r = i.result.tb_id;
                                    $.cookie("ds_tb_id", r)
                                }
                                t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source")
                            }
                        })
                    };
                    var E = function () {
                        var r = e.polymerData.data;
                        if (!e.polymerData.table_name) return void n(e.tips["polymer.inputTableName"]);
                        if (0 == r.x.length && 0 == r.y.length) return void n(e.tips["polymer.dimensionOrValueCanNotNull"]);
                        var l = angular.copy(e.polymerData.data);
                        T(l), e.requestDone = !1, o.post("/api/data_aggr/modify_preview", {
                            tb_id: e.tbId,
                            base_tb_id: e.polymerData.current_tb_id,
                            info: angular.toJson(l),
                            tb_name: e.polymerData.table_name,
                            folder_id: e.save_folder.folder_id
                        }).then(function (r) {
                            if (e.requestDone = !0, 0 == Number(r.status)) {
                                var o = r.result.can_del;
                                if (1 == o) e.saveTb();
                                else if (2 == o) t.wsId ? a.path("/data_source/" + t.wsId) : a.path("/data_source");
                                else {
                                    e.responseHint = {
                                        dependency: r.result.dependency
                                    };
                                    var l = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                    angular.forEach(e.responseHint.dependency, function (e) {
                                        angular.forEach(e.chart, function (e) {
                                            e.ct_name || (e.ct_name = l)
                                        })
                                    }), i.open({
                                        template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                        className: "ngdialog-theme-default",
                                        scope: e
                                    }), e.loading = !1
                                }
                            } else 30003 == Number(r.status) ? n(r.errstr) : 40002 == Number(r.status) && n(r.errstr ? e.tips["error.fieldRepeat"] + ":" + r.errstr : Number(r.status))
                        })
                    };
                    e.save = function () {
                        e.requestDone && ("modify" == e.action ? E() : e.saveTb())
                    }, 
                    e.preViewTb = function () {
                        var a = angular.copy(e.polymerData.data);
                        T(a), t.pageLoading = !0, o.post("/api/data_aggr/preview", {
                            info: angular.toJson(a),
                            base_tb_id: e.polymerData.current_tb_id
                        }).then(function (a) {
                            if (0 == Number(a.status)) {
                                var i = a.result;
                                e.polymerData.schema = [], angular.forEach(i.schema, function (t) {
                                    e.polymerData.schema.push({
                                        data_type: t.data_type,
                                        fid: t.fid,
                                        name: t.nick_name,
                                        editting: !1
                                    })
                                }), e.polymerData.schema = i.schema, e.polymerData.preview_list = i.data, e.dropShowPreviewData = !0, r(function () {
                                    $("#tb-header").hide(), x($("#tb-detail-table"))
                                }, 0)
                            } else 10 == Number(a.status) ? n(a.errstr) : 40002 == Number(a.status) && n(a.errstr ? e.tips["error.fieldRepeat"] + ":" + a.errstr : Number(a.status));
                            t.pageLoading = !1
                        })
                    }, 
                    e.$on("toFilter", function () {
                        e.isAutoPreview && e.preViewTb()
                    }), 
                    e.createFieldFormula = function () {
                        if (e.newField = {
                                type: "create",
                                name: "",
                                aggregator: "",
                                tb_id: e.polymerData.current_tb_id
                            }, e.newField.tb_id) {
                            t.pageLoading = !0;
                            i.open({
                                template: "/static/partials/add-field.html",
                                data: {
                                    fieldList: e.polymerData.fields_list
                                },
                                className: "ngdialog-theme-default add-field-dialog",
                                scope: e
                            })
                        } else n(3009)
                    }, 
                    e.createFieldGroup = function () {
                        if (e.newField = {
                                type: "create",
                                name: "",
                                aggregator: "",
                                tb_id: e.polymerData.current_tb_id
                            }, e.newField.tb_id) {
                            t.pageLoading = !0;
                            i.open({
                                template: "/static/partials/add-group-field.html",
                                data: {
                                    fieldList: e.polymerData.fields_list
                                },
                                className: "ngdialog-theme-default add-field-dialog group-field-dialog",
                                scope: e
                            })
                        } else n(3009)
                    }, 
                    e.addCalcField = function (t) {
                        function a() {
                            s.field["create" === t.type ? "create" : "modify"]({
                                tb_id: t.tb_id,
                                original_field_name: t.original_field_name || "",
                                new_field_name: t.name,
                                aggregator: t.aggregator.trim(),
                                data_type: t.data_type,
                                param: angular.toJson(t.param),
                                fid: t.fid || ""
                            }).success(function (a) {
                                if (e.global.clickComplete = !0, 0 == a.status) {
                                    i.closeAll();
                                    var r = "create" == t.type ? e.tips["polymer.addFieldSuccess"] : e.tips["polymer.editFieldSuccess"];
                                    l && (r = r + "!  " + e.tips["polymer.pleaseDragAgain"]), h.alertSuccess(r), e.isRequestFieldList = !0, o.get("/api/data_aggr/fields", {
                                        tb_id: e.polymerData.current_tb_id
                                    }).then(function (t) {
                                        e.isRequestFieldList = !1, 0 == Number(t.status) && (e.polymerData.fields = t.result.fields, k(), _())
                                    })
                                } else n("7200" == a.status ? isObjectEmpty(t.param) ? e.tips["polymer.fieldFormularError"] : e.tips["polymer.groupMessageError"] : a.errstr)
                            })
                        }
                        e.global.clickComplete = !1;
                        var r = !1;
                        if (t.name ? t.data_type || t.param ? t.aggregator.trim() || t.param && "group" == t.param.type || (n(e.tips["polymer.inputFieldCalcFormula"]), r = !0) : (n(e.tips["polymer.mustSelectFieldType"]), r = !0) : (n(e.tips["polymer.fieldNameCanNotNull"]), r = !0), r) return e.global.clickComplete = !0, !1;
                        if ("create" != t.type) {
                            var l = !1,
                                d = e.polymerData.data.x,
                                c = e.polymerData.data.y;
                            if (d && d.length > 0)
                                for (var u = 0; u < d.length; u++) t.fid == d[u].fid && (l = !0);
                            if (!l && c && c.length > 0)
                                for (var f = 0; f < c.length; f++) t.fid == c[f].fid && (l = !0)
                        }
                        h.isTooLong({
                            tb_id: t.tb_id,
                            aggregator: t.aggregator.trim(),
                            data_type: t.data_type,
                            param: angular.toJson(t.param)
                        }).then(function (i) {
                            if (e.global.clickComplete = !0, "error" == i) return !1;
                            i ? h.confirmModify(function () {
                                a()
                            }, t.param) : a()
                        })
                    }, 
                    e.modifyField = function (a) {
                        if (e.isRequestFieldList) return void n("正在加载字段列表，请稍等");
                        t.pageLoading = !0, e.newField = angular.extend({
                            aggregator: a.formula,
                            original_field_name: a.nick_name || a.name
                        }, a, {
                            type: "modify",
                            tb_id: e.polymerData.current_tb_id,
                            name: a.nick_name || a.name
                        });
                        var r = "/static/partials/add-field.html";
                        a.hasOwnProperty("param") && "group" == a.param.type && (r = "/static/partials/add-group-field.html"), i.open({
                            template: r,
                            data: {
                                fieldList: e.polymerData.fields_list
                            },
                            className: "ngdialog-theme-default add-field-dialog group-field-dialog",
                            scope: e
                        })
                    }, 
                    e.delNewField = function (t, a) {
                        if (e.isRequestFieldList) return void n("正在加载字段列表，请稍等");
                        var r = e.polymerData.data.x,
                            l = e.polymerData.data.y;
                        if (r && r.length > 0)
                            for (var d = 0; d < r.length; d++)
                                if (a == r[d].fid) return void n(e.tips["chart.fieldInUsing"]);
                        if (l && l.length > 0)
                            for (var c = 0; c < l.length; c++)
                                if (a == l[c].fid) return void n(e.tips["chart.fieldInUsing"]);
                        i.openConfirm({
                            template: "/static/partials/dialogTemplates/confirm-dialog.html",
                            className: "ngdialog-theme-default ngDialog-width-300",
                            scope: e,
                            data: {
                                title: e.tips["chart.tip"],
                                message: e.tips["chart.delField"] + ": " + t + " ?"
                            }
                        }).then(function () {
                            s.field.del(a, e.polymerData.current_tb_id).success(function (t) {
                                0 == t.status ? (e.isRequestFieldList = !0, o.get("/api/data_aggr/fields", {
                                    tb_id: e.polymerData.current_tb_id
                                }).then(function (t) {
                                    e.isRequestFieldList = !1, 0 == Number(t.status) ? (e.polymerData.fields = t.result.fields, k(), _(), e.$broadcast("updateField", {
                                        fid: a
                                    })) : 30003 == Number(t.status) ? n(t.errstr) : 40002 == Number(t.status) && n(t.errstr ? e.tips["error.fieldRepeat"] + ":" + t.errstr : Number(t.status))
                                })) : 7590 == Number(t.status) ? n(e.tips["chart.fieldInUsing"]) : 40006 == Number(t.status) ? n(t.errstr) : 30003 == Number(t.status) ? n(t.errstr) : 40002 == Number(t.status) && n(t.errstr ? e.tips["error.fieldRepeat"] + ":" + t.errstr : Number(t.status))
                            })
                        })
                    }, 
                    e.changeCalcFieldName = function (t, a) {
                        var i = e.polymerData.data.x,
                            r = e.polymerData.data.y,
                            n = (i.concat(r), {}),
                            o = 0,
                            l = 0;
                        for (o = 0, l = a.length; o < l; o++)
                            if (t == a[o].fid) {
                                n = a[o];
                                break
                            }
                        if (n) {
                            for (o = 0, l = i.length; o < l; o++) t == i[o].fid && (i[o].data_type = n.data_type, i[o].formula = n.formula, i[o].is_build_aggregated = n.is_build_aggregated, i[o].nick_name = n.nick_name);
                            for (o = 0, l = r.length; o < l; o++) t == r[o].fid && (r[o].data_type = n.data_type, r[o].formula = n.formula, r[o].is_build_aggregated = n.is_build_aggregated, r[o].nick_name = n.nick_name)
                        }
                    }, 
                    $(window).resize(function () {
                        x($("#tb-detail-table"))
                    });
                    var N = window.isIE ? 5 : getScrollbarWidth();
                    e.showSelectFolder = function () {
                            i.open({
                                templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                                scope: e,
                                className: "ngdialog-theme-default ngdialog-choose-table-folder",
                                data: {
                                    tbType: "polymer",
                                    optType: "baseChoose",
                                    folderList: e.saveFolderList || [],
                                    folderQueryList: [],
                                    targetFolderId: e.save_folder.folder_id || "folder_root",
                                    targetFolderType: "",
                                    queryText: "",
                                    open: {},
                                    confirmSave: e.saveSelectFolder,
                                    loadingDirectory: !0
                                },
                                controller: "chooseTbFolderCtrl"
                            })
                        }, 
                        e.saveSelectFolder = function (t) {
                            e.save_folder.folder_id = t.targetFolderId;
                            var a = bdp.bdpTables.getFolderByFolderId(e.saveFolderList, e.save_folder.folder_id);
                            e.save_folder.folder_name = a ? a.name : "", i.closeAll()
                        },
                        d([
                            "polymer.selectWorkSheet", "polymer.year", "polymer.month", "polymer.day", "polymer.hour", 
                            "polymer.minute", "polymer.second", "polymer.useAggregate", "polymer.isAdd", "polymer.inputTableName", 
                            "polymer.dimensionOrValueCanNotNull", "chart.fieldInUsing", "saveSuccess", "polymer.saveFailed", "polymer.fieldNameCanNotNull", 
                            "polymer.mustSelectFieldType", "polymer.inputFieldCalcFormula", "polymer.addFieldSuccess", "polymer.editFieldSuccess", 
                            "polymer.fieldFormularError", "polymer.groupMessageError", "nameInvalid", "join.worksheetname", "filter.checkSuccess", 
                            "filter.checkFailed", "chart.delField", "chart.tip", "chart.fieldInUsing", "polymer.pleaseDragAgain", "polymer.filterTypeAndValueError", 
                            "polymer.optionsCanNotNull", "error.fieldRepeat", "sql.previewErrInfo1", "sql.previewErrInfo2", "join.confirmToBack", "chart.canNotAddEmpty", 
                            "polymer.addFieldsToAxisX", "polymer.addFieldsToAxisY", "polymer.batchAddTips", "join.tbExists"], e)
                }])
            }(), 
            angular.module("BC.controllers.dataSource.polymer")
            .directive("polymerFilter", ["errHint", "$jsTipTranslate", "filterOperatorMapWithType", "ngDialog", "dateTimeByHalfHour", function (e, t, a, i, r) {
                return {
                    restrict: "A",
                    scope: !0,
                    templateUrl: "/static/partials/polymer_filter.html",
                    replace: !0,
                    link: function (n) {
                        function o(e) {
                            var t = n.curFilter;
                            t.field && t.field.fid == e && (t.field = {}, t.value = "", t.operator = "");
                            for (var a = n.polymerData.data.filters, i = a.length - 1; i >= 0; i--) a[i].fid == e && a.splice(i, 1)
                        }

                        function l(e) {
                            if ("number" == e.field.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                                if (isNaN(Number(e.value))) return !1;
                                if ("" === e.value) return !1;
                                e.value = Number(e.value)
                            }
                            return !0
                        }

                        function s(e) {
                            return !(!e.field || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && !e.start_date && !e.end_date)
                        }

                        function d(e) {
                            return Highcharts.dateFormat("%Y-%m-%d", e)
                        }
                        n.curFilter = {
                            operator: 0,
                            notPreview: !0
                        }, n.operatorMap = a, n.dateTimeByHalfHour = r, n.addFilter = function (t) {
                            if (!s(t)) return void e(n.tips["polymer.optionsCanNotNull"]);
                            if (!l(t)) return void e(n.tips["polymer.filterTypeAndValueError"]);
                            var a = angular.extend({
                                value: t.value,
                                operator: t.operator,
                                start_date: t.start_date,
                                end_date: t.end_date
                            }, t.field);
                            n.polymerData.data.filters.push(a), n.curFilter = {
                                operator: 0,
                                notPreview: !0
                            }, n.$emit("toFilter", "parent"), n.addNewFilter()
                        }, n.deleteFilter = function (e) {
                            n.polymerData.data.filters.splice(e, 1), n.$emit("toFilter", "parent")
                        }, n.$on("updateField", function (e, t) {
                            o(t.fid)
                        }), n.addNewFilter = function (e) {
                            e && angular.element(e.target).closest(".filter-wrap").animate({
                                scrollTop: 2e3
                            })
                        }, n.operatorChange = function (e, t) {
                            8 != e.operator && 9 != e.operator && 10 != e.operator || (e.value = ""), 10 != e.operator && (e.start_date = null, e.end_date = null), t && n.$emit("toFilter", "parent")
                        }, n.preViewTb = function (e, t) {
                            n.$emit("toFilter", "parent")
                        }, n.onWhereLinkerChange = function () {
                            n.$emit("toFilter", "parent")
                        }, n.fieldChange = function (e) {
                            "date" == e.field.data_type ? (e.operator = 10, e.value = "", e.start_date = null, e.end_date = null) : (e.operator = 0, e.value = "")
                        }, n.dateRangeShow = function (e) {
                            var t = [e.start_date, e.end_date];
                            if (t[0] || t[1] || (t[0] = Highcharts.dateFormat("%Y-%m-%d", +new Date), t[1] = Highcharts.dateFormat("%Y-%m-%d", +new Date)), t.length > 1) {
                                var a = t[0] ? t[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                    r = t[1] ? t[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                t = t.concat([a, r])
                            } else 0 === t.length && (t = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                            i.open({
                                template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                data: {
                                    filterItem: e,
                                    range: t
                                },
                                scope: n
                            })
                        }, n.saveDateRange = function (t) {
                            var a = t.sDate ? d(new Date(t.sDate)) + " " + t.sDateHour : null,
                                r = t.eDate ? d(new Date(t.eDate)) + " " + t.eDateHour : null;
                            if (!a && !r) return e(n.tips["chart.dateRangeRequired"]), !1;
                            if (a && r) {
                                if (!t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                if (!t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1;
                                if (new Date(a) - new Date(r) > 0) return e(n.tips["filter.dateRangeInvalid"]), !1
                            } else {
                                if (a && !r && !t.sDateHour) return e(n.tips["filter.startDateErr2"]), !1;
                                if (!a && r && !t.eDateHour) return e(n.tips["filter.endDateErr2"]), !1
                            }
                            t.data.filterItem.start_date = a, t.data.filterItem.end_date = r, i.closeAll(), t.data.filterItem.notPreview || n.$emit("toFilter", "parent")
                        }, n.$on("InitializeCurItem", function () {
                            n.curFilter = {
                                operator: 0,
                                notPreview: !0
                            }
                        }), t(["polymer.optionsCanNotNull", "polymer.filterTypeAndValueError", "chart.dateRangeRequired", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2"], n)
                    }
                }
            }]),
            function () {
                function e(e, t, a, i, r, n, o, l, s, d, c, u) {
                    function f(e) {
                        if ("number" == e.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                            if (isNaN(Number(e.value))) return !1;
                            if ("" === e.value) return !1;
                            e.value = Number(e.value)
                        }
                        return !0
                    }

                    function p(e) {
                        return !(!e.fid && !e.field_id || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && ("" == e.start_date || "" == e.end_date))
                    }
                    var g;
                    t.tbInfoFunc = {
                        getFolderList: function () {
                            t.pageStatus.getTablesLoading = !0, a.folder.getStructureWithParam().then(function (e) {
                                if (0 == e.status) {
                                    t.pageStatus.getTablesLoading = !1;
                                    var a = e.result.folder_list,
                                        i = a[a.length - 1];
                                    "folder_root" != i.folder_id && "" != i.folder_id || (i.name = "en" == $.cookie("locale") ? "Root" : "根目录"), t.tbInfoFunc.extractWholeTables(a)
                                }
                            })
                        },
                        getTablePreview: function (e) {
                            e.name && (t.transViewData.baseInfo.originTbName = e.name), t.transViewData.baseInfo.originTbId = e.tb_id, t.pageStatus.previewLoading = !0, a.tb.preview({
                                tb_id: e.tb_id
                            }).then(function (e) {
                                t.pageStatus.previewLoading = !1, t.previewFunc.initFilterData(e), t.tbInfoFunc.initField(e.fields), t.previewFunc.initOriginTable(e)
                            })
                        },
                        extractWholeTables: function (e) {
                            t.transViewData.folderList = e;
                            var a = bdp.bdpTables.getFolderByFolderId(t.transViewData.folderList, t.transViewData.baseInfo.saveFolderId);
                            t.transViewData.baseInfo.saveFolderName = a ? a.name : ""
                        },
                        openChooseTableDialog: function () {
                            n.open({
                                template: "/static/js/worktable/tableDialog/choose_table_list.html",
                                className: "ngdialog-theme-default ngDialog-width-360 ngdialog-choose-table-list",
                                data: {
                                    extractTables: t.tbInfoFunc.extractWholeTables,
                                    okClickAction: t.tbInfoFunc.getTablePreview,
                                    folderList: t.transViewData.folderList
                                },
                                scope: t,
                                controller: "chooseTbListCtrl"
                            })
                        },
                        changeOriginTable: function () {
                            if (t.tbInfoFunc.openChooseTableDialog(), t.transViewData.baseInfo.originTbId) {
                                var e = t.tips["transposeTb.changeOriginTable"];
                                l(function () {
                                    o(e)
                                }, 200)
                            }
                        },
                        openChangeSaveFolder: function () {
                            function e(e) {
                                t.transViewData.baseInfo.saveFolderId = e.targetFolderId;
                                var a = bdp.bdpTables.getFolderByFolderId(t.transViewData.folderList, t.transViewData.baseInfo.saveFolderId);
                                t.transViewData.baseInfo.saveFolderName = a ? a.name : "", n.closeAll()
                            }
                            n.open({
                                templateUrl: "/static/js/worktable/tableDialog/choose_table_folder.html",
                                scope: t,
                                className: "ngdialog-theme-default ngdialog-choose-table-folder",
                                data: {
                                    tbType: "transpose",
                                    optType: "baseChoose",
                                    folderList: t.transViewData.folderList || [],
                                    folderQueryList: [],
                                    targetFolderId: t.transViewData.baseInfo.saveFolderId || (t.transViewData.folderList.length > 0 ? t.transViewData.folderList[0].folder_id : ""),
                                    targetFolderType: "",
                                    queryText: "",
                                    open: {},
                                    confirmSave: e
                                },
                                controller: "chooseTbFolderCtrl"
                            })
                        },
                        initField: function (e) {
                            function a(e, t) {
                                t.displayNum++, e.check && t.checkNum++, t.checkAll = t.displayNum == t.checkNum, t.list.push(e)
                            }
                            t.transViewField = {
                                fieldQueryText: "",
                                checkAll: !1,
                                strField: {
                                    checkAll: !1,
                                    displayNum: 0,
                                    checkNum: 0,
                                    list: []
                                },
                                numField: {
                                    checkAll: !1,
                                    displayNum: 0,
                                    checkNum: 0,
                                    list: []
                                },
                                dateField: {
                                    checkAll: !1,
                                    displayNum: 0,
                                    checkNum: 0,
                                    list: []
                                },
                                totalFields: null
                            };
                            var i = [];
                            "edit" == t.pageStatus.viewMode && (i = t.transViewData.editViewInfo.trans_fids), angular.forEach(e, function (e) {
                                switch (e.display = !0, i.length > 0 ? e.check = i.indexOf(e.fid) >= 0 : e.check = !1, e.type) {
                                    case 2:
                                        e.data_type = "string", a(e, t.transViewField.strField);
                                        break;
                                    case 1:
                                    case 0:
                                        e.data_type = "number", a(e, t.transViewField.numField);
                                        break;
                                    case 3:
                                        e.data_type = "date", a(e, t.transViewField.dateField)
                                }
                            }), t.transViewFilter.curTable.fields = angular.copy(e)
                        },
                        keyUpSearchField: function () {
                            t.transTbFunc.checkOriginTable() && (clearTimeout(g), g = setTimeout(t.tbInfoFunc.searchField(), 100))
                        },
                        searchField: function () {
                            function e(e) {
                                i = displayNum = 0, angular.forEach(e.list, function (e) {
                                    a ? (e.display = e.name.toLocaleLowerCase().indexOf(a.toLocaleLowerCase()) >= 0, e.display && (r = !0)) : e.display = !0, displayNum = e.display ? ++displayNum : displayNum, i = e.check && e.display ? ++i : i
                                }), e.displayNum = displayNum, e.checkNum = i, e.checkAll = displayNum == i && i > 0
                            }
                            var a = t.transViewField.fieldQueryText,
                                i = displayNum = 0,
                                r = !1;
                            e(t.transViewField.strField), e(t.transViewField.numField), e(t.transViewField.dateField), t.tbInfoFunc.getFieldSelectAll()
                        },
                        getFieldSelectAll: function () {
                            function e(e, t) {
                                for (var i = 0, r = e.list.length; i < r; i++)
                                    if (!e.list[i].check && e.list[i].display) {
                                        a[t] = !0;
                                        break
                                    }
                            }
                            var a = {
                                str: !1,
                                num: !1,
                                date: !1
                            };
                            e(t.transViewField.strField, "str"), e(t.transViewField.numField, "num"), e(t.transViewField.dateField, "date"), t.transViewField.checkAll = !a.str && !a.num && !a.date
                        },
                        changeFieldCheckStatus: function (e, t, a) {
                            var i = displayNum = 0;
                            angular.forEach(e.list, function (e) {
                                a && e.display && (e.check = t), displayNum = e.display ? ++displayNum : displayNum, i = e.check && e.display ? ++i : i
                            }), e.displayNum = displayNum, e.checkNum = i, e.checkAll = displayNum == i
                        },
                        selectSingleField: function (e) {
                            var a;
                            switch (e.type) {
                                case 2:
                                    a = t.transViewField.strField;
                                    break;
                                case 1:
                                case 0:
                                    a = t.transViewField.numField;
                                    break;
                                case 3:
                                    a = t.transViewField.dateField
                            }
                            t.tbInfoFunc.changeFieldCheckStatus(a, e.check, !1), t.tbInfoFunc.getFieldSelectAll()
                        },
                        selectTypeField: function (e) {
                            if (t.transTbFunc.checkOriginTable()) {
                                var a, i;
                                switch (e) {
                                    case "string":
                                        i = t.transViewField.strField, a = t.transViewField.strField.checkAll;
                                        break;
                                    case "number":
                                        i = t.transViewField.numField, a = t.transViewField.numField.checkAll;
                                        break;
                                    case "date":
                                        i = t.transViewField.dateField, a = t.transViewField.dateField.checkAll
                                }
                                t.tbInfoFunc.changeFieldCheckStatus(i, a, !0), t.tbInfoFunc.getFieldSelectAll()
                            }
                        },
                        selectAllField: function () {
                            if (t.transTbFunc.checkOriginTable()) {
                                var e = t.transViewField.checkAll;
                                t.tbInfoFunc.changeFieldCheckStatus(t.transViewField.strField, e, !0), t.tbInfoFunc.changeFieldCheckStatus(t.transViewField.numField, e, !0), t.tbInfoFunc.changeFieldCheckStatus(t.transViewField.dateField, e, !0)
                            }
                        },
                        getCheckFieldId: function () {
                            function e(e) {
                                angular.forEach(e.list, function (e) {
                                    e.check && a.push(e.fid)
                                })
                            }
                            var a = [];
                            return e(t.transViewField.strField), e(t.transViewField.numField), e(t.transViewField.dateField), a
                        },
                        changeTransFieldType: function (e, a) {
                            t.pageStatus.showTypeSelect[a] = !t.pageStatus.showTypeSelect[a];
                            var i = angular.element(e.target).closest(".field-merge-type"),
                                r = angular.element(".table-field-container"),
                                n = i.children(".dropdown-wrap");
                            i.offset().top + n.height() > r.height() && t.pageStatus.showTypeSelect[a] ? n.css({
                                top: "-112px"
                            }) : n.css({
                                top: "24px"
                            })
                        }
                    }, 
                    t.previewFunc = {
                        goPreview: function () {
                            if (!t.transTbFunc.checkInfoValid("preview")) return !1;
                            var e = t.transTbFunc.formatSaveInfo(),
                                i = {
                                    type: 7,
                                    info: angular.toJson(e)
                                };
                            t.pageStatus.previewLoading = !0, a.view.preview(i).then(function (e) {
                                t.pageStatus.previewLoading = !1, 0 == e.status && (t.previewFunc.formatPreviewData(e.result), t.pageStatus.previewTab = "trans")
                            })
                        },
                        formatPreviewData: function (e) {
                            var a = e.schema,
                                i = e.data;
                            t.transViewData.transTableData = {
                                tHeadData: a,
                                tBodyData: i
                            }, t.transViewData.curTableData = angular.copy(t.transViewData.transTableData), l(function () {
                                t.pageStatus.previewTab = "trans"
                            }, 10)
                        },
                        changePreviewTab: function (e) {
                            if (!t.transTbFunc.checkOriginTable()) return !1;
                            switch (e) {
                                case "origin":
                                    t.transViewData.curTableData = angular.copy(t.transViewData.originTableData), t.pageStatus.previewTab = e;
                                    break;
                                case "trans":
                                    t.previewFunc.goPreview();
                                    break;
                                case "filter":
                                    t.previewFunc.initTableFieldForSql(), t.pageStatus.previewTab = e
                            }
                        },
                        initOriginTable: function (e) {
                            t.transViewField.totalFields = e.fields;
                            var a = e.fields,
                                i = e.data;
                            i.length > 5 && (i = e.data.splice(0, 5)), t.transViewData.originTableData = {
                                tHeadData: a,
                                tBodyData: i
                            }, t.transViewData.curTableData = angular.copy(t.transViewData.originTableData), t.pageStatus.previewTab = "origin"
                        },
                        initFilterData: function () {
                            t.transViewFilter = {
                                type: "condition",
                                sql: {},
                                curTable: {
                                    fields: []
                                },
                                sqlTbList: null,
                                logic: "and",
                                operatorMap: u,
                                newItem: {
                                    field: null,
                                    operator: "",
                                    value: "",
                                    start_date: null,
                                    end_date: null
                                },
                                filterList: []
                            };
                            var e = [];
                            "edit" == t.pageStatus.viewMode && (e = t.transViewData.editViewInfo.where, t.transViewFilter.type = e.where_type || "condition", t.transViewFilter.logic = e.where_linker || "and", "sql" == e.where_type ? angular.forEach(e.sql, function (e) {
                                t.transViewFilter.sql[e.tb_id] = e.sql
                            }) : (e.condition.filters.map(function (e) {
                                switch (e.type) {
                                    case 2:
                                        e.data_type = "string";
                                        break;
                                    case 1:
                                    case 0:
                                        e.data_type = "number";
                                        break;
                                    case 3:
                                        e.data_type = "date"
                                }
                            }), t.transViewFilter.filterList = angular.copy(e.condition.filters)))
                        },
                        initTableFieldForSql: function () {
                            var e = t.transViewField.totalFields;
                            angular.forEach(e, function (e) {
                                e.title = e.nick_name || e.name
                            }), t.transViewFilter.sqlTbList = [{
                                name: t.transViewData.baseInfo.originTbName,
                                tb_id: t.transViewData.baseInfo.originTbId,
                                open: !0,
                                fields: e
                            }]
                        },
                        formatWhereInfo: function () {
                            function e(e) {
                                return {
                                    value: e.value,
                                    operator: e.operator,
                                    start_date: e.start_date,
                                    end_date: e.end_date,
                                    title: e.title,
                                    field_id: e.field_id,
                                    type: Number(e.type)
                                }
                            }
                            var a = t.transViewFilter,
                                i = {};
                            if (i.where_type = a.type, i.where_linker = a.logic, "sql" == i.where_type) i.sql = [], angular.forEach(a.sql, function (e, t) {
                                e && i.sql.push({
                                    tb_id: t,
                                    sql: e
                                })
                            });
                            else {
                                var r = angular.copy(a.filterList),
                                    n = a.newItem,
                                    o = angular.extend({
                                        value: n.value,
                                        operator: n.operator,
                                        start_date: n.start_date,
                                        end_date: n.end_date
                                    }, n.field);
                                p(o) && f(o) && r.push(o), i.condition = {
                                    filters: function (t) {
                                        var a = angular.copy(t);
                                        return a = $.map(a, function (t, a) {
                                            return f(t) && p(t) ? e(t) : null
                                        })
                                    }(r)
                                }
                            }
                            return i
                        }
                    }, 
                    t.transTbFunc = {
                        goPath: function () {
                            e.wsId ? s.path("/data_source/" + e.wsId) : s.path("/data_source")
                        },
                        back: function () {
                            var e = t.transViewData.baseInfo.newTbName,
                                a = t.tbInfoFunc.getCheckFieldId() || [];
                            e || a.length > 0 ? n.openConfirm({
                                template: "/static/partials/dialogTemplates/confirm-dialog.html",
                                className: "ngdialog-theme-default ngdialog-width-340",
                                scope: t,
                                data: {
                                    message: t.tips["transposeTb.forceQuitTip"]
                                }
                            }).then(function () {
                                t.transTbFunc.goPath()
                            }) : t.transTbFunc.goPath()
                        },
                        getViewInfo: function () {
                            var e = {
                                type: 7,
                                tb_id: t.transViewData.baseInfo.editTbId
                            };
                            t.pageStatus.previewLoading = !0, a.view.info(e).then(function (e) {
                                t.pageStatus.previewLoading = !1, 0 == e.status ? (t.transTbFunc.tbInfo.getTablePreview({
                                    tb_id: e.result.info.tb_id
                                }), t.transTbFunc.formatPartialRequestInfo(e.result)) : o(e.status, {
                                    warn_msg: e.errstr
                                })
                            })
                        },
                        saveConfig: function () {
                            if (!t.transTbFunc.checkInfoValid("save")) return !1;
                            var e = t.transTbFunc.formatSaveInfo(),
                                a = {
                                    type: 7,
                                    info: e,
                                    tb_name: t.transViewData.baseInfo.newTbName,
                                    folder_id: t.transViewData.baseInfo.saveFolderId
                                };
                            "create" == t.pageStatus.viewMode ? t.transTbFunc.createTable(a) : t.transTbFunc.modifyTable(a)
                        },
                        createTable: function (e) {
                            e.info = angular.toJson(e.info), t.pageStatus.saveLoading = !0, a.view.create(e).then(function (e) {
                                t.pageStatus.saveLoading = !1, 0 == e.status ? t.transTbFunc.goPath() : o(+e.status, {
                                    warn_msg: e.errstr
                                })
                            })
                        },
                        modifyTable: function (e) {
                            e.tb_id = t.transViewData.baseInfo.editTbId, e.info.value_fids = t.transViewData.editViewInfo.value_fids, e.info.gen_fids = t.transViewData.editViewInfo.gen_fids, e.info = angular.toJson(e.info), t.pageStatus.saveLoading = !0, a.view.modify(e).then(function (e) {
                                if (t.pageStatus.saveLoading = !1, 0 == e.status) {
                                    if (0 == e.result.can_del) {
                                        t.responseHint = {
                                            dependency: e.result.dependency
                                        };
                                        var a = "en" == $.cookie("locale") ? "Untitled Chart" : "未命名图表";
                                        angular.forEach(t.responseHint.dependency, function (e) {
                                            angular.forEach(e.chart, function (e) {
                                                e.ct_name || (e.ct_name = a)
                                            })
                                        }), n.open({
                                            template: "/static/partials/dialogTemplates/tableModifyHint.html",
                                            className: "ngdialog-theme-default",
                                            scope: t
                                        })
                                    } else t.transTbFunc.goPath()
                                } else o(+e.status, {
                                    warn_msg: e.errstr
                                })
                            })
                        },
                        checkInfoValid: function (e) {
                            if (!t.transViewData.baseInfo.originTbId) return o(t.tips["transposeTb.pleaseSelectOneTable"]), !1;
                            if ("save" == e && !t.transViewData.baseInfo.newTbName) return o(t.tips["transposeTb.pleaseInputTableName"]), !1;
                            if (!t.transViewData.transVals.key || !t.transViewData.transVals.key) return o(t.tips["transposeTb.fieldAndTypeRequired"]), !1;
                            var a = t.tbInfoFunc.getCheckFieldId();
                            return a.length < 2 ? (o(t.tips["transposeTb.fieldAtLeastTwo"]), !1) : a.length != t.transViewField.totalFields.length || (o(t.tips["transposeTb.atLeastOneFree"]), !1)
                        },
                        formatPartialRequestInfo: function (e) {
                            t.transViewData.editViewInfo = e.info;
                            var a = t.$watch(function () {
                                return t.transViewData.folderList
                            }, function (i) {
                                i && i.length > 0 && (t.transViewData.baseInfo.originTbName = bdp.bdpTables.getTableByTableId(t.transViewData.folderList, e.info.tb_id).name, a())
                            });
                            t.transViewData.baseInfo.newTbName = e.table_name, t.transViewData.transVals = {
                                key: e.info.trans_value[0].title,
                                keyType: Number(e.info.trans_value[0].type),
                                val: e.info.trans_value[1].title,
                                valType: Number(e.info.trans_value[1].type)
                            }
                        },
                        formatSaveInfo: function () {
                            var e = {
                                tb_id: "",
                                trans_fids: [],
                                trans_value: [],
                                where: {}
                            };
                            return e.tb_id = t.transViewData.baseInfo.originTbId, e.trans_fids = t.tbInfoFunc.getCheckFieldId(), e.trans_value = [{
                                type: Number(t.transViewData.transVals.keyType),
                                title: t.transViewData.transVals.key
                            }, {
                                type: Number(t.transViewData.transVals.valType),
                                title: t.transViewData.transVals.val
                            }], e.where = t.previewFunc.formatWhereInfo(), e
                        },
                        checkOriginTable: function () {
                            return !!t.transViewData.baseInfo.originTbId || (o(t.tips["transposeTb.pleaseSelectOriginTable"]), !1)
                        },
                        tbInfo: t.tbInfoFunc,
                        preview: t.previewFunc
                    }, 
                    t.initViewData = function () {
                        e.view = "data_source", e.show_bdp_header = !1, t.filterOperatorMapWithType = u, t.pageStatus = {
                            viewMode: r.tbId ? "edit" : "create",
                            previewTab: "origin",
                            showTypeSelect: {
                                key: !1,
                                val: !1
                            },
                            previewLoading: !1,
                            saveLoading: !1,
                            getTablesLoading: !1
                        }, t.pageTips = {
                            icon1: c.instant("transposeTb.selectCombineFieldTip"),
                            icon2: c.instant("transposeTb.setCombineFieldTip"),
                            noOrigin: c.instant("transposeTb.pleaseSelectOriginTable")
                        }, t.transViewData = {
                            baseInfo: {
                                originTbId: "",
                                originTbName: "",
                                saveFolderId: $.cookie("select_folder_id") ? $.cookie("select_folder_id") : "folder_root",
                                saveFolderName: "",
                                newTbName: "",
                                editTbId: r.tbId || ""
                            },
                            editViewInfo: null,
                            folderList: [],
                            transVals: {
                                key: c.instant("transposeTb.combineItem"),
                                keyType: "2",
                                val: c.instant("transposeTb.combineVal"),
                                valType: "1"
                            },
                            whereInfo: {},
                            curTableData: {},
                            originTableData: {},
                            transTableData: {}
                        }, t.transViewField = {
                            fieldQueryText: "",
                            checkAll: !1,
                            strField: {
                                checkAll: !1,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            numField: {
                                checkAll: !1,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            dateField: {
                                checkAll: !1,
                                displayNum: 0,
                                checkNum: 0,
                                list: []
                            },
                            totalFields: null
                        }, t.transViewFilter = {
                            type: "condition",
                            sql: {},
                            curTable: {
                                fields: []
                            },
                            sqlTbList: null,
                            logic: "and",
                            operatorMap: u,
                            newItem: {
                                field: null,
                                operator: "",
                                value: "",
                                start_date: null,
                                end_date: null
                            },
                            filterList: []
                        }, "edit" == t.pageStatus.viewMode ? (t.transTbFunc.tbInfo.getFolderList(), t.transTbFunc.getViewInfo()) : t.transTbFunc.tbInfo.openChooseTableDialog()
                    }, 
                    t.initViewData(), 
                    d([
                        "transposeTb.selectCombineFieldTip", "transposeTb.setCombineFieldTip", "transposeTb.pleaseSelectOriginTable", 
                        "transposeTb.fieldAndTypeRequired", "transposeTb.fieldAtLeastTwo", "transposeTb.atLeastOneFree", "transposeTb.combineItem", 
                        "transposeTb.combineVal", "transposeTb.pleaseInputTableName", "transposeTb.changeOriginTable", "transposeTb.pleaseSelectOriginTable", 
                        "transposeTb.forceQuitTip"], t)
                }
                angular.module("BC.controllers.dataSource")
                .controller("transposeTableCtrl", e), 
                e.$inject = [
                    "$rootScope", "$scope", "commonService", "commonHttp", "$stateParams", "ngDialog", "errHint", 
                    "$timeout", "$location", "$jsTipTranslate", "$translate", "filterOperatorMapWithType"]
            }(), 
                angular.module("BC.directives")
                .directive("transposeFilter", ["ngDialog", "$timeout", "filterOperatorMapWithType", "errHint", "$jsTipTranslate", function (e, t, a, i, r) {
                return {
                    restrict: "EA",
                    scope: !0,
                    templateUrl: "/static/js/worktable/transpose/transpose_filter.html",
                    replace: !0,
                    link: function (a, n, o) {
                        a.transFilterFunc = {
                            fieldChange: function () {
                                var e = a.transViewFilter.newItem;
                                if (!e.field) return e.operator = 0, e.value = "", e.start_date = null, void(e.end_date = null);
                                3 == e.field.type ? (e.operator = 10, e.value = "", e.start_date = null, e.end_date = null) : (e.operator = 0, e.value = "")
                            },
                            operatorChange: function (e) {
                                var t = e || a.transViewFilter.newItem;
                                8 != t.operator && 9 != t.operator && 10 != t.operator || (t.value = ""), 10 != t.operator && (t.start_date = null, t.end_date = null)
                            },
                            showDateRangeLayer: function (t) {
                                var i = t || a.transViewFilter.newItem,
                                    r = [i.start_date, i.end_date];
                                if (r[0] || r[1] || (r[0] = Highcharts.dateFormat("%Y-%m-%d", +new Date), r[1] = Highcharts.dateFormat("%Y-%m-%d", +new Date)), r.length > 1) {
                                    var n = r[0] ? r[0].split(" ")[1] || "00:00:00" : "00:00:00",
                                        o = r[1] ? r[1].split(" ")[1] || "23:59:59" : "23:59:59";
                                    r = r.concat([n, o])
                                } else 0 === r.length && (r = [+new Date, +new Date, "00:00:00", "23:59:59"]);
                                e.open({
                                    template: "/static/partials/dialogTemplates/custom_date_modal.html",
                                    className: "ngdialog-theme-default date-picker-modal daterange-bdp-modal",
                                    data: {
                                        filterItem: i,
                                        range: r
                                    },
                                    scope: a
                                })
                            },
                            saveDateRange: function (t) {
                                function r(e) {
                                    return Highcharts.dateFormat("%Y-%m-%d", e)
                                }
                                var n = t.sDate ? r(new Date(t.sDate)) + " " + t.sDateHour : null,
                                    o = t.eDate ? r(new Date(t.eDate)) + " " + t.eDateHour : null;
                                if (!n && !o) return i(a.tips["chart.dateRangeRequired"]), !1;
                                if (n && o) {
                                    if (!t.sDateHour) return i(a.tips["filter.startDateErr2"]), !1;
                                    if (!t.eDateHour) return i(a.tips["filter.endDateErr2"]), !1;
                                    if (new Date(n) - new Date(o) > 0) return i(a.tips["filter.dateRangeInvalid"]), !1
                                } else {
                                    if (n && !o && !t.sDateHour) return i(a.tips["filter.startDateErr2"]), !1;
                                    if (!n && o && !t.eDateHour) return i(a.tips["filter.endDateErr2"]), !1
                                }
                                t.data.filterItem.start_date = n, t.data.filterItem.end_date = o, e.closeAll()
                            },
                            checkOptionNotNull: function (e) {
                                return !(!e.field || void 0 == e.operator || 8 != e.operator && 9 != e.operator && 10 != e.operator && ("" === e.value || void 0 == e.value) || 10 == e.operator && !e.start_date && !e.end_date)
                            },
                            checkOperateValueError: function (e) {
                                if ("number" == e.field.data_type && 8 != e.operator && 9 != e.operator && 10 != e.operator) {
                                    if (isNaN(Number(e.value))) return !1;
                                    if ("" === e.value) return !1;
                                    e.value = Number(e.value)
                                }
                                return !0
                            },
                            addNewFilterItem: function () {
                                var e = a.transViewFilter.newItem;
                                if (!a.transFilterFunc.checkOptionNotNull(e)) return void i(a.tips["polymer.optionsCanNotNull"]);
                                if (!a.transFilterFunc.checkOperateValueError(e)) return void i(a.tips["polymer.filterTypeAndValueError"]);
                                var r = angular.extend({
                                    value: e.value,
                                    operator: e.operator,
                                    start_date: e.start_date,
                                    end_date: e.end_date
                                }, e.field);
                                a.transViewFilter.filterList.push(r), a.transViewFilter.newItem = {
                                    field: null,
                                    operator: "",
                                    value: "",
                                    start_date: null,
                                    end_date: null
                                }, t(function () {
                                    scrollToBottom(angular.element(".table-preview-container .where-wrap"))
                                }, 10)
                            },
                            deleteFilterItem: function (e) {
                                a.transViewFilter.filterList.splice(e, 1)
                            }
                        }, a.saveDateRange = a.transFilterFunc.saveDateRange, r(["polymer.optionsCanNotNull", "polymer.filterTypeAndValueError", "chart.dateRangeRequired", "filter.dateRangeInvalid", "filter.startDateErr2", "filter.endDateErr2"], a)
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("transposeModelView", ["ngDialog", "$timeout", "filterOperatorMapWithType", "errHint", "commonService", "$jsTipTranslate", function (e, t, a, i, r, n) {
                return {
                    restrict: "EA",
                    scope: !0,
                    templateUrl: "/static/js/worktable/transpose/transpose_model_view.html",
                    replace: !0,
                    link: function (e, t, a) {
                        e.getTablePreview = function (t) {
                            e.modelPageStatus.getPreviewReady = !1, r.tb.preview({
                                tb_id: t
                            }).then(function (t) {
                                e.modelPageStatus.getPreviewReady = !0, t.schema.map(function (t) {
                                    e.modelInfoData.transFields.indexOf(t.fid) >= 0 && e.modelInfoData.checkedOriginField.push(t)
                                })
                            })
                        }, e.getTableName = function (t) {
                            r.folder.getTableSiblings({
                                tb_id: t
                            }).then(function (a) {
                                if (e.modelPageStatus.getTbReady = !0, "0" == a.status) {
                                    (a.result.tb_list || []).some(function (a) {
                                        a.tb_id == t && (e.modelInfoData.originTbName = a.name, e.modelInfoData.originTbId = a.tb_id)
                                    })
                                }
                            })
                        }, e.initModelViewData = function () {
                            var t = e.tableViewInfo.modelInfo;
                            e.modelPageStatus = {
                                getPreviewReady: !1,
                                getTbReady: !1,
                                displayFilter: !1
                            }, e.modelInfoData = {
                                originTbId: t.info.tb_id,
                                originTbName: "",
                                transFields: t.info.trans_fids || [],
                                transVal: t.info.trans_value || [],
                                checkedOriginField: [],
                                whereInfo: {}
                            };
                            var a = t.info.where;
                            e.modelInfoData.whereInfo.where_type = a.where_type, "sql" == a.where_type ? a.sql && a.sql.length > 0 ? e.modelInfoData.whereInfo.sql = a.sql[0].sql : e.modelInfoData.whereInfo = null : (e.modelInfoData.whereInfo.condition = {
                                filters: a.condition.filters
                            }, e.modelInfoData.whereInfo.where_linker = a.where_linker, a.condition.filters && 0 != a.condition.filters.length || (e.modelInfoData.whereInfo = null)), e.modelPageStatus.displayFilter = !!e.modelInfoData.whereInfo, e.getTablePreview(t.info.tb_id), e.getTableName(t.info.tb_id)
                        }, e.initModelViewData(), n([], e)
                    }
                }
            }]),
            function () {
                angular.module("BC.controllers.dataSource")
                .controller("parseUrlCtrl", ["$scope", "ngDialog", "$stateParams", "commonService", "mergeFieldDelegate", "errHint", "$filter", "$location", "$translate", "$rootScope", function (e, t, a, i, r, n, o, l, s, d) {
                    function c() {
                        s(["field.parseUrl", "field.merge", "field.originField", "field.queryField", "back"]).then(function (t) {
                            D.parseUrl = t["field.parseUrl"], D.mergeField = t["field.merge"], D.queryField = t["field.queryField"], D.originField = t["field.originField"], e.title = "parse_url" == e.action ? D.parseUrl : D.mergeField
                        })
                    }

                    function u() {
                        if (!e.viewData.urlPreviewData.hasOwnProperty("header")) return [];
                        var t = e.viewData.urlPreviewData.header,
                            a = [];
                        return angular.forEach(t, function (e) {
                            e.hasOwnProperty("key") && e.hasOwnProperty("fromFid") && e.hasOwnProperty("check") && e.check && a.push({
                                key: e.key,
                                from_fid: e.fromFid
                            })
                        }), a
                    }

                    function f(e, t, a) {
                        for (var i = !1, r = 0, n = a.length; r < n; r++) a[r].from_fid == t && a[r].key == e && (i = !0);
                        return i
                    }

                    function p(t) {
                        var a = [],
                            i = [],
                            r = {},
                            n = 0,
                            o = 0,
                            l = [],
                            s = !1;
                        return !e.viewData.needPreview && e.previewDone && e.viewData.urlPreviewData && e.viewData.urlPreviewData.hasOwnProperty("header") && (s = !0, l = u()), angular.forEach(t, function (t, d) {
                            r = _(d, e.viewData.schema), i = [], r && (n += t.keys.length, angular.forEach(t.keys, function (e, t) {
                                s && l.length > 0 ? f(e, d, l) ? (o++, i.push({
                                    name: e,
                                    index: t,
                                    check: !0
                                })) : i.push({
                                    name: e,
                                    index: t,
                                    check: !1
                                }) : s && 0 == l.length ? i.push({
                                    name: e,
                                    index: t,
                                    check: !1
                                }) : (o++, i.push({
                                    name: e,
                                    index: t,
                                    check: !0
                                }))
                            }), a.push({
                                original_field_id: d,
                                original_field_name: r.name,
                                keys: i
                            }))
                        }), e.beforeExtractData.total_num = n, e.beforeExtractData.check_num = o, e.beforeExtractData.select_all = n == o, n > 200 && (e.beforeExtractData.select_all = !1, a = []), a
                    }

                    function g(t) {
                        e.viewData.urlExtractData.fields = o("query_parse_param")(e.beforeExtractData.fields, t);
                        var a = 0,
                            i = 0;
                        angular.forEach(e.viewData.urlExtractData.fields, function (t) {
                            i += t.keys.length, angular.forEach(t.keys, function (i) {
                                angular.forEach(e.current_select_fields.fields, function (e) {
                                    t.original_field_id == e.original_field_id && angular.forEach(e.keys, function (e) {
                                        i.name == e.name && (i.check = e.check)
                                    })
                                }), i.check && a++
                            })
                        }), e.viewData.urlExtractData.check_num = a, e.viewData.urlExtractData.total_num = i, e.viewData.urlExtractData.select_all = a == i && 0 != a
                    }

                    function h(e, t) {
                        return i.field.url_preview(e, t)
                    }

                    function m(t) {
                        var a = [],
                            i = [],
                            r = [],
                            o = 0;
                        return angular.forEach(t, function (e) {
                            o += e.keys.length
                        }), o.length > 200 ? void n("提取出来的字段数超过200个, 暂不支持") : (angular.forEach(t, function (t, n) {
                            var l = _(n, e.viewData.schema);
                            if (l) {
                                a.push({
                                    name: "源字段",
                                    cols: 1
                                }), t.keys.length && a.push({
                                    type: "query",
                                    name: "新字段",
                                    cols: t.keys.length
                                }), i.push(l);
                                var s = t.keys.map(function (e) {
                                    return {
                                        name: e + "-" + l.name,
                                        fromFid: l.fid,
                                        fid: e + "-" + l.fid,
                                        key: e,
                                        data_type: "string",
                                        check: o < 50
                                    }
                                });
                                i = i.concat(s), angular.forEach(t.odata, function (e, a) {
                                    var i = [e].concat(t.data[a]);
                                    r[a] ? r[a] = r[a].concat(i) : r[a] = i
                                })
                            }
                        }), {
                            groups: a,
                            header: i,
                            content: r
                        })
                    }

                    function _(e, t) {
                        for (var a = 0, i = t.length; a < i; a++)
                            if (t[a].fid === e) return t[a];
                        return null
                    }

                    function b(e) {
                        var t = [];
                        return angular.forEach(e, function (e) {
                            e.fromFid && e.check && t.push(e)
                        }), t
                    }

                    function v(e, t) {
                        for (var a = t.map(function (e) {
                                return e.name
                            }), i = 0, r = e.length; i < r; i++)
                            if (a.indexOf(e[i].title) >= 0) return e[i].title;
                        return !1
                    }

                    function y(e) {
                        var t = !1;
                        return angular.forEach(e, function (e) {
                            "" == e.title && (t = !0)
                        }), t
                    }

                    function w(e, t) {
                        return i.field.merge(e, t)
                    }

                    function w(e, t) {
                        return i.field.extract_url(e, t)
                    }
                    d.show_bdp_header = !1;
                    var D = {
                        parseUrl: "提取网址参数",
                        mergeField: "归并字段",
                        queryField: "提取字段",
                        originField: "工作表字段"
                    };
                    e.tbId = a.tbId, 
                    e.title = "提取网址参数", 
                    e.action = "parse_url", 
                    c(), 
                    e.$on("$translateChangeSuccess", c), 
                    e.viewData = {}, 
                    e.viewData.query_param = "", 
                    e.viewData.urlFields = [], 
                    e.viewData.needPreview = !0, 
                    e.viewData.originalData = {}, 
                    e.viewData.urlExtractData = {}, 
                    e.viewData.urlPreviewData = null, 
                    e.beforeExtractData = {
                        check_num: 0,
                        total_num: 0,
                        select_all: !0,
                        fields: []
                    }, 
                    e.addUrlField = function () {
                        if (e.viewData) {
                            if (e.viewData.urlFields.length >= 10) return n("一次最多允许解析10个字段"), !1;
                            e.viewData.urlFields.push(e.viewData.string_schema[0]), e.viewData.needPreview = !0, e.clearPreviewData()
                        }
                    }, 
                    e.changeUrlField = function () {
                        e.viewData.needPreview = !0, e.clearPreviewData()
                    }, 
                    e.removeUrlField = function (t) {
                        e.viewData.urlFields.splice(t, 1), e.viewData.needPreview = !0, e.clearPreviewData()
                    }, 
                    e.previewDone = !0, 
                    e.previewParseUrl = function () {
                        if (e.viewData.urlFields.length > 0 && void 0 == e.viewData.urlFields[0]) return void n("请先添加提取来源字段");
                        var a = e.viewData.urlFields.map(function (e) {
                            return e.fid
                        });
                        return 0 === a.length ? void n("请先添加网址字段") : function (e) {
                            for (var t = 0, a = e.length - 1; t < a; t++)
                                if (e.indexOf(e[t], t + 1) > -1) return !0;
                            return !1
                        }(a) ? void n("字段重复") : (d.pageLoading = !0, e.previewDone = !1, h(e.tbId, a).then(function (a) {
                            e.previewDone = !0;
                            var i = !0;
                            e.viewData.urlExtractData && angular.forEach(a, function (e) {
                                e.keys.length > 0 && (i = !1)
                            }), i ? e.viewData.urlPreviewData = m(a) : (e.viewData.originalData = a, e.beforeExtractData.fields = p(a), e.viewData.urlExtractData = angular.copy(e.beforeExtractData)), e.viewData.needPreview = !1, d.pageLoading = !1, i || t.open({
                                templateUrl: "/static/js/worktable/parse/select_parse_param.html",
                                className: "ngdialog-theme-default select-parse-param",
                                scope: e
                            })
                        }, function () {
                            d.pageLoading = !1
                        }))
                    }, 
                    e.current_select_fields = [], 
                    e.selectAll = function (t) {
                        e.viewData.urlExtractData.select_all = t, 
                        e.viewData.urlExtractData.check_num = t ? e.viewData.urlExtractData.total_num : 0, 
                        angular.forEach(e.viewData.urlExtractData.fields, function (e) {
                            angular.forEach(e.keys, function (e) {
                                e.check = t
                            })
                        }), 
                        e.current_select_fields = angular.copy(e.viewData.urlExtractData)
                    }, 
                    e.changeKeyCheck = function (t) {
                        var a = 0;
                        angular.forEach(e.viewData.urlExtractData.fields, function (e) {
                            angular.forEach(e.keys, function (e) {
                                e.check && a++
                            })
                        }), 
                        e.viewData.urlExtractData.check_num = a, 
                        a == e.viewData.urlExtractData.total_num && (e.viewData.urlExtractData.select_all = !0), t || (e.viewData.urlExtractData.select_all = !1), 
                        e.current_select_fields = angular.copy(e.viewData.urlExtractData)
                    };
                    var F = "";
                    e.$watch("viewData.query_param", function (e) {
                            clearTimeout(F), F = setTimeout(g(e), 1e3)
                        }), 
                        e.filterPreviewData = function () {
                            if (0 == e.viewData.urlExtractData.check_num) return void n("请选择需要解析的参数");
                            var a = {},
                                i = angular.copy(e.viewData.originalData),
                                r = e.viewData.urlExtractData.fields,
                                o = {},
                                l = {},
                                s = [];
                            angular.forEach(r, function (e) {
                                var t = e.original_field_id,
                                    r = {};
                                s = [], o = i[t].keys, l = i[t].data, a[t] = {
                                    odata: i[t].odata,
                                    keys: [],
                                    data: []
                                };
                                for (var n = 0, d = e.keys.length; n < d; n++)
                                    if (r = e.keys[n], r.check)
                                        for (var c = 0, u = o.length; c < u; c++) r.name == o[c] && (s.push(c), a[t].keys.push(r.name.toString()));
                                angular.forEach(l, function (e, i) {
                                    a[t].data.push([]);
                                    for (var r = 0, n = s.length; r < n; r++) a[t].data[i].push(e[s[r]])
                                })
                            }), e.viewData.urlPreviewData = m(a), t.closeAll()
                        }, 
                        e.clearPreviewData = function () {
                            e.viewData.urlPreviewData = null, setTimeout(function () {
                                e.fixTop()
                            }, 0)
                        }, e.fixTop = function () {
                            $(".preview-pane").css({
                                top: $(".action-pane").outerHeight() + 56 + "px"
                            })
                        }, e.mergeFields = function () {
                            if (e.viewData.needPreview) return void n(e.viewData.urlFields && e.viewData.urlFields.length > 0 ? "请先点击“提取”，进行数据预览" : "请先添加提取来源字段");
                            var t = {
                                originFields: {
                                    list: angular.copy(e.viewData.schema),
                                    name: D.originField
                                },
                                parseFields: {
                                    list: angular.copy(b(e.viewData.urlPreviewData.header)),
                                    name: D.queryField
                                }
                            };
                            angular.forEach(t, function (e, t) {
                                var a = "parseFields" === t && e.list.length < 50;
                                angular.forEach(e.list, function (e) {
                                    e.check = a
                                })
                            }), e.action = "merge_field", e.title = D.mergeField, e.mergeFieldSchema = t, setTimeout(function () {
                                r.$getByHandle(e.delegateKey).showSelectFieldsDialog()
                            }, 200)
                        }, e.delegateKey = "parse_url", e.save = function () {
                            if (r.$getByHandle(e.delegateKey).readyToSave()) {
                                var t = r.$getByHandle(e.delegateKey).getMergeModel();
                                if (y(t)) return n("归并字段名不能为空，请填写字段名"), !1;
                                var a = v(t, e.viewData.string_schema);
                                if (a) return void n('字段名"' + a + '"与工作表初始字段重复');
                                d.pageLoading = !0, w(e.tbId, t).then(function (e) {
                                    d.pageLoading = !1, e && (d.wsId ? l.path("/data_source/" + d.wsId) : l.path("/data_source"))
                                })
                            } else n("请先预览归并数据")
                        }, e.back = function () {
                            "merge_field" == e.action ? (e.action = "parse_url", e.title = D.parseUrl, setTimeout(function () {
                                e.fixTop()
                            }, 0)) : d.wsId ? l.path("/data_source/" + d.wsId) : l.path("/data_source")
                        },
                        function (e) {
                            return i.tb.getInfo(e)
                        }(e.tbId).then(function (t) {
                            0 == t.status && (e.viewData.schema = t.result.schema.filter(function (e) {
                                return 0 === e.is_build_aggregated
                            }), e.viewData.string_schema = t.result.schema.filter(function (e) {
                                return "string" === e.data_type && 0 === e.is_build_aggregated
                            }))
                        })
                }])
            }(),
            function () {
                angular.module("BC.controllers.dataSource")
                .controller("mergeFieldCtrl", [
                    "$scope", "commonService", "errHint", "$stateParams", "mergeFieldDelegate", 
                    "$location", "dataTypeMap", "$rootScope", function (e, t, a, i, r, n, o, l) {
                    function s(e) {
                        var t = {};
                        return angular.forEach(e, function (e) {
                            var a = e.data_type;
                            t[a] ? t[a].list.push(e) : t[a] = {
                                name: o[a],
                                list: [e]
                            }
                        }), t
                    }

                    function d(e, t) {
                        for (var a = t.map(function (e) {
                                return 0 === e.is_build_aggregated ? e.name : ""
                            }), i = 0, r = e.length; i < r; i++)
                            if (a.indexOf(e[i].title) >= 0) return e[i].title;
                        return !1
                    }

                    function c(e) {
                        var t = !1;
                        return angular.forEach(e, function (e) {
                            "" == e.title && (t = !0)
                        }), t
                    }

                    function u(e, a) {
                        return t.field.merge(e, a)
                    }
                    l.show_bdp_header = !1, 
                    e.tbId = i.tbId, 
                    e.viewData = {}, 
                    e.delegateKey = "merge_field", 
                    e.save = function () {
                            if (r.$getByHandle(e.delegate).readyToSave()) {
                                var t = r.$getByHandle(e.delegate).getMergeModel();
                                if (c(t)) return a("归并字段名不能为空，请填写字段名"), !1;
                                var i = d(t, e.viewData.schema);
                                if (i) return void a('字段名"' + i + '"与工作表初始字段重复');
                                l.pageLoading = !0, u(e.tbId, t).then(function (e) {
                                    e && (l.wsId ? n.path("/data_source/" + l.wsId) : n.path("/data_source")), l.pageLoading = !1
                                })
                            } else a("请先完成字段归并")
                        }, e.back = function () {
                            l.wsId ? n.path("/data_source/" + l.wsId) : n.path("/data_source")
                        },
                        function (e) {
                            return t.tb.getInfo(e)
                        }(e.tbId).then(function (t) {
                            0 == t.status && (e.viewData.schema = t.result.schema.filter(function (e) {
                                return 0 === e.is_build_aggregated
                            }), e.mergeFieldSchema = s(e.viewData.schema), r.$getByHandle(e.delegateKey).showSelectFieldsDialog())
                        })
                }])
                .factory("mergeFieldDelegate", function (e) {
                    function t() {
                        return !0
                    }
                    if (e.indexOf("$getByHandle") > -1) throw new Error("Method '$getByHandle' is implicitly added to each delegate service. Do not list it as a method.");
                    return ["$log", function (a) {
                        function i(e, t) {
                            this._instances = e, this.handle = t
                        }

                        function r() {
                            this._instances = []
                        }

                        function n(e) {
                            return function () {
                                var t, i = this.handle,
                                    r = arguments,
                                    n = 0;
                                return this._instances.forEach(function (a) {
                                    if ((!i || i == a.$$delegateHandle) && a.$$filterFn(a)) {
                                        n++;
                                        var o = a[e].apply(a, r);
                                        1 === n && (t = o)
                                    }
                                }), !n && i ? a.warn('Delegate for handle "' + i + '" could not find a corresponding element with delegate-handle="' + i + '"! ' + e + "() was not called!\nPossible cause: If you are calling " + e + '() immediately, and your element with delegate-handle="' + i + '" is a child of your controller, then your element may not be compiled yet. Put a $timeout around your call to ' + e + "() and try again.") : t
                            }
                        }
                        return e.forEach(function (e) {
                            i.prototype[e] = n(e)
                        }), r.prototype = i.prototype, r.prototype._registerInstance = function (e, a, i) {
                            var r = this._instances;
                            return e.$$delegateHandle = a, e.$$filterFn = i || t, r.push(e),
                                function () {
                                    var t = r.indexOf(e);
                                    t !== -1 && r.splice(t, 1)
                                }
                        }, r.prototype.$getByHandle = function (e) {
                            return new i(this._instances, e)
                        }, new r
                    }]
                }(["showSelectFieldsDialog", "readyToSave", "getMergeModel"]))
                .directive("mergeField", ["mergeFieldDelegate", function (e) {
                    return {
                        templateUrl: "/static/js/worktable/parse/merge_field_directive.html",
                        scope: !0,
                        link: function (t, a, i) {
                            if (i.delegateKey) {
                                var r = e._registerInstance(t, i.delegateKey);
                                t.$on("$destroy", function () {
                                    r()
                                })
                            }
                        },
                        controller: ["$scope", "ngDialog", "errHint", "commonService", function (e, t, a, i) {
                            function r(t, a) {
                                var i, r, n;
                                if (e.columns && e.columns.length) {
                                    i = a;
                                    for (var o = [], l = [], s = t.map(function (e) {
                                            return e.fid
                                        }), d = a.length; d--;) {
                                        var c = a[d];
                                        for (n = c.length; n--;) {
                                            var u = c[n];
                                            l.push(u.fid), s.indexOf(u.fid) < 0 && c.splice(n, 1)
                                        }
                                        0 === c.length && a.splice(d, 1)
                                    }
                                    angular.forEach(t, function (e) {
                                        l.indexOf(e.fid) < 0 && o.push([e])
                                    }), o.push([]), i = i.concat(o)
                                } else
                                    for (i = [], r = 0, n = t.length; r < n; r++) i.push([t[r]]);
                                return i
                            }

                            function n(e) {
                                var t = [];
                                return angular.forEach(e, function (e) {
                                    if (defined(e) && 0 !== e.length) {
                                        var a = [],
                                            i = e[0].name;
                                        angular.forEach(e, function (e) {
                                            e.fromFid ? a.push({
                                                field_id: e.fromFid,
                                                key: e.key
                                            }) : a.push({
                                                field_id: e.fid
                                            })
                                        }), t.push({
                                            fields: a,
                                            title: i,
                                            data_type: e[0].data_type,
                                            param: e[0].param
                                        })
                                    }
                                }), t
                            }

                            function o(t) {
                                return i.field.extract_preview(e.tbId, t)
                            }
                            e.selectedFields = e.selectedFields || [], e.needPreview = !0, e.showSelectFieldsDialog = function () {
                                var a = e.selectedFields.map(function (e) {
                                    return e.fid
                                });
                                t.open({
                                    templateUrl: "/static/js/worktable/parse/select_fields_dialog.html",
                                    className: "ngdialog-theme-default",
                                    scope: e,
                                    data: {
                                        schema: e.mergeFieldSchema,
                                        selectedFids: a
                                    },
                                    controller: ["$scope", "errHint", function (e, t) {
                                        function a(e) {
                                            var t = [];
                                            for (var a in e) e.hasOwnProperty(a) && angular.forEach(e[a].list, function (e) {
                                                e.check && t.push(e)
                                            });
                                            return t
                                        }
                                        e.fields = function (t, a) {
                                            return angular.forEach(t, function (e) {
                                                angular.forEach(e.list, function (e) {
                                                    void 0 === e.check && (e.check = a.indexOf(e.fid) > -1)
                                                })
                                            }), e.ngDialogData.schema
                                        }(e.ngDialogData.schema, e.ngDialogData.selectedFids), e.confirm = function () {
                                            var i = a(e.fields);
                                            if (0 === i.length) return t("没有选中的字段"), !1;
                                            e.selectFieldCallback && e.selectFieldCallback(i), e.closeThisDialog()
                                        }
                                    }]
                                })
                            }, e.selectFieldCallback = function (t) {
                                t.length && (e.selectedFields = t, e.columns = r(t, e.columns)), e.needPreview = !0, e.clearPreviewData()
                            }, e.sortColumn = {
                                connectWith: ".merge-column",
                                receive: function (e, t) {},
                                stop: function (t, a) {
                                    e.needPreview = !0, e.clearPreviewData();
                                    for (var i = e.columns.length; i--;) 0 === e.columns[i].length && e.columns.splice(i, 1);
                                    e.columns.push([])
                                }
                            }, e.previewMergeField = function () {
                                var t = n(e.columns);
                                if ($.isEmptyObject(t)) return void a("没有选中的字段");
                                o(t).then(function (t) {
                                    e.previewData = t, e.previewData.schema = bdp.utils.addSpecParamsToFields(e.previewData.schema), e.needPreview = !1
                                })
                            }, e.clearPreviewData = function () {
                                e.previewData = null, setTimeout(function () {
                                    e.fixTop()
                                }, 0)
                            }, e.fixTop = function () {
                                $(".merge-field-preview").css({
                                    top: $(".merge-field-action").outerHeight() + 56 + "px"
                                })
                            }, e.readyToSave = function () {
                                return !e.needPreview
                            }, e.getMergeModel = function () {
                                var t = [],
                                    a = e.previewData.schema,
                                    i = e.mergeFieldSchema.parseFields;
                                if (i && i.list) {
                                    angular.forEach(e.columns, function (e) {
                                        angular.forEach(e, function (e) {
                                            t.push(e.fid)
                                        })
                                    });
                                    var r = [];
                                    angular.forEach(i.list, function (e) {
                                        e.check || r.push({
                                            title: e.name,
                                            data_type: e.data_type,
                                            fields: [{
                                                field_id: e.fromFid,
                                                key: e.key
                                            }]
                                        })
                                    }), a = a.concat(r)
                                }
                                return a
                            }
                        }]
                    }
                }])
            }(),
            function () {
                function e(e, t, a, i, r, n) {
                    function o(e, t) {
                        return e.toLowerCase().indexOf(t.toLowerCase()) >= 0
                    }

                    function l() {
                        e.chooseTbFolderData.folderQueryList = [];
                        var t = e.chooseTbFolderData.queryText,
                            a = {};
                        t ? angular.forEach(e.chooseTbFolderData.folderList, function (i) {
                            a = {
                                name: i.name,
                                folder_id: i.folder_id,
                                sub_folders: [],
                                open: !1
                            }, i.sub_folders && i.sub_folders.length > 0 && angular.forEach(i.sub_folders, function (e) {
                                o(e.name, t) && a.sub_folders.push({
                                    name: e.name,
                                    folder_id: e.folder_id,
                                    open: !1
                                })
                            }), a.open = a.sub_folders.length > 0, (o(a.name, t) || a.open) && e.chooseTbFolderData.folderQueryList.push(a)
                        }) : e.chooseTbFolderData.folderQueryList = []
                    }

                    function s(t, a) {
                        var i = e.chooseTbFolderData.folderList,
                            r = !0;
                        return function (e) {
                            for (var i = 0, n = e.length; i < n; i++)
                                if (e[i].folder_id != a && e[i].name == t) {
                                    r = !1;
                                    break
                                }
                        }(i), r
                    }
                    e.chooseTbFolderData = null, 
                    e.initData = function () {
                        e.chooseTbFolderData = {
                            tbInfo: e.ngDialogData.tbInfo || null,
                            tbType: e.ngDialogData.tbType,
                            optType: e.ngDialogData.optType || "baseChoose",
                            folderList: e.ngDialogData.folderList || [],
                            folderQueryList: [],
                            originalTargetFolderId: e.ngDialogData.targetFolderId || "folder_root",
                            targetFolderId: e.ngDialogData.targetFolderId || "folder_root",
                            targetFolderType: e.ngDialogData.targetFolderType || "top",
                            queryText: "",
                            open: {},
                            isCreating: !1
                        }, e.confirmSave = e.ngDialogData.confirmSave, e.ngDialogData.loadingDirectory = !1, e.confirmSave = e.ngDialogData.confirmSave, angular.forEach(e.chooseTbFolderData.folderList, function (t) {
                            e.chooseTbFolderData.open[t.folder_id] = !1, t.isNew = !1, t.sub_folders && t.sub_folders.length > 0 && angular.forEach(t.sub_folders, function (t) {
                                e.chooseTbFolderData.open[t.folder_id] = !1, t.isNew = !1
                            }), "folder_root" == t.folder_id && (t.name = "en" == $.cookie("locale") ? "Root" : "根目录")
                        })
                    }, 
                    e.initData();
                    var d;
                    e.folderQueryKeyUp = function () {
                        e.chooseTbFolderData.isCreating && e.cancelCreateFolder(), clearTimeout(d), d = setTimeout(l(), 100)
                    }, 
                    e.toggleChooseFolder = function (t, a) {
                        if (t && t.stopPropagation(), e.chooseTbFolderData.isCreating) return void i(e.tips["wb.saveNewFolderFirst"]);
                        e.chooseTbFolderData.open[a] = !e.chooseTbFolderData.open[a]
                    }, 
                    e.setTargetFolder = function (t, a) {
                        if (e.chooseTbFolderData.isCreating) return void i(e.tips["wb.saveNewFolderFirst"]);
                        e.chooseTbFolderData.targetFolderId = t, e.chooseTbFolderData.targetFolderType = a
                    }, 
                    e.confirmChooseFolder = function () {
                        if (e.chooseTbFolderData.isCreating) return void i(e.tips["wb.saveNewFolderFirst"]);
                        var t = {
                            targetFolderId: e.chooseTbFolderData.targetFolderId
                        };
                        ["move", "copy", "move_folder"].indexOf(e.chooseTbFolderData.optType) >= 0 && (e.$emit("needReloadFolderListFlag", {
                            flag: !1,
                            targetFolderId: e.chooseTbFolderData.targetFolderId
                        }), t.tbInfo = e.chooseTbFolderData.tbInfo), "move_folder" == e.chooseTbFolderData.optType && (t.targetFolderType = e.chooseTbFolderData.targetFolderType), e.confirmSave(t)
                    }, 
                    e.createNewFolder = function () {
                        if (e.chooseTbFolderData.isCreating) return void i(e.tips["wb.saveNewFolderFirst"]);
                        e.chooseTbFolderData.queryText && (e.chooseTbFolderData.queryText = "", e.chooseTbFolderData.folderQueryList = []), e.chooseTbFolderData.targetFolderId = "new_" + (new Date).getTime();
                        var t = e.chooseTbFolderData.folderList.length,
                            a = t - 1;
                        a <= 0 && (a = 0);
                        var n = angular.copy(e.chooseTbFolderData.folderList[a]);
                        e.chooseTbFolderData.folderList[a] = {
                            folder_id: e.chooseTbFolderData.targetFolderId,
                            name: "",
                            isNew: !0
                        }, e.chooseTbFolderData.folderList.push(n), e.chooseTbFolderData.isCreating = !0, r(function () {
                            $(".create-new-folder input").focus(), scrollToBottom($(".J-choose-folder-list"), "", $(".J-choose-folder-list > ul").height())
                        }, 10)
                    }, 
                    e.okCreateFolder = function (a, r) {
                        if (!a) return void i(e.tips["wb.inputFolderName"]);
                        if (!s(a, r)) return void i(e.tips["wb.repeatFolderName"]);
                        var n = {
                            parent_id: "folder_root",
                            name: a
                        };
                        e.requestDone = !1, t.folder.create(n).then(function (t) {
                            if (e.requestDone = !0, 0 == Number(t.status)) {
                                i(e.tips["wb.createSuccess"]);
                                for (var a = e.chooseTbFolderData.folderList, r = a.length, n = r - 1; n >= 0; n--) a[n].folder_id == e.chooseTbFolderData.targetFolderId && (a[n].isNew = !1, a[n].folder_id = t.result.folder, e.chooseTbFolderData.targetFolderId = t.result.folder);
                                e.chooseTbFolderData.isCreating = !1;
                                ["move", "copy", "move_folder"].indexOf(e.chooseTbFolderData.optType) >= 0 && e.$emit("needReloadFolderListFlag", {
                                    flag: !0,
                                    targetFolderId: t.result.folder
                                });
                                ["join", "union", "sql"].indexOf(e.chooseTbFolderData.tbType) >= 0 && e.$emit("regainFolderList")
                            } else i(11 == Number(t.status) || 25001 == Number(t.status) ? e.tips["wb.repeatFolderName"] : e.tips["wb.createFailed"])
                        })
                    }, 
                    e.cancelCreateFolder = function () {
                        var t = e.chooseTbFolderData.folderList.length;
                        e.chooseTbFolderData.isCreating && (e.chooseTbFolderData.folderList.splice(t - 2, 1), 
                        e.chooseTbFolderData.isCreating = !1, 
                        e.chooseTbFolderData.targetFolderId = e.chooseTbFolderData.originalTargetFolderId)
                    }, 
                    n(["wb.newFolder", "wb.saveNewFolderFirst", "wb.inputFolderName", "wb.repeatFolderName", "wb.createSuccess", "wb.repeatFolderName", "wb.createFailed"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("chooseTbFolderCtrl", e), 
                e.$inject = ["$scope", "commonService", "ngDialog", "errHint", "$timeout", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a) {
                    function i() {
                        e.dialogStatus.getTables = !0, t.folder.getStructureWithParam({
                            get_root: 1
                        }).then(function (t) {
                            if (0 == t.status) {
                                e.dialogStatus.getTables = !1;
                                var a = t.result.folder_list;
                                a.forEach(function (e) {
                                    "folder_root" == e.folder_id && (e.name = "en" == $.cookie("locale") ? "Root" : "根目录")
                                }), e.chooseTbListData.folderList = a, e.chooseTbListData.saveFolderList = angular.copy(a), e.ngDialogData.extractTables && e.ngDialogData.extractTables(a)
                            }
                        })
                    }
                    e.getWorktable = function (a, i) {
                        return !a.unfolded && 1 != a.open && 0 == a.tb_list.length && a.mark !== !1 && (a.mark && a.sub_folders && a.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), i && i.stopPropagation(), a.loadingWorktables = !0, t.folder.getWorktable({
                            folder_id: a.folder_id
                        }).then(function (t) {
                            a.loadingWorktables = !1, e.chooseTbListData.folderList.forEach(function (e) {
                                e.folder_id == a.folder_id && 0 == e.tb_list.length && (t.result.forEach(function (t) {
                                    e.tb_list.push(t)
                                }), e.unfolded = !0, e.open = !0), "folder_root" != e.folder_id && e.sub_folders && e.sub_folders.forEach(function (i) {
                                    i.folder_id == a.folder_id && 0 == i.tb_list.length && (t.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, e.open = !0)
                                })
                            })
                        }))
                    }, e.chooseTbListFunc = {
                        chooseTable: function (t) {
                            e.chooseTbListData.curTable = t
                        },
                        certainTable: function () {
                            e.chooseTbListData.curTable && e.ngDialogData.okClickAction(e.chooseTbListData.curTable)
                        }
                    }, e.initData = function () {
                        e.dialogStatus = {
                            getTables: !1
                        }, e.chooseTbListData = {
                            folderList: [],
                            curTable: null,
                            queryTable: "",
                            hasDisplay: !0
                        }, i()
                    }, e.initData(), a(["wb.newFolder", "wb.saveNewFolderFirst", "wb.inputFolderName", "wb.repeatFolderName", "wb.createSuccess", "wb.repeatFolderName", "wb.createFailed"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("chooseTbListCtrl", e), 
                e.$inject = ["$scope", "commonService", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a, i, r, n, o) {
                    function l(e, a) {
                        t.currentFolder = e.sub_folders, t.currentList = e.tb_list
                    }

                    function s(e, a, i) {
                        t.currentFolder = [], t.currentList = e.tb_list
                    }

                    function d(e, a) {
                        var i = t.saveFolderListNext,
                            r = !0;
                        return function (t) {
                            for (var i = 0, n = t.length; i < n; i++)
                                if (t[i].folder_id != a && t[i].name == e) {
                                    r = !1;
                                    break
                                }
                        }(i), r
                    }
                    t.saveFolderList = angular.copy(t.saveFolderList), 
                    t.saveFolderListNext = angular.copy(t.saveFolderList), 
                    t.isSelectingTables = !0, t.selectedBatchTableIds = [], 
                    t.selectedBatchTables = [], 
                    t.selectedBatchFolder = "", 
                    t.currentFolderIndex = 0, 
                    t.currentSubFolderIndex = void 0, 
                    t.currentFolder = t.saveFolderList[t.currentFolderIndex].sub_folders, 
                    t.currentList = t.saveFolderList[t.currentFolderIndex].tb_list, 
                    t.isCreatingFolder = !1, 
                    t.newFolderId = "", 
                    t.changeQueryToFolderState = function (e) {
                        t.isCreatingFolder && t.cancelCreateFolderForBatchMove();
                        var a = null;
                        n.cancel(a), a = n(function () {
                            var a = e.queryToFolder;
                            if (a) {
                                t.toResultFiltered = !0, angular.forEach(t.saveFolderListNext, function (e) {
                                    e.hideDir = !e.name.match(a), e.hideDir ? angular.forEach(e.sub_folders, function (t) {
                                        t.name.match(a) ? (t.hideDir = !1, e.hideDir = !1) : t.hideDir = !0
                                    }) : angular.forEach(e.sub_folders, function (e) {
                                        e.hideDir = !1
                                    })
                                });
                                for (var i = 0, r = t.saveFolderListNext.length; i < r; i++)
                                    if (0 == t.saveFolderListNext[i].hideDir) {
                                        t.currentFolderIndex = i, t.currentSubFolderIndex = void 0, t.checkFolder(t.saveFolderListNext[i], i);
                                        break
                                    }
                            } else t.toResultFiltered = !1, t.currentFolderIndex = 0, t.currentSubFolderIndex = void 0, angular.forEach(t.saveFolderListNext, function (e) {
                                e.hideDir = !1, angular.forEach(e.sub_folders, function (e) {
                                    e.hideDir = !1
                                })
                            })
                        }, 100)
                    }, 
                    t.refreshCheckStatus = function (e) {
                        var a = e.sh_id ? e.sh_id : e.tb_id;
                        e.checked ? t.selectedBatchTableIds.push(a) : t.selectedBatchTableIds.splice(t.selectedBatchTableIds.indexOf(a), 1)
                    }, 
                    t.$watch("currentList", function (e) {
                        e && t.currentList.forEach(function (e) {
                            0 == t.selectedBatchTableIds.length ? e.checked = !1 : e.checked = t.selectedBatchTableIds.indexOf(e.sh_id) != -1 || t.selectedBatchTableIds.indexOf(e.tb_id) != -1
                        })
                    }), 
                    t.$watch("saveFolderList", function (e, a) {
                        if (e.length != a.length && 0 != e.length)
                            if (0 != t.saveFolderList[0].tb_list.length || 0 == t.saveFolderList[0].sub_folders.length || t.saveFolderList[0].mark) t.checkFolder(t.saveFolderList[0], 0);
                            else {
                                var i = "",
                                    r = !1;
                                t.saveFolderList[0].sub_folders.forEach(function (e, t) {
                                    e.hide !== !1 || r || (i = t, r = !0)
                                }), t.checkSubFolder(t.saveFolderList[0].sub_folders[i], i, 0)
                            }
                        else 0 == e.length && (t.currentFolder = [], t.currentList = [])
                    }), 
                    t.checkFolder = function (e, a) {
                        if (t.isCreatingFolder) return void r(t.tips["wb.saveNewFolderFirst"]);
                        if (t.currentFolderIndex = a, t.currentSubFolderIndex = void 0, t.isSelectingTables) {
                            var i = t.getWorktableFromFolder(e);
                            i ? i.then(function () {
                                l(e, a)
                            }) : l(e, a)
                        } else l(e, a)
                    }, 
                    t.checkSubFolder = function (e, a, i) {
                        if (t.isCreatingFolder) return void r(t.tips["wb.saveNewFolderFirst"]);
                        if (t.currentFolderIndex = i, t.currentSubFolderIndex = a, t.isSelectingTables) {
                            var n = t.getWorktableFromFolder(e);
                            n ? n.then(function () {
                                s(e, a, i)
                            }) : s(e, a, i)
                        } else s(e, a, i)
                    }, 
                    t.chooseTargetFolder = function (e) {
                        if (t.isCreatingFolder) return void r(t.tips["wb.saveNewFolderFirst"]);
                        t.selectedBatchFolder = e
                    }, 
                    t.moveTablesPrevStep = function () {
                        t.isCreatingFolder && t.cancelCreateFolderForBatchMove(), t.isSelectingTables = !0, t.currentFolderIndex = 0, t.currentSubFolderIndex = void 0, 0 != t.saveFolderList[0].tb_list || 0 == t.saveFolderList[0].sub_folders.length || t.saveFolderList[0].mark ? t.checkFolder(t.saveFolderList[0], 0) : t.checkSubFolder(t.saveFolderList[0].sub_folders[0], 0, 0), angular.element(".ngdialog-move-tables").removeClass("ngdialog-width-348").addClass("ngdialog-width-818")
                    }, 
                    t.moveTablesNextStep = function () {
                        if (0 == t.selectedBatchTableIds.length) return r(t.tips["wb.chooseFromWorktable"]), !1;
                        t.selectedBatchTableIds.forEach(function (e) {
                            t.selectedBatchTables.push({
                                tb_index: 0,
                                tb_id: e
                            })
                        }), t.toResultFiltered = !1, t.isSelectingTables = !1, t.currentFolderIndex = void 0, t.currentSubFolderIndex = void 0, angular.element(".ngdialog-move-tables").removeClass("ngdialog-width-818").addClass("ngdialog-width-348")
                    }, 
                    t.createFolderForBatchMove = function () {
                        if (t.isCreatingFolder) return void r(t.tips["wb.saveNewFolderFirst"]);
                        t.queryToFolder && (t.queryToFolder = "", t.changeQueryToFolderState({
                            queryToFolder: ""
                        })), t.newFolderId = "new_" + (new Date).getTime();
                        var e = t.saveFolderListNext.length,
                            a = angular.copy(t.saveFolderListNext[e - 1]);
                        t.saveFolderListNext[e - 1] = {
                            folder_id: t.newFolderId,
                            name: "",
                            isNew: !0,
                            sub_folders: [],
                            tb_list: []
                        }, t.saveFolderListNext.push(a), t.isCreatingFolder = !0, n(function () {
                            t.currentFolderIndex = t.saveFolderListNext.length - 2, t.currentSubFolderIndex = void 0, $(".create-new-folder input").focus(), scrollToBottom($(".ngdialog-move-tables .directory-list"))
                        }, 200)
                    }, 
                    t.okCreateFolderForBatchMove = function (e, i) {
                        if (!e) return void r(t.tips["wb.inputFolderName"]);
                        if (!d(e, i)) return void r(t.tips["wb.repeatFolderName"]);
                        var n = {
                            parent_id: "folder_root",
                            name: e
                        };
                        t.requestDone = !1, a.folder.create(n).then(function (e) {
                            if (t.requestDone = !0, 0 == Number(e.status)) {
                                r(t.tips["wb.createSuccess"]);
                                for (var a = t.saveFolderListNext, i = a.length, n = i - 1; n >= 0; n--) a[n].folder_id == t.newFolderId && (a[n].isNew = !1, a[n].folder_id = e.result.folder, t.selectedBatchFolder = e.result.folder);
                                t.isCreatingFolder = !1, t.$emit("needReloadFolderListFlag", {
                                    flag: !0,
                                    targetFolderId: ""
                                }), t.getFolderStructure({
                                    get_first: 0,
                                    get_root: 1,
                                    tb_list: [t.selected.tb_id]
                                })
                            } else r(11 == Number(e.status) || 25001 == Number(e.status) ? t.tips["wb.repeatFolderName"] : t.tips["wb.createFailed"])
                        })
                    }, 
                    t.cancelCreateFolderForBatchMove = function () {
                        var e = t.saveFolderListNext.length;
                        t.isCreatingFolder && (t.saveFolderListNext.splice(e - 2, 1), t.isCreatingFolder = !1, t.newFolderId = "", t.currentFolderIndex = void 0, t.currentSubFolderIndex = void 0)
                    }, 
                    t.saveBatchMove = function () {
                        if (!t.selectedBatchFolder) return r(t.tips["wb.chooseToDirectory"]), !1;
                        var n = {
                            change_folders: JSON.stringify(t.selectedBatchTables),
                            to_folder: t.selectedBatchFolder,
                            ws_id: e.wsId
                        };
                        t.$emit("needReloadFolderListFlag", {
                            flag: !1,
                            targetFolderId: ""
                        }), a.tb.batchMove(n).then(function (e) {
                            0 == e.status && (r(t.tips["wb.batchMoveSuccess"]), t.getFolderStructure({
                                get_first: 0,
                                get_root: 1,
                                tb_list: [t.selected.tb_id]
                            }), i.close())
                        })
                    }, 
                    t.getWorktableFromFolder = function (e) {
                        return !e.unfolded && e.mark !== !1 && (e.mark && e.sub_folders && e.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), t.loadingWorktables = !0, t.currentList = [], a.folder.getWorktable({
                            folder_id: e.folder_id
                        }).then(function (a) {
                            t.loadingWorktables = !1, t.saveFolderList.forEach(function (t) {
                                t.folder_id == e.folder_id && 0 == t.tb_list.length && (a.result.forEach(function (e) {
                                    t.tb_list.push(e)
                                }), t.unfolded = !0, t.open = !0), "folder_root" != t.folder_id && t.sub_folders && t.sub_folders.forEach(function (i) {
                                    i.folder_id == e.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, t.open = !0)
                                })
                            })
                        }))
                    }, 
                    o(["wb.chooseFromWorktable", "wb.saveNewFolderFirst", "wb.newFolder", "wb.chooseToDirectory", "wb.batchMoveSuccess", "wb.inputFolderName", "wb.repeatFolderName", "wb.createSuccess", "wb.createFailed"], t)
                }
                angular.module("BC.controllers.dataSource")
                .controller("batchMoveTablesCtrl", e), 
                e.$inject = ["$rootScope", "$scope", "commonService", "ngDialog", "errHint", "$timeout", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a, i, r, n, o) {
                    t.saveFolderList = angular.copy(t.saveFolderList), 
                    t.isSelectingTables = !0, 
                    t.isCheckSelectedTables = !1, 
                    t.isCheckCodeTables = !1, 
                    t.selectedBatchTables = [], 
                    t.currentFolderIndex = 0, 
                    t.currentSubFolderIndex = void 0, 
                    t.currentFolder = t.saveFolderList[t.currentFolderIndex].sub_folders, 
                    t.currentList = t.saveFolderList[t.currentFolderIndex].tb_list, 
                    t.batchDeleteListRely = [], 
                    t.currentFolderIndexRely = 0, 
                    t.currentSubFolderIndexRely = void 0, 
                    t.currentFolderRely = [], 
                    t.currentListRely = [], 
                    t.delCheckCode = "", 
                    t.relyMapTip = null, 
                    t.checkCodePageLoading = !1, 
                    t.refreshCheckStatus = function (e) {
                        var a = e.sh_id ? e.sh_id : e.tb_id;
                        e.checked ? t.selectedBatchTables.push(a) : t.selectedBatchTables.splice(t.selectedBatchTables.indexOf(a), 1)
                    }, 
                    t.$watch("currentList", function (e) {
                        t.currentList.forEach(function (e) {
                            0 == t.selectedBatchTables.length ? e.checked = !1 : e.checked = t.selectedBatchTables.indexOf(e.sh_id) != -1 || t.selectedBatchTables.indexOf(e.tb_id) != -1
                        })
                    }), 
                    t.$watch("currentListRely", function (e) {
                        t.currentListRely.forEach(function (e) {
                            0 == t.selectedBatchTables.length ? e.checked = !1 : e.checked = t.selectedBatchTables.indexOf(e.sh_id) != -1 || t.selectedBatchTables.indexOf(e.tb_id) != -1
                        })
                    }), 
                    t.$watch("saveFolderList", function (e, a) {
                        if (e.length != a.length && 0 != e.length)
                            if (0 != t.saveFolderList[0].tb_list || 0 == t.saveFolderList[0].sub_folders.length || t.saveFolderList[0].mark) t.checkFolder(t.saveFolderList[0], 0);
                            else {
                                var i = "",
                                    r = !1;
                                t.saveFolderList[0].sub_folders.forEach(function (e, t) {
                                    e.hide !== !1 || r || (i = t, r = !0)
                                }), t.checkSubFolder(t.saveFolderList[0].sub_folders[i], i, 0)
                            }
                        else 0 == e.length && (t.currentFolder = [], t.currentList = [])
                    }), 
                    t.checkFolder = function (e, a) {
                        t.currentFolder = e.sub_folders, t.currentFolderIndex = a, t.currentSubFolderIndex = void 0;
                        var i = t.getWorktableFromFolder(e);
                        i ? i.then(function () {
                            t.currentList = e.tb_list
                        }) : t.currentList = e.tb_list
                    }, 
                    t.checkSubFolder = function (e, a, i) {
                        t.currentFolder = [], t.currentFolderIndex = i, t.currentSubFolderIndex = a;
                        var r = t.getWorktableFromFolder(e);
                        r ? r.then(function () {
                            t.currentList = e.tb_list
                        }) : t.currentList = e.tb_list
                    }, 
                    t.checkFolderRely = function (e, a) {
                        t.currentFolderRely = e.sub_folders, t.currentFolderIndexRely = a, t.currentListRely = e.tb_list, t.currentSubFolderIndexRely = void 0;
                        var i = t.getWorktableFromFolder(e);
                        i && i.then(function () {
                            t.currentListRely = e.tb_list
                        })
                    }, 
                    t.checkSubFolderRely = function (e, a, i) {
                        t.currentFolderRely = [], t.currentFolderIndexRely = i, t.currentSubFolderIndexRely = a;
                        var r = t.getWorktableFromFolder(e);
                        r && r.then(function () {
                            t.currentListRely = e.tb_list
                        })
                    }, 
                    t.deleteTablesSelectingTablesStep = function () {
                        t.setStepDisplay(1), angular.element(".ngdialog-move-tables").removeClass("ngDialog-width-320").addClass("ngdialog-width-818")
                    }, 
                    t.deleteTablesCheckSelectedStep = function () {
                        if (t.toResultFiltered = !1, 
                            t.currentFolderIndexRely = 0, 
                            t.currentSubFolderIndexRely = void 0, 
                            0 == t.selectedBatchTables.length) 
                            return r(t.tips["wb.chooseDeleteWorktable"]), 
                            !1;
                        t.checkWorktableRely()
                    }, 
                    t.checkWorktableRely = function () {
                        t.checkCodePageLoading = !0;
                        var i = {
                            tb_list: JSON.stringify(t.selectedBatchTables),
                            ws_id: e.wsId
                        };
                        a.tb.checkTablesRely(i).then(function (e) {
                            0 == e.status && (e.result.length > 0 ? (t.setStepDisplay(2), t.batchDeleteListRely = e.result, t.setCheckDeleteListRely(), t.currentFolderRely = t.batchDeleteListRely[t.currentFolderIndexRely].sub_folders, t.currentListRely = t.batchDeleteListRely[t.currentFolderIndexRely].tb_list, t.currentListRely.length <= 0 && (t.currentSubFolderIndexRely = 0, t.currentListRely = t.currentFolderRely[t.currentSubFolderIndexRely].tb_list)) : t.deleteTablesCheckCodeStep()), t.checkCodePageLoading = !1
                        })
                    }, 
                    t.changeRelyChecked = function (e) {
                        angular.forEach(t.saveFolderList, function (t) {
                            angular.forEach(t.sub_folders, function (t) {
                                angular.forEach(t.tb_list, function (t) {
                                    t.tb_id == e.tb_id && (t.checked = e.checked)
                                })
                            }), angular.forEach(t.tb_list, function (t) {
                                t.tb_id == e.tb_id && (t.checked = e.checked)
                            })
                        })
                    }, 
                    t.setCheckDeleteListRely = function () {
                        angular.forEach(t.batchDeleteListRely, function (e) {
                            angular.forEach(e.tb_list, function (e) {
                                e.checked = !0
                            }), angular.forEach(e.sub_folders, function (e) {
                                angular.forEach(e.tb_list, function (e) {
                                    e.checked = !0
                                })
                            })
                        })
                    }, 
                    t.excludeDeleteList = function () {
                        var e = [],
                            a = [],
                            i = !0;
                        angular.forEach(t.batchDeleteListRely, function (t) {
                            angular.forEach(t.sub_folders, function (t) {
                                angular.forEach(t.tb_list, function (t) {
                                    t.checked && 2 != t.rely_type || e.push(t.tb_id)
                                })
                            }), angular.forEach(t.tb_list, function (t) {
                                t.checked && 2 != t.rely_type || e.push(t.tb_id)
                            })
                        });
                        for (var r = 0, n = t.selectedBatchTables.length; r < n; r++) {
                            i = !0;
                            for (var o = 0, l = e.length; o < l; o++) e[o] == t.selectedBatchTables[r] && (i = !1);
                            i && a.push(t.selectedBatchTables[r])
                        }
                        t.selectedBatchTables = a
                    }, 
                    t.deleteTablesCheckCodeStep = function () {
                        t.excludeDeleteList(), t.selectedBatchTables.length > 0 ? (t.setStepDisplay(3), angular.element(".ngdialog-move-tables").removeClass("ngdialog-width-818").addClass("ngDialog-width-320"), t.toggleImg()) : r(t.tips["wb.deleteTablesNone"])
                    }, 
                    t.saveBatchDelete = function () {
                        if (t.checkedCode()) {
                            var n = {
                                tb_list: JSON.stringify(t.selectedBatchTables),
                                ws_id: e.wsId,
                                session_id: t.sessionId,
                                verify_code: t.delCheckCode
                            };
                            t.$emit("needReloadFolderListFlag", {
                                flag: !1,
                                targetFolderId: ""
                            }), t.checkCodePageLoading = !0, a.tb.batchDeleteTables(n).then(function (e) {
                                if (0 == e.status) {
                                    r(t.tips["wb.batchDeleteSuccess"]);
                                    var a = {
                                        get_first: 0,
                                        get_root: 1,
                                        tb_list: []
                                    };
                                    t.selected.tb_id && a.tb_list.push(t.selected.tb_id), t.getFolderStructure(a), i.close()
                                } else 23002 == e.status && r(t.tips["error.codeError"]), t.toggleImg();
                                t.checkCodePageLoading = !1
                            })
                        }
                    }, t.setStepDisplay = function (e) {
                        switch (e) {
                            case 1:
                                t.isSelectingTables = !0, t.isCheckSelectedTables = !1, t.isCheckCodeTables = !1;
                                break;
                            case 2:
                                t.relyMapTip || (t.relyMapTip = {
                                    1: t.tips["wb.tableRelyWarning"],
                                    2: t.tips["wb.tableRelyError"]
                                }), t.isSelectingTables = !1, t.isCheckSelectedTables = !0, t.isCheckCodeTables = !1;
                                break;
                            case 3:
                                t.isSelectingTables = !1, t.isCheckSelectedTables = !1, t.isCheckCodeTables = !0
                        }
                    }, t.checkedCode = function () {
                        var e = !0;
                        return 4 != t.delCheckCode.length && (t.errorCodeMsg = t.tips["error.codeError"], e = !1), e
                    }, t.toggleImg = function () {
                        var e = (new Date).getTime();
                        t.sessionId = e + parseInt(1e4 * Math.random()), t.url = "/api/register/pic?session_id=" + t.sessionId + "&t=" + e
                    }, t.getWorktableFromFolder = function (e) {
                        return !e.unfolded && e.mark !== !1 && (e.mark && e.sub_folders && e.sub_folders.forEach(function (e) {
                            e.hide = !1
                        }), t.loadingWorktables = !0, t.currentList = [], t.currentListRely = [], a.folder.getWorktable({
                            folder_id: e.folder_id
                        }).then(function (a) {
                            t.loadingWorktables = !1, t.saveFolderList.forEach(function (t) {
                                t.folder_id == e.folder_id && 0 == t.tb_list.length && (a.result.forEach(function (e) {
                                    t.tb_list.push(e)
                                }), t.unfolded = !0, t.open = !0), "folder_root" != t.folder_id && t.sub_folders && t.sub_folders.forEach(function (i) {
                                    i.folder_id == e.folder_id && 0 == i.tb_list.length && (a.result.forEach(function (e) {
                                        i.tb_list.push(e)
                                    }), i.unfolded = !0, i.open = !0, t.open = !0)
                                })
                            })
                        }))
                    }, o(["wb.chooseDeleteWorktable", "error.codeError", "wb.batchDeleteSuccess", "wb.tableRelyError", "wb.tableRelyWarning", "error.codeError", "wb.deleteTablesNone"], t)
                }
                angular.module("BC.controllers.dataSource")
                .controller("batchDeleteTablesCtrl", e), 
                e.$inject = ["$rootScope", "$scope", "commonService", "ngDialog", "errHint", "$timeout", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a, i, r, n) {
                    function o(e) {
                        return /\.csv$/.test(e)
                    }

                    function l() {
                        var t = e.csvData.value;
                        return "other" == t && (t = e.csvData.otherValue, t.length > 1) ? (i(e.tips["upload.onlyOneDelimiter"]), !1) : t ? (e.csvData.value = t, e.csvData.hasSet = !0, void f()) : (i(e.tips["upload.csvDesc"]), !1)
                    }

                    function s() {
                        e.batchSetData.uploadStatus = "init", e.csvData.value = "comma", e.csvData.otherValue = ""
                    }

                    function d() {
                        if (e.dialogPageStatus.isRequesting) return !1;
                        angular.element("#upload_set_field_file").click()
                    }

                    function c() {
                        if (!e.uploadFileData.localFile) return void(e.uploadFileData.name = "");
                        e.uploadFileData.name = e.uploadFileData.localFile.name
                    }

                    function u() {
                        var t = e.uploadFileData.localFile;
                        t && (o(t.name) ? e.batchSetData.uploadStatus = "csv" : f())
                    }

                    function f() {
                        var t = e.uploadFileData.localFile;
                        t && (e.dialogPageStatus.isRequesting = !0, t.upload = r.upload({
                            url: "/api/field/upload_templete",
                            method: "POST",
                            data: {
                                tb_id: e.batchSetData.tb_id,
                                file: t,
                                key: t.name,
                                "Content-Type": null === t.type || "" === t.type ? "application/octet-stream" : t.type,
                                filename: t.name,
                                field_terminate: /\.csv$/.test(t.name) ? e.csvData.value : void 0
                            }
                        }), t.upload.then(function (t) {
                            e.dialogPageStatus.isRequesting = !1, 0 == t.data.status ? (e.batchSetData.analysisData = t.data.result, e.batchSetData.uploadStatus = "success", e.batchSetData.uploadErrorStr = "") : (e.batchSetData.uploadErrorStr = t.data.errstr || e.tips["wb.batchSetUploadFail"], e.batchSetData.uploadStatus = "error")
                        }, function (t) {
                            e.dialogPageStatus.isRequesting = !1, e.batchSetData.uploadErrorStr = t.data.errstr || e.tips["wb.batchSetUploadFail"], e.batchSetData.uploadStatus = "error"
                        }, function (t) {
                            e.batchSetData.uploadStatus = "uploading";
                            Math.min(100, parseInt(100 * t.loaded / t.total))
                        }))
                    }

                    function p() {
                        "desc" == e.batchSetData.setType ? console.log(e.batchSetData.selectField) : console.log(e.batchSetData.analysisData), g()
                    }

                    function g() {
                        var t = {
                            selectField: e.batchSetData.selectField,
                            analysisData: e.batchSetData.analysisData
                        };
                        e.ngDialogData.completeCallback(e.batchSetData.setType, t)
                    }
                    e.initData = function () {
                        e.batchSetData = {
                            tb_id: e.ngDialogData.tb_id,
                            setType: "desc",
                            selectField: "fieldDesc",
                            tplFilePath: "/pmresources/tplDocs/字段批量命名模板.xlsx",
                            uploadStatus: "init",
                            uploadErrorStr: "",
                            analysisData: {},
                            saveSetCsv: l,
                            cancelSetCsv: s,
                            selectFile: d,
                            changeFile: c,
                            uploadFile: u,
                            completeBatchSetField: p
                        }, e.dialogPageStatus = {
                            isRequesting: !1
                        }, e.uploadFileData = {
                            name: "",
                            localFile: "",
                            acceptTypes: "text/csv,*.xls,*.xlsx,.csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        }, e.csvData = {
                            value: "comma",
                            otherValue: ""
                        }
                    }, e.initData(), n(["wb.batchSetUploadFail", "upload.onlyOneDelimiter", "upload.csvDesc"], e)
                }
                angular.module("BC.controllers.dataSource")
                .controller("batchSetFieldNameCtrl", e), 
                e.$inject = ["$scope", "commonService", "ngDialog", "errHint", "Upload", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a, i, r, n, o, l, s) {
                    function d(e) {
                        g(0, e, t.capacityData.queryData.text)
                    }

                    function c() {
                        g(0, t.capacityData.queryData.account, t.capacityData.queryData.text)
                    }

                    function u(e) {
                        13 == e.keyCode && g(0, t.capacityData.queryData.account, t.capacityData.queryData.text)
                    }

                    function f(e, a, i) {
                        g(e - 1, t.capacityData.queryData.account, t.capacityData.queryData.text)
                    }

                    function p() {
                        t.isGettingAccount = !0, i.get("/api/sub/list").then(function (e) {
                            if (t.isGettingAccount = !1, 0 == e.status) {
                                var a = [{
                                    name: t.tips["wb.tableCapacity.all"],
                                    userid: "default_all_id"
                                }, {
                                    name: _,
                                    userid: $.cookie("user_id")
                                }];
                                t.capacityData.accountList = a.concat(e.result), t.capacityData.queryData.account = $.cookie("user_id")
                            } else n(+e.status, {
                                warn_msg: e.errstr
                            })
                        })
                    }

                    function g(e, a, r) {
                        var o = "default_all_id" == a ? 1 : 0;
                        a = "default_all_id" == a ? "" : a, t.isGettingCapacity = !0;
                        var l = {
                            page: e,
                            sub_id: a || "",
                            keyword: r || "",
                            show_all: o
                        };
                        i.post("/api/tb/list_info", l).then(function (e) {
                            t.isGettingCapacity = !1, 0 == e.status ? (t.capacityData.tableList = e.result.tb_list || [], t.capacityData.page.total = Math.ceil(e.result.count / 50), t.capacityData.page.cur = e.result.page + 1, t.capacityData.summary.base = e.result.stat.base, t.capacityData.summary.combined = e.result.stat.view, t.capacityData.summary.total = e.result.stat.total) : n(+e.status, {
                                warn_msg: e.errstr
                            })
                        })
                    }

                    function h(e) {
                        localStorage.setItem("jumpToRelationMap", e), m()
                    }

                    function m() {
                        e.wsId ? l.path("/data_source/" + e.wsId) : l.path("/data_source")
                    }
                    var _ = "";
                    e.view = "tableCapacity", e.show_bdp_header = !1, t.isGettingCapacity = !1, t.isGettingTable = !1, t.isGettingAccount = !1;
                    var b = t.$watch(function () {
                        return e.userInfoObj
                    }, function (e) {
                        isObjectEmpty(e) || (t.capacityData.isSuperAdmin = 0 == e.role, t.capacityData.isSuperAdmin && (_ = e.contact, p()), b())
                    });
                    t.initData = function () {
                        t.capacityData = {
                            summary: {
                                total: 0,
                                base: 0,
                                combined: 0
                            },
                            queryData: {
                                text: "",
                                account: null
                            },
                            page: {
                                cur: 0,
                                total: 0
                            },
                            accountList: [],
                            tableList: [],
                            showAccountType: !1,
                            isSuperAdmin: !1,
                            back: m,
                            selectAccount: d,
                            keyUpSearch: u,
                            clickSearch: c,
                            changePage: f,
                            jumpToRelationMap: h
                        }, g(0, "", "")
                    }, t.initData(), s(["wb.newFolder", "wb.saveNewFolderFirst", "wb.inputFolderName", "wb.repeatFolderName", "wb.createSuccess", "wb.repeatFolderName", "wb.createFailed", "wb.tableCapacity.all", "wb.tableCapacity.superAdmin"], t)
                }
                angular.module("BC.controllers.dataSource")
                .controller("tableCapacityCtrl", e),
                e.$inject = ["$rootScope", "$scope", "commonService", "commonHttp", "ngDialog", "errHint", "$timeout", "$location", "$jsTipTranslate"]
            }(),
            function () {
                function e(e, t, a, i, r) {
                    function n() {
                        var a = e.parseCodeData,
                            i = {
                                tb_id: a.tbId,
                                ftype: Number(a.ftype),
                                field_id: a.field_id
                            };
                        t.tb.getFieldParseCode(i).then(function (e) {
                            0 == e.status && e.result.flist && o(e.result)
                        })
                    }

                    function o(t) {
                        var a = e.parseCodeData,
                            i = angular.fromJson(t.flist);
                        t.ftype;
                        angular.forEach(a.fieldResultList, function (e) {
                            $.inArray(e.key, i) > -1 ? e.check = !0 : e.check = !1
                        })
                    }

                    function l() {
                        var t = e.parseCodeData;
                        if (!t.ftype) return i(a.instant("field.parseCodeTitle")), !1;
                        if (!t.field_id) return i(a.instant("field.parseCodeFieldTitle")), !1;
                        return !!t.fieldResultList.some(function (e, t) {
                            if (e.check) return !0
                        }) || (i(a.instant("field.parseReslutTitle")), !1)
                    }

                    function s() {
                        var t = e.parseCodeData,
                            a = {
                                tb_id: t.tbId,
                                ftype: Number(t.ftype),
                                field_id: t.field_id,
                                flist: []
                            };
                        return angular.forEach(t.fieldResultList, function (e) {
                            e.check && a.flist.push(e.key)
                        }), a.flist = angular.toJson(a.flist), a
                    }

                    function d() {
                        var t = e.parseCodeData;
                        t.fields = [], angular.forEach(e.previewData.field_list, function (e) {
                            "date" != e.data_type && t.fields.push(e)
                        })
                    }

                    ! function () {
                        e.parseCodeData = {
                            codeType: [{
                                key: 1,
                                name: a.instant("field.idNumber")
                            }, {
                                key: 2,
                                name: a.instant("field.phoneNumber")
                            }, {
                                key: 3,
                                name: a.instant("field.postalCode")
                            }],
                            codeFieldList: {
                                1: [{
                                    key: "province",
                                    name: a.instant("field.nativePlace"),
                                    check: !0
                                }, {
                                    key: "birthday",
                                    name: a.instant("field.dateOfBirth"),
                                    check: !0
                                }, {
                                    key: "gender",
                                    name: a.instant("field.sex"),
                                    check: !0
                                }],
                                2: [{
                                    key: "address",
                                    name: a.instant("field.homeLocation"),
                                    check: !0
                                }, {
                                    key: "carrier",
                                    name: a.instant("field.operator"),
                                    check: !0
                                }],
                                3: [{
                                    key: "postcode",
                                    name: a.instant("field.homeLocation"),
                                    check: !0
                                }]
                            },
                            tbId: e.selected.tb.tb_id,
                            ftype: 1,
                            field: null
                        };
                        var t = e.parseCodeData;
                        e.parseCodeData.fieldResultList = t.codeFieldList[t.ftype], 
                        d()
                    }(), 
                    e.parseCodeFun = {
                        changeType: function () {
                            var t = e.parseCodeData;
                            t.fieldResultList = t.codeFieldList[t.ftype]
                        },
                        updateField: function (t) {
                            e.parseCodeData.field = t, e.parseCodeData.field_id = t.fid, n()
                        },
                        save: function () {
                            if (l()) {
                                var n = s();
                                e.parseCodeData.loading = !0, t.tb.parseCode(n).then(function (t) {
                                    0 == t.status && (i(a.instant("field.transformSuccess")), e.show_preview_data(), r.closeAll()), e.parseCodeData.loading = !1
                                })
                            }
                        }
                    }
                }
                angular.module("BC.controllers.dataSource")
                .controller("parseCodeCtrl", e), 
                e.$inject = ["$scope", "commonService", "$translate", "errHint", "ngDialog"]
            }(), 
            angular.module("BC.directives")
            .directive("setUp", ["$timeout", "$rootScope", function (e, t) {
                return {
                    restrict: "A",
                    scope: {
                        onCommit: "&",
                        editTable: "=",
                        assignTableTo: "&",
                        deleteTb: "&",
                        moveTb: "=",
                        folderId: "=",
                        copyTb: "=",
                        showTb: "="
                    },
                    templateUrl: "/static/partials/table_set_up.html",
                    link: function (a, i, r) {
                        function n() {
                            var e = a.onCommit({
                                text: a.tbName.newText
                            });
                            e && (a.text = e), a.editting = !1
                        }
                        a.tb = angular.fromJson(r.tbData), a.tbName = {}, a.tbName.newText = a.text = a.tb.name, a.opt_list = !1, a.ds_over_one = !1, a.view = r.view;
                        var o = a.tb;
                        a.canCopyTb = "self" == o.tb_type && ["join", "aggr", "script", "union", "transpose"].indexOf(o.type) >= 0, a.canEdit = "self" == o.tb_type && "allot" != o.type, a.canDelete = "allot" != o.type || t.wsId, a.canMove = "folderList" == a.view || "folder_root" == a.folderId, a.canAssign = !t.permision.isPersonal && !t.permision.isNormalUser && !t.wsId, a.tabOpt = function (t, r) {
                            a.opt_list = !a.opt_list, e(function () {
                                var e = $(i).find(".opt_list"),
                                    t = $(r.target).offset(),
                                    n = $(window).height(),
                                    o = t.top + 15,
                                    l = t.left - 50,
                                    s = 0;
                                s = a.canEdit && a.canCopyTb && a.canDelete ? 140 : a.canEdit && !a.canCopyTb && a.canDelete ? 85 : a.canEdit || a.canCopyTb || !a.canDelete ? 30 : 50, n - o < 140 && (o = t.top - s), e.css({
                                    top: o,
                                    left: l,
                                    visibility: "visible"
                                })
                            }, 0), angular.element(".label-comment-tooltip").css({
                                display: "none"
                            })
                        }, a.$on("renameTb", function (e, t) {
                            a.tb.tb_id == t.tb_id && (a.text = a.tb.name = t.name, a.tb.label = t.label, a.tb.comment = t.comment)
                        }), a.$watch("opt_list", function (t, i) {
                            if (t !== i && 1 == t) {
                                var r = angular.element(".J_scroll_folder").scrollTop();
                                e(function () {
                                    angular.element(".J_scroll_folder").on("scroll.wtbfolder", function (e) {
                                        Math.abs(r - $(e.target).scrollTop()) > 8 && (a.opt_list = !1, a.$digest())
                                    })
                                }, 0)
                            } else t !== i && 0 == t && angular.element(".J_scroll_folder").off("scroll.wtbfolder")
                        }), a.edit = function (e, t) {
                            a.editTable(e), a.ds_over_one = !1, a.opt_list = !1
                        }, t.$watch("global.tbEditting", function (e) {
                            void 0 != e && (e || (a.editting = !1))
                        }), a.inputClick = function (e) {}, a.inputBlur = function () {
                            e(function () {
                                a.editting = !1
                            }, 500)
                        }, a.inputKeyup = function (e) {
                            13 === e.keyCode && n()
                        }, a.commit = function (e, t) {
                            return n(), !1
                        }, a.assignTo = function (e, t) {
                            a.opt_list = !1, a.ds_over_one = !1, a.assignTableTo(e)
                        }, a.delete = function (e) {
                            a.opt_list = !1, a.ds_over_one = !1, a.deleteTb()
                        }, a.move = function (e, t) {
                            a.moveTb(e), a.ds_over_one = !1, a.opt_list = !1
                        }, a.copyTo = function (e, t) {
                            a.copyTb(e), a.ds_over_one = !1, a.opt_list = !1
                        }, a.show_table = function (e) {
                            a.showTb(e, 1)
                        }, a.$on("folder-drop-fire", function () {
                            a.opt_list = !1, a.ds_over_one = !1
                        })
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("folderOpt", ["$timeout", "$rootScope", "errHint", "$jsTipTranslate", function (e, t, a, i) {
                return {
                    restrict: "A",
                    scope: {
                        onCommit: "&",
                        deleteFolder: "&",
                        stickyFolder: "&",
                        moveFolder: "&",
                        tgFolder: "&",
                        getTable: "&"
                    },
                    templateUrl: "/static/partials/table_folder_opt.html",
                    link: function (a, r, n) {
                        function o() {
                            var e = a.onCommit({
                                text: a.folderName.newText
                            });
                            e && (a.text = e), a.editting = !1
                        }
                        a.editting = !1, a.show_opt_list = !1, a.ds_over_one = !1, a.canEdit = !0, a.canMove = !0, a.canDelete = !0, a.folder = angular.fromJson(n.folderData), a.folderName = {}, a.folderName.newText = a.text = a.folder.name, a.folderOption = function (t) {
                            a.show_opt_list = !a.show_opt_list, e(function () {
                                var e = $(t.target).offset(),
                                    i = $(window).height(),
                                    n = e.top + 15,
                                    o = e.left - 50,
                                    l = 0;
                                l = a.canEdit && a.canCopyTb && a.canDelete ? 160 : a.canEdit && !a.canCopyTb && a.canDelete ? 130 : 90, i - n < 120 && (n = e.top - l), $(r).find(".opt_list").css({
                                    top: n,
                                    left: o,
                                    visibility: "visible"
                                })
                            }, 0)
                        }, a.$watch("show_opt_list", function (t, i) {
                            if (t !== i && 1 == t) {
                                var r = angular.element(".J_scroll_folder").scrollTop();
                                e(function () {
                                    angular.element(".J_scroll_folder").on("scroll.wtbfolder", function (e) {
                                        Math.abs(r - $(e.target).scrollTop()) > 8 && (a.show_opt_list = !1, a.$digest())
                                    })
                                }, 0)
                            } else t !== i && 0 == t && angular.element(".J_scroll_folder").off("scroll.wtbfolder")
                        }), a.inputClick = function (e) {
                            e.stopPropagation()
                        }, a.inputBlur = function () {
                            e(function () {
                                a.editting = !1
                            }, 500)
                        }, a.inputKeyup = function (e) {
                            13 === e.keyCode && o()
                        }, a.edit = function (i) {
                            return t.global.tbEditting = !0, a.editting = !0, a.show_opt_list = !1, a.ds_over_one = !1, i.stopPropagation(), a.folderName.newText = a.text, e(function () {
                                r.find("input").select().focus()
                            }, 0), !1
                        }, t.$watch("global.tbEditting", function (e) {
                            void 0 != e && (e || (a.editting = !1))
                        }), a.commit = function (e) {
                            return e && e.stopPropagation(), o(), !1
                        }, a.delete = function (e) {
                            var t = a.folder;
                            e && e.stopPropagation(), a.show_opt_list = !1, a.ds_over_one = !1, a.deleteFolder({
                                folder: t
                            })
                        }, a.stick = function (e) {
                            e && e.stopPropagation(), a.show_opt_list = !1, a.ds_over_one = !1, a.stickyFolder({
                                folder_id: a.folder.folder_id
                            }), e.stopPropagation()
                        }, a.move = function (e) {
                            e && e.stopPropagation(), a.show_opt_list = !1, a.ds_over_one = !1, a.moveFolder({
                                folder: a.folder
                            }), e.stopPropagation()
                        }, a.toggle = function () {
                            a.tgFolder({
                                folder: a.folder
                            })
                        }, a.$on("folder-drop-fire", function () {
                            a.show_opt_list = !1, a.ds_over_one = !1
                        }), i(["bdpJournal.workspace.delete"], a)
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("filterFolderTable", ["commonService", "$timeout", "pendingRequests", function (e, t, a) {
                return {
                    restrict: "A",
                    templateUrl: "/static/js/worktable/directivesTemplates/searchFolderTableBox.html",
                    replace: !0,
                    scope: {
                        folderList: "=",
                        isDialog: "@"
                    },
                    link: function (t, i, r) {
                        function n() {
                            var i = t.queryFolderTable;
                            t.searchingFolderAndTable = !0, a.cancelOne("/api/folder/filter"), i ? e.folder.filterFolderAndTable({
                                filter_str: i
                            }).then(function (e) {
                                0 == e.status && (t.folderList = e.result.folder_list, o && t.$emit("initTableSplit", {
                                    folderList: t.folderList,
                                    noDefault: !1
                                })), t.searchingFolderAndTable = !1
                            }) : ("true" == t.isDialog ? t.folderList = t.folderListBeforeFilter : t.$emit("regainFolderList", {
                                get_first: !1
                            }), t.searchingFolderAndTable = !1)
                        }
                        t.queryFolderTable = "", i.on("click.filterFolderTable", function () {
                            t.isDialog && 0 == t.queryFolderTable.length && (t.folderListBeforeFilter = t.folderList)
                        }), t.showPlaceholder = function () {
                            t.searchPlaceholder = "en" == t.$root.language ? "Input name" : "输入名称搜索"
                        }, t.hidePlaceholder = function () {
                            t.searchPlaceholder = ""
                        };
                        var o = t.$eval(r.isSplit);
                        i.on("keyup.filterFolderTable", $.debounce(300, function () {
                            n()
                        })), t.$on("redoSearch", function () {
                            n()
                        }), t.$on("emptySearchText", function () {
                            t.queryFolderTable = ""
                        }), t.$on("$destroy", function () {
                            i.off("keyup.filterFolderTable")
                        })
                    }
                }
            }]), 
            
            angular.module("BC.directives")
            .directive("searchFolderTable", [function () {
                return {
                    link: function (e, t, a) {
                        function i() {
                            var t = e.$eval(a.ngModel);
                            t ? e.folderList = r(t, n) : (e.folderList = angular.copy(n), e.selected && e.selected.tb_id && e.highlightByTableId(e.folderList, e.selected.tb_id)), e.$emit("recoverFolderList", e.folderList), e.$apply()
                        }

                        function r(e, t) {
                            function a(t, a) {
                                var i = [],
                                    r = !1;
                                return t.map(function (t) {
                                    (t.name.toLowerCase().indexOf(e.toLowerCase()) > -1 || t.label && t.label.toLowerCase().indexOf(e.toLowerCase()) > -1) && (r = !0, t.searchHover = !0), a ? i.push(t) : t.searchHover && (delete t.searchHover, i.push(t))
                                }), {
                                    tbList: i,
                                    hasTb: r,
                                    hasFolder: a
                                }
                            }

                            function i(t, r, n) {
                                var n = n || !1;
                                n || t.name.toLowerCase().indexOf(e.toLowerCase()) > -1 && (n = !0);
                                var o = t.sub_folders,
                                    l = [],
                                    s = !1;
                                o && o.length > 0 && o.map(function (e) {
                                    var t = angular.copy(e);
                                    delete t.tb_list;
                                    var a = i(e, 2, n);
                                    (a.hasTb || a.hasFolder || n) && (a.hasTb && (t.open = !0), t.tb_list = a.tbList, l.push(t), s = a.hasTb || a.hasFolder)
                                });
                                var d = t.tb_list,
                                    c = a(d, n);
                                if (2 == r) return c;
                                var u = angular.copy(t);
                                return u.sub_folders = l, u.tb_list = c.tbList, (c.hasTb || s) && (u.open = !0), {
                                    arr: u,
                                    hasFolder: n || s
                                }
                            }
                            var r = [];
                            return angular.copy(t).map(function (e) {
                                var t = i(e, 1);
                                (t.arr.tb_list.length > 0 || t.hasFolder) && r.push(t.arr)
                            }), r
                        }
                        var n, o;
                        e.searchOriginList = [], e.$on("updatefolderList", function (t, a) {
                            a && (n = a === !0 ? e.folderList : a)
                        }), n = e.original_folderList ? angular.copy(e.original_folderList) : angular.copy(e.folderList), angular.element(t).on("keyup.searchFolderTable", function () {
                            clearTimeout(o), o = setTimeout(i, 100)
                        })
                    }
                }
            }]),
            function () {
                function e(e) {
                    function t(e, t, a) {}
                    return {
                        restrict: "A",
                        templateUrl: "/static/partials/directiveTemplates/tableRelationPath.html",
                        link: t
                    }
                }
                angular.module("BC.directives")
                .directive("tableRelationPath", e), 
                e.$inject = ["$rootScope"]
            }(), 
            angular.module("BC.directives")
            .directive("transformTbType", e), 
            e.$inject = ["commonService", "$rootScope", "errHint", "ngDialog", "$jsTipTranslate", "$translate"], 
            angular.module("BC.directives")
            .directive("tableFilterPrompt", ["$timeout", "$rootScope", "commonService", "errHint", "$jsTipTranslate", function (e, t, a, i, r) {
                return {
                    restrict: "A",
                    scope: {
                        togglePrompt: "=",
                        choosePrompt: "&",
                        tbId: "=",
                        fieldId: "=",
                        filterStr: "="
                    },
                    templateUrl: "/static/partials/directiveTemplates/tableFilterPrompt.html",
                    replace: !0,
                    link: function (e, t, n) {
                        var o = 0;
                        e.showFieldSearchLoading = !1, e.filterResult = [], e.promptData = {
                            showFilterPrompt: !1
                        }, e.getFieldValueList = function (t, i, r) {
                            var n = o = +new Date,
                                l = {
                                    tb_id: t,
                                    field_id: i,
                                    filter_str: r,
                                    limit: 50
                                };
                            ! function (t) {
                                e.promptData.showFilterPrompt = !0, e.showFieldSearchLoading = !0, a.tb.tableFieldFilter(l).then(function (a) {
                                    e.showFieldSearchLoading = !1, t < o || a && (e.filterResult = a.result.data)
                                })
                            }(n)
                        }, e.$watch("togglePrompt", function (t) {
                            if (!t) return e.promptData.showFilterPrompt = !1, void(e.filterResult = []);
                            e.fieldId && e.filterStr ? e.getFieldValueList(e.tbId, e.fieldId, e.filterStr) : e.fieldId ? e.filterStr || i(e.tips["wb.tableFilterValueRequired"]) : i(e.tips["wb.selectField"])
                        }), e.chooseFilterItem = function (t) {
                            e.filterStr = t, e.togglePrompt = !1
                        }, r(["wb.selectField", "wb.tableFilterValueRequired"], e)
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("searchDsTable", ["$filter", function (e) {
                return {
                    link: function (t, a, i) {
                        function r() {
                            var a = t.$eval(i.ngModel);
                            c = !1, s = "dsTbList" != t.workdListView ? "folderList" : "dsTBList", 
                            o || (o = t.dsTBList), 
                            n || (n = t.folderList), 
                            a ? (l = "dsTBList" == s ? o : n) && (d = [], u = !1, 
                                angular.forEach(l, function (t) {
                                if (u = !1, t.hasOwnProperty("tag") && null != t.tag && t.tag.toLowerCase().indexOf(a.toLowerCase()) > -1 ? (d.push(t), u = !0) : t.hasOwnProperty("ds_name") && null != t.ds_name && t.ds_name.toLowerCase().indexOf(a.toLowerCase()) > -1 && (d.push(t), u = !0), !u) {
                                    var i = e("query_tables")(t.tb_list, a);
                                    (i.length || "folder_root" == t.folder_id) && d.push(angular.extend({}, t, {
                                        tb_list: i,
                                        open: !0
                                    }))
                                }
                            }), t[s] = d) : (t.dsTBList && (t.dsTBList = o), t.folderList = n), 
                            t.$apply()
                        }
                        var n, o, l, s, d, c, u, f;
                        t.$on("updatefolderList", function (e, a) {
                            a && (n = a === !0 ? t.folderList : a)
                        }), angular.element(a).on("keyup.searchTable", function () {
                            clearTimeout(f), f = setTimeout(r, 100)
                        })
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("searchTable", ["$filter", "$timeout", function (e, t) {
                return {
                    link: function (t, a, i) {
                        function r() {
                            var a = t.$eval(i.ngModel);
                            t.original_folderList ? (o = angular.copy(n), c = !0) : (o = t.folderList, c = !1), copy_folder_list = angular.copy(n);
                            var r = [],
                                d = [],
                                u = !1,
                                f = !1;
                            a ? o && (l = [], s = {}, angular.forEach(o, function (t) {
                                u = !1, f = !1, r = e("query_tables")(t.tb_list, a), t.tb_list = r.length > 0 ? r : [], u = r.length > 0, t.sub_folders && t.sub_folders.length > 0 && (d = [], angular.forEach(t.sub_folders, function (t) {
                                    r = e("query_tables")(t.tb_list, a), t.tb_list = r.length > 0 ? r : [], t.open = r.length > 0, r.length > 0 && d.push(t)
                                }), t.sub_folders = d, f = d.length > 0), (u || f) && (t.open = !0, l.push(t))
                            }), t.folderList = l, t.$emit("recoverFolderList", t.folderList)) : (t.folderList = copy_folder_list, t.selected && t.selected.tb_id && t.highlightByTableId(t.folderList, t.selected.tb_id), t.$emit("recoverFolderList", t.folderList)), t.$apply()
                        }
                        var n, o, l, s, d, c = !0;
                        t.searchOriginList = [], t.$on("updatefolderList", function (e, a) {
                            a && (n = a === !0 ? t.folderList : a)
                        }), n = t.original_folderList ? angular.copy(t.original_folderList) : angular.copy(t.folderList), angular.element(a).on("keyup.searchTable", function () {
                            clearTimeout(d), d = setTimeout(r, 100)
                        })
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("searchTb", ["$filter", "$rootScope", function (e, t) {
                return {
                    templateUrl: "/static/partials/directiveTemplates/searchTb.html",
                    scope: {
                        list: "=",
                        mode: "=",
                        searchModeShow: "=",
                        originList: "="
                    },
                    link: function (a, i, r) {
                        function n(e) {
                            clearTimeout(l), l = setTimeout(o, e)
                        }

                        function o() {
                            function i(e) {
                                e.map(function (e) {
                                    e.tag && $.inArray(e.tag, r) == -1 && r.push(e.tag);
                                    var a = e.ds_type_name[t.language];
                                    a && $.inArray(a, r) == -1 && r.push(a)
                                })
                            }
                            a.searchList = [];
                            var r = [],
                                n = a.keyword,
                                o = [];
                            if (n) o = "nomal" == a.mode ? [n] : n.split(" "), a.list = function () {
                                function t(n, l, s) {
                                    n.sub_folders && n.sub_folders.length > 0 && r(n.sub_folders, t);
                                    var d = null;
                                    d = o[0] ? e("query_fields")(n.tb_list, o[0], a.viewSearch.searchMode) : n.tb_list, d.length > 0 && o.length > 1 && (d = e("queryByTagorDstype")(d, o[1])), i(d), n.tb_list = d, 0 != n.tb_list.length || n.sub_folders && 0 != n.sub_folders.length ? n.open = !0 : s.splice(l, 1)
                                }
                                var r = bdp.utils.descMap,
                                    n = angular.copy(a.originList);
                                return r(n, t), n
                            }();
                            else {
                                if (a.list = a.originList, 0 == a.list.length) return;
                                a.list[0].open = !0
                            }! function (e) {
                                r.length ? (1 == e.length && a.searchList.push({
                                    name: e[0],
                                    tag: ""
                                }), r.map(function (t) {
                                    e.length > 1 ? t.toLowerCase().indexOf(e[1].toLowerCase()) > -1 && a.searchList.push({
                                        name: e[0],
                                        tag: t
                                    }) : a.searchList.push({
                                        name: e[0],
                                        tag: t
                                    })
                                })) : a.searchList = []
                            }(o), a.$apply()
                        }
                        var l;
                        a.viewSearch = {
                            showlist: !1,
                            searchMode: "fuzzy"
                        }, a.searchList = [], a.keywordChange = function () {
                            a.viewSearch.showlist = !0, n(300)
                        }, a.keyDownFun = function (e) {
                            13 == e.keyCode && (a.viewSearch.showlist = !1, n(0))
                        }, a.chooseSearchType = function (e) {
                            a.keyword = e.name + " " + e.tag, a.viewSearch.showlist = !1, n(0)
                        }, a.changeSearchMode = function () {
                            a.keyword && n(0)
                        }
                    }
                }
            }]), 
            angular.module("BC.directives")
            .directive("createChartAtTb", ["multipleProService", "commonService", "$rootScope", "errHint", "ngDialog", "$location", "$rootScope", "$jsTipTranslate", function (e, t, a, i, r, n, a, o) {
                return {
                    link: function (l, s, d) {
                        function c() {
                            var e = [];
                            return angular.forEach(l.dashStandardItems, function (t, a) {
                                e.push(t.top + t.height)
                            }), {
                                top: Math.max.apply(this, e)
                            }
                        }

                        function u(e) {
                            for (var t, a, i = l.dashStandardItems || [], r = i.length, n = 0, o = 0, s = 0, d = 0; d < r; d++) {
                                var u = i[d];
                                u.row + u.sizeY > o && (u.col + u.sizeX > 6 ? (o = u.row + u.sizeY, s = 0) : (o = u.row, s = u.col + u.sizeX));
                                for (var f = 0; f < u.children.length; f++) t = u.children[f], a = parseInt(t.dom_id.substr(2)), n = a > n ? a : n
                            }
                            n++;
                            var p = {
                                sizeX: 6,
                                sizeY: 4,
                                row: o,
                                col: s,
                                children: [{
                                    dom_id: "id" + n,
                                    meta: {
                                        name: l.tips["chart.untitledChart"],
                                        ct_id: "init_ctid"
                                    }
                                }]
                            };
                            if (2 == e) {
                                var g = c();
                                p.width = 480, p.height = 324, p.left = 0, p.top = g.top + 10
                            }
                            l.dashStandardItems || (l.dashStandardItems = []), l.dashStandardItems.push(p)
                        }

                        function f(e) {
                            var t = angular.copy(e);
                            return angular.forEach(t, function (e) {
                                e.children[0].meta = {
                                    ct_id: e.children[0].meta.ct_id,
                                    dash_setting: e.children[0].meta.dash_setting,
                                    html: e.children[0].meta.html || ""
                                }
                            }), t
                        }
                        var p = a.language || "zh",
                            g = "zh" == p ? "请选择" : "Please select";
                        l.requestDone = !0, l.initData = function () {
                            l.createChartData = {
                                project_list: [],
                                projId: "",
                                dash_list: [],
                                dashId: "",
                                fixed_width: !1,
                                show_block: !0,
                                type: "normal",
                                currentProjName: "",
                                currentDashName: g || "",
                                showProjList: !1,
                                showDashList: !1
                            }
                        }, 
                        l.initData(), 
                        l.show_add_chart = function () {
                            if (!l.selected.tb_id) return void i(l.tips["wb.selectWorkSheet"]);
                            l.initData();
                            var n = {
                                categories: angular.toJson([0])
                            };
                            t.project.getTree(n).then(function (t) {
                                if (e.initDeep(t.proj, 0), 0 == t.proj.length) l.createChartData.currentProjName = g || "", l.createChartData.currentDashName = g || "";
                                else {
                                    l.createChartData.project_list = [], angular.forEach(t.proj, function (e) {
                                        0 == e.type && 1 != e.property && l.createChartData.project_list.push(e)
                                    }), l.createChartData.projId = l.createChartData.project_list[0].proj_id, l.createChartData.currentProjName = l.createChartData.project_list[0].name;
                                    var i = l.createChartData.project_list[0].subs;
                                    if (i.length > 0)
                                        for (var n = 0, o = i.length; n < o; n++)
                                            if ("dashboard" == i[n].attribute) {
                                                l.createChartData.dash_list = i, l.createChartData.dashId = l.createChartData.dash_list[n].dsh_id, l.createChartData.currentDashName = l.createChartData.dash_list[n].name, l.getDashboardInfo();
                                                break
                                            }
                                }
                                r.open({
                                    template: "/static/partials/dialogTemplates/create_chart.html",
                                    className: "ngdialog-theme-default create-chart-dialog ngDialog-width-400" + (a.permision.canUseCustomChart ? "" : " no-custom-chart"),
                                    scope: l
                                })
                            })
                        }, 
                        l.nodeCollapseHandle = function (e, t) {
                            e && e.stopPropagation(), t.nodeCollapse = !t.nodeCollapse
                        }, 
                        l.selectProjItem = function (e) {
                            l.createChartData.currentProjName = e.name, l.createChartData.projId = e.proj_id, l.createChartData.showProjList = !1;
                            var t = e.subs.filter(function (e) {
                                return "dashboard" == e.attribute
                            }) || [];
                            l.createChartData.dash_list = t, l.createChartData.currentDashName = t.length ? t[0].name : g, l.createChartData.currentProjName = e.name, l.createChartData.dashId = t.length ? t[0].dsh_id : ""
                        }, 
                        l.selectDashItem = function (e, t) {
                            l.createChartData.currentDashName = t, l.createChartData.dashId = e, l.createChartData.showDashList = !1, l.getDashboardInfo()
                        }, 
                        l.createNewProj = function () {
                            l.createChartData.showProjList = !1, l.createChartData.showDashList = !1, l.newProjDialog = r.open({
                                template: "/static/partials/directiveTemplates/selectProjDashInfo.html",
                                className: "ngdialog-theme-default ngDialog-width-360",
                                scope: l,
                                data: {
                                    type: "proj",
                                    name: "",
                                    save: l.saveNewProj
                                }
                            })
                        }, 
                        l.createNewDash = function () {
                            if (!l.createChartData.projId) return void i(l.tips["dash.pleaseSelectProj"]);
                            l.createChartData.showProjList = !1, l.createChartData.showDashList = !1, l.newDashDialog = r.open({
                                template: "/static/partials/directiveTemplates/selectProjDashInfo.html",
                                className: "ngdialog-theme-default ngDialog-width-360",
                                scope: l,
                                data: {
                                    type: "dash",
                                    name: "",
                                    save: l.saveNewDash
                                }
                            })
                        }, 
                        l.saveNewProj = function (e) {
                            if (l.requestDone) {
                                if (void 0 == e || "" === e) return void i(l.tips["dash.projectNameRequired"]);
                                for (var a = l.createChartData.project_list || [], r = 0, n = a.length; r < n; r++)
                                    if (a[r].name == e) return void i(l.tips["dash.duplicateProjectName"]);
                                l.requestDone = !1, t.project.create({
                                    name: e
                                }).then(function (t) {
                                    if (l.requestDone = !0, "0" == t.status) {
                                        var a = {
                                            proj_id: t.result.proj_id,
                                            name: e,
                                            dsh_list: [],
                                            type: 0,
                                            property: 0
                                        };
                                        l.createChartData.project_list.push(a), 
                                        l.createChartData.currentProjName = e, 
                                        l.createChartData.projId = t.result.proj_id, 
                                        l.createChartData.dash_list = [], 
                                        l.createChartData.dashId = "", 
                                        l.createChartData.currentDashName = g, 
                                        l.newProjDialog.close()
                                    } else i(Number(t.status))
                                })
                            }
                        }, 
                        l.saveNewDash = function (e) {
                            if (l.requestDone) {
                                if ("" === e) return void i(l.tips["dash.dashNameRequired"]);
                                if (e.length > 100) return void i(l.tips["dash.dashNameLessThan100"]);
                                for (var a = null, r = l.createChartData.project_list, n = 0; n < r.length; n++)
                                    if (r[n].proj_id == l.createChartData.projId) {
                                        a = r[n];
                                        break
                                    }
                                a || (a = l.createChartData.project_list[0]);
                                for (var o = a.subs, s = 0, d = o.length; s < d; s++)
                                    if (o[s].name == e) return void i(l.tips["dash.duplicateDashName"]);
                                var c = {
                                    name: e,
                                    proj_id: l.createChartData.projId
                                };
                                l.requestDone = !1, t.dashboard.create(c).then(function (t) {
                                    l.requestDone = !0, "0" == t.status ? (o.push({
                                        dsh_id: t.result.dsh_id,
                                        name: e,
                                        label: "",
                                        comment: "",
                                        outer_share_id: "",
                                        property: 0
                                    }), 
                                    l.createChartData.dash_list = o, 
                                    l.createChartData.dashId = t.result.dsh_id, 
                                    l.createChartData.currentDashName = e, 
                                    l.newDashDialog.close()) : i(Number(t.status))
                                })
                            }
                        }, 
                        l.confirmCreate = function () {
                            if (!l.selected.tb_id) return void i(l.tips["wb.selectWorkSheet"]);
                            if (!l.gettingDashInfo) {
                                if (!l.createChartData.dashId) return void i(l.tips["dash.pleaseSelectDash"]);
                                var e = {};
                                e.dsh_id = l.createChartData.dashId, t.dashboard.getInfo(e).then(function (e) {
                                    var o = e.result.meta;
                                    l.dashStandardItems = o.charts || [], u(o.layout_style), t.chart.create({
                                        dsh_id: l.createChartData.dashId,
                                        tb_id: "normal" == l.createChartData.type ? l.selected.tb_id : [l.selected.tb_id],
                                        type: l.createChartData.type,
                                        dsh_meta: {
                                            charts: f(l.dashStandardItems)
                                        }
                                    }).success(function (t) {
                                        if ("0" == t.status) {
                                            $.cookie("grid_index", "");
                                            var o = t.result.ct_id;
                                            r.closeAll();
                                            var s = n.path();
                                            s = "custom" == l.createChartData.type ? s.replace("data_source", "custom_chart_edit") : "gis" == l.createChartData.type ? a.wsId ? s.replace("data_source", "gis_edit_ws") : s.replace("data_source", "gis_edit") : a.wsId ? s.replace("data_source", "chart_edit_ws") : s.replace("data_source", "chart_edit"), s = s + "/" + l.createChartData.projId + "/" + l.createChartData.dashId + "/" + o, n.path(s), a.global.rule_id = "", a.creatingChart = !0
                                        } else i(Number(e.status))
                                    })
                                })
                            }
                        }, 
                        l.getDashboardInfo = function () {
                            l.gettingDashInfo = !0;
                            var e = {};
                            e.dsh_id = l.createChartData.dashId, t.dashboard.getInfo(e).then(function (e) {
                                0 == e.status && (l.createChartData.show_block = e.result.meta.show_block, l.createChartData.fixed_width = e.result.meta.fixed_width, l.$$phase || l.$digest(), l.gettingDashInfo = !1)
                            })
                        }, 
                        o([
                            "wb.selectWorkSheet", "chart.untitledChart", "dash.projectNameRequired", "dash.duplicateProjectName", 
                            "pleaseSelect", "dash.dashNameRequired", "dash.dashNameLessThan100", "dash.duplicateDashName", 
                            "dash.pleaseSelectProj", "dash.pleaseSelectDash"], l)
                    }
                }
            }]),
            function () {
                angular.module("BC.directives")
                .directive("selectSearchList", ["$rootScope", "$timeout", "$jsTipTranslate", "$translate", function (e, t, a, i) {
                    return {
                        restrict: "A",
                        templateUrl: "/static/partials/directiveTemplates/selectSearchList.html",
                        replace: !0,
                        scope: {
                            selectData: "=",
                            searchList: "=",
                            valChange: "&"
                        },
                        link: function (e, i, r) {
                            function n() {
                                switch (e.viewData.originalList = angular.copy(e.searchList), e.viewData.searchList = angular.copy(e.searchList), e.viewData.modeType) {
                                    case "tableFilter":
                                        l = "fid", s = "name";
                                        break;
                                    case "joinSelect":
                                        l = "fid", s = "original_nick_name";
                                        break;
                                    case "mlModelSelector":
                                        l = "ml_id", s = "name";
                                        break;
                                    case "queryAccount":
                                        l = "userid", s = "name";
                                        break;
                                    default:
                                        l = "", s = ""
                                }
                                e.viewData.displayKey = s
                            }

                            function o(e, t) {
                                return e.toLowerCase().indexOf(t.toLowerCase()) >= 0
                            }
                            var l = "",
                                s = "";
                            ! function () {
                                e.viewData = {
                                    defaultPlaceHolder: "",
                                    selectedText: "",
                                    selectedVal: "",
                                    searchList: [],
                                    originalList: [],
                                    searchQuery: "",
                                    showList: !1,
                                    displayKey: "",
                                    modeType: r.modeType,
                                    hitQueryNum: 0
                                }
                            }(), e.$watch(function () {
                                return e.searchList
                            }, function (e) {
                                n()
                            }), e.$watch(function () {
                                return e.selectData
                            }, function (t) {
                                e.viewData.selectedVal = "", e.viewData.selectedText = "";
                                for (var a = e.viewData.searchList || [], i = 0, r = a.length; i < r; i++) switch (e.viewData.modeType) {
                                    case "tableFilter":
                                        e.selectData.field && e.selectData.field.fid == a[i][l] && (e.viewData.selectedVal = a[i][l], e.viewData.selectedText = a[i][s]);
                                        break;
                                    case "joinSelect":
                                    case "queryAccount":
                                        e.selectData == a[i][l] && (e.viewData.selectedVal = a[i][l], e.viewData.selectedText = a[i][s]);
                                        break;
                                    case "mlModelSelector":
                                        e.selectData == a[i][l] && (e.viewData.selectedVal = a[i][l], e.viewData.selectedText = a[i][s], e.viewData.iconClass = a[i].iconClass, e.viewData.iconId = a[i].iconId)
                                }
                            }), e.toggleList = function (t) {
                                var a = angular.element(t.target);
                                a = a.hasClass("bdp-icon") ? a.parents(".select-search-value:first") : a;
                                var i = a.parents(".select-search-value:first");
                                i = 0 == i.length ? a : i;
                                var r = a.offset(),
                                    n = i.next(".search-list-box");
                                e.viewData.showList = !e.viewData.showList, e.viewData.searchQuery = "", angular.forEach(e.viewData.searchList, function (e) {
                                    e.selectHit = !0
                                }), e.viewData.hitQueryNum = e.viewData.searchList.length, e.viewData.showList ? n.css({
                                    position: "fixed",
                                    top: r.top + a.closest(".select-search-list-wrap").height(),
                                    left: r.left,
                                    width: i.width()
                                }) : n.css({
                                    top: "-9999px",
                                    left: "-9999px"
                                })
                            }, e.doQuery = function () {
                                var t = 0;
                                angular.forEach(e.viewData.searchList, function (a) {
                                    e.viewData.searchQuery ? (a.selectHit = o(a[s], e.viewData.searchQuery), a.selectHit && t++) : (a.selectHit = !0, t++)
                                }), e.viewData.hitQueryNum = t
                            }, e.formatSelectDataByType = function (t) {
                                switch (e.viewData.modeType) {
                                    case "tableFilter":
                                        e.selectData.field ? e.selectData.field.fid = t : e.selectData.field = {
                                            fid: t
                                        }, s = "name";
                                        break;
                                    case "joinSelect":
                                    case "mlModelSelector":
                                    case "queryAccount":
                                        e.selectData = t
                                }
                            }, e.selectItem = function (a) {
                                e.viewData.selectedVal = a[l], e.viewData.selectedText = a[s], e.viewData.iconClass = a.iconClass, e.viewData.iconId = a.iconId, e.viewData.showList = !1, e.formatSelectDataByType(e.viewData.selectedVal), e.valChange && t(function () {
                                    e.valChange({
                                        field: e.selectData
                                    })
                                }, 0)
                            }, a(["wb.selectField"], e)
                        }
                    }
                }])
            }(),
            function () {
                function e(e, t, a) {
                    return {
                        restrict: "EA",
                        templateUrl: "/static/js/worktable/directivesTemplates/setVisiblePreviewField.html",
                        link: function (t, i, r) {
                            function n() {
                                function e(e) {
                                    i = displayNum = 0, angular.forEach(e.list, function (e) {
                                        e.visibleHitQuery = e.name.toLocaleLowerCase().indexOf(a.toLocaleLowerCase()) >= 0 || !a, displayNum = e.visibleHitQuery ? ++displayNum : displayNum, i = e.selected && e.visibleHitQuery ? ++i : i
                                    }), e.displayNum = displayNum, e.checkNum = i, e.checkAll = displayNum == i
                                }
                                var a = t.visiblePreviewFieldData.fieldQueryText,
                                    i = displayNum = 0;
                                for (var r in t.visiblePreviewFieldData.baseTbField) e(t.visiblePreviewFieldData.baseTbField[r]);
                                for (var n in t.visiblePreviewFieldData.calcTbField) e(t.visiblePreviewFieldData.calcTbField[n]);
                                "base" == t.visiblePreviewFieldData.currentType ? t.visiblePreviewFieldData.currentTbField = t.visiblePreviewFieldData.baseTbField : t.visiblePreviewFieldData.currentTbField = t.visiblePreviewFieldData.calcTbField, t.$broadcast("updateConditionHeight"), t.$apply()
                            }
                            t.changeTab = function (e) {
                                t.visiblePreviewFieldData.currentType = e, t.visiblePreviewFieldData.currentTbField = "base" == e ? t.visiblePreviewFieldData.baseTbField : t.visiblePreviewFieldData.calcTbField, t.$broadcast("updateConditionHeight")
                            }, t.changeCheckedAll = function (e) {
                                angular.forEach(e.list, function (t) {
                                    t.visibleHitQuery && (t.selected = e.checkAll)
                                })
                            }, t.changeChecked = function (e) {
                                function a(e) {
                                    var t = displayNum = 0;
                                    angular.forEach(e.list, function (e) {
                                        t = e.selected && e.visibleHitQuery ? ++t : t, displayNum = e.visibleHitQuery ? ++displayNum : displayNum
                                    }), e.displayNum = displayNum, e.checkNum = t, e.checkAll = t == displayNum
                                }
                                switch (e.data_type) {
                                    case "string":
                                        a(t.visiblePreviewFieldData.currentTbField.strField);
                                        break;
                                    case "number":
                                        a(t.visiblePreviewFieldData.currentTbField.numField);
                                        break;
                                    case "date":
                                        a(t.visiblePreviewFieldData.currentTbField.dateField)
                                }
                            };
                            var o = null;
                            t.queryInput = function () {
                                clearTimeout(o), o = setTimeout(n, 100)
                            }, t.modifyVisibleField = function () {
                                function i(e) {
                                    angular.forEach(e.list, function (e) {
                                        e.selected && r.push(e.field_id)
                                    })
                                }
                                var r = [];
                                for (var n in t.visiblePreviewFieldData.baseTbField) i(t.visiblePreviewFieldData.baseTbField[n]);
                                for (var o in t.visiblePreviewFieldData.calcTbField) i(t.visiblePreviewFieldData.calcTbField[o]);
                                e.tb.modifyFieldStatus(t.selected.tb_id, JSON.stringify(r)).then(function (e) {
                                    0 == Number(e.status) ? t.show_preview_data(t.lastPreviewFilterData) : a(Number(e.status))
                                })
                            }
                        }
                    }
                }
                angular.module("BC.directives")
                .directive("setVisiblePreviewField", e), 
                e.$inject = ["commonService", "$timeout", "errHint"]
            }(),
            function () {
                function e(e) {
                    return {
                        restrict: "EA",
                        require: "?folderList",
                        scope: {
                            folderList: "=",
                            splitData: "="
                        },
                        link: function (t, a, i, r) {
                            function n() {
                                l = angular.element(".J-table-list > ul"), l.on("scroll.renderTable", bdp.utils.throttle(function (a) {
                                    if (a && a.preventDefault && ("none" != angular.element("#J_load_more_top").css("display") || "none" != angular.element("#J_load_more_bottom").css("display"))) return a.preventDefault(), s = l.scrollTop(), !1;
                                    if (!t.splitData || $.isEmptyObject(t.splitData)) return s = l.scrollTop(), !1;
                                    var i = l.scrollTop(),
                                        r = l.height() + 36,
                                        n = l[0].scrollHeight,
                                        o = i - s,
                                        d = t.splitData.pageData,
                                        c = t.splitData.cur,
                                        u = !0,
                                        f = !0,
                                        p = angular.element("#J_load_more_top"),
                                        g = angular.element("#J_load_more_bottom");
                                    i > 0 && o <= 0 ? angular.element(".J-list-go-top").css("display", "block") : angular.element(".J-list-go-top").css("display", "none"), "root" == c.type && (d.top.root == -1 && 0 == d.top.folder && (u = !1), 0 == d.top.root && d.maxFolderPage < 0 && (u = !1)), "folder" == c.type && d.top.folder <= 0 && (u = !1), o < 0 && i < 4 && u && (p.show(), e(function () {
                                        var a = bdp.bdpTables.getCurTopDataId(t.folderList);
                                        if (a) {
                                            var i = bdp.bdpTables.LoadMoreTopList(t.splitData, t.folderList);
                                            t.folderList = i.folderList, e(function () {
                                                var e = angular.element(".J-table-list > ul"),
                                                    t = e[0].clientHeight,
                                                    i = e.find('[data-uniq-id="' + a + '"]')[0];
                                                i && i.offsetTop > e[0].scrollTop + t && (e[0].scrollTop = i.offsetTop)
                                            }, 100)
                                        }
                                    }, 50)), d.hasRootTb && d.bottom.root == d.maxTbPage && (f = !1), !d.hasRootTb && d.bottom.folder >= 0 && d.bottom.folder == d.maxFolderPage && (f = !1), o > 0 && n - i - r < 4 && f && (g.show(), e(function () {
                                        var e = bdp.bdpTables.LoadMoreBottomList(t.splitData, t.folderList);
                                        t.folderList = e.folderList
                                    }, 50)), s = i
                                }, 50))
                            }

                            function o() {
                                t.$emit("initTableSplit", {
                                    folderList: [],
                                    noDefault: !1,
                                    pos: "top"
                                })
                            }
                            var l = angular.element(".J-table-list > ul"),
                                s = l.scrollTop(),
                                d = angular.element(".J-list-go-top"),
                                c = setTimeout(function () {
                                    angular.element("#J_load_more_top").hide(), angular.element("#J_load_more_bottom").hide(), n(), d.on("click.listGoTop", function () {
                                        o()
                                    })
                                }, 100);
                            t.$on("resetBeforeScrollTop", function () {
                                s = 0
                            }), t.$on("$destroy", function () {
                                c = null, l.off("scroll.renderTable"), d.off("click.listGoTop")
                            })
                        }
                    }
                }
                angular.module("BC.directives")
                .directive("tableListScrollFunc", e), e.$inject = ["$timeout"]
            }()
    }(),
    function () {
        function e(e, t, a, i, r, n, o, l, s) {
            function d(t) {
                var i = [];
                angular.forEach(t.sql, function (e, t) {
                    e && i.push({
                        tb_id: t,
                        sql: e
                    })
                }), t.sql = i, delete t.condition, 0 == i.length && (t = {}), e.editTbModel.filter = t, e.isSaving = !1, a.closeAll()
            }

            function c(a) {
                var i = e.editTbModel.tb_id;
                e.filter.sql[i] ? t.tb.sqlTrans({
                    tb_id: i,
                    sql: e.filter.sql[i]
                }).then(function (e) {
                    0 == e.status && d(a)
                }) : d(a)
            }

            function u(t) {
                for (var a = 0, r = e.filterGroups.length; a < r; a++)
                    for (var n = 0, o = e.filterGroups[a].filters.length; n < o; n++) {
                        var l = e.filterGroups[a].filters[n];
                        if (!l.value && 8 != l.operator && 9 != l.operator && 10 != l.operator) return i("筛选值必须填写", {
                            dialog: !0
                        }), !1
                    }
                t.condition.filters = e.filterGroups, delete t.sql, 0 == e.filterGroups.length && (t = {})
            }

            function f() {
                var t = angular.copy(e.filter);
                "sql" == t.where_type ? c(t) : (u(t), e.editTbModel.filter = t, e.isSaving = !1, a.closeAll())
            }

            function p() {
                var t = {
                        need: !1,
                        data: {}
                    },
                    a = e.getCancelShareFields();
                return a.length > 0 && (t.data = {
                    tb_id: e.editTbModel.tb_id,
                    cancel_fields: angular.toJson(a)
                }, "user" == e.tbBelong.type ? t.data.sub_id = e.tbBelong.id : t.data.group_id = e.tbBelong.id, t.need = !0), t
            }

            function g(t) {
                var i = [];
                t && t.map(function (e) {
                    i.push(e.title)
                }), a.openConfirm({
                    template: "/static/partials/dialogTemplates/confirm-dialog.html",
                    className: "ngdialog-theme-default ngDialog-width-300",
                    scope: e,
                    data: {
                        message: e.tips["account.fieldsUsing"] + i.join("，")
                    }
                })
            }

            function h() {
                var t = {
                    need: !0,
                    data: {
                        work_tables: []
                    }
                };
                "user" == e.tbBelong.type && (t.data.to_user = e.tbBelong.id);
                var a = angular.copy(e.filter);
                if ("sql" == a.where_type) {
                    var r = [];
                    angular.forEach(a.sql, function (e, t) {
                        e && r.push({
                            tb_id: t,
                            sql: e
                        })
                    }), a.sql = r, delete a.condition, a = 0 == r.length ? {} : a
                } else {
                    for (var n = 0, o = e.filterGroups.length; n < o; n++)
                        for (var l = 0, s = e.filterGroups[n].filters.length; l < s; l++) {
                            var d = e.filterGroups[n].filters[l];
                            if (!d.value && 8 != d.operator && 9 != d.operator && 10 != d.operator) return i("筛选值必须填写"), !1
                        }
                    a.condition.filters = e.filterGroups, delete a.sql, a = 0 == e.filterGroups.length ? {} : a
                }
                return t.data.work_tables.push({
                    tb_id: e.editTbModel.tb_id,
                    filters: a
                }), t.data.work_tables = angular.toJson(t.data.work_tables), t
            }

            function m() {
                var a = h();
                if (!a) return void(e.isSaving = !1);
                a.need ? (e.isSaving = !0, t.account.tbShareFilterCheck(a.data).then(function (t) {
                    0 == t.status ? f() : e.isSaving = !1
                })) : f()
            }
            e.editTbModel = e.ngDialogData.editTbModel, 
            e.tbBelong = {
                id: e.ngDialogData.belongId,
                type: e.ngDialogData.belongType
            }, 
            e.colFilterFields = e.editTbModel.col_filter || [], 
            e.colFilterBeforeCheck = angular.copy(e.colFilterFields), 
            e.operatorList = r, 
            e.conditionTypes = n, 
            e.pageTips = {
                addCondition: s.instant("where.addConditionTip")
            }, 
            e.newFilter = {
                operator: 0,
                value: "",
                start_date: null,
                end_date: null
            };
            var _ = {
                where_type: "condition",
                where_linker: "and",
                sql: {},
                condition_type: 0,
                condition: {
                    filters: []
                },
                currentFilterIndex: 0,
                rangeType: e.editTbModel.is_col_filter ? "custom" : "all"
            };
            if (e.filterGroups = [], e.originCheckFields = e.editTbModel.col_filter ? angular.copy(e.editTbModel.col_filter) : [], e.editTbModel.filter.where_type) {
                var b = angular.copy(e.editTbModel.filter);
                if (angular.extend(_, b), e.filter = _, e.filter.currentFilterIndex = 0, "condition" == b.where_type) e.filterGroups = b.condition.filters;
                else {
                    var v = {};
                    v[b.sql[0].tb_id] = b.sql[0].sql, e.filter.sql = v
                }
            } 
            else e.filter = angular.copy(_);
            e.addFilter = function (t) {
                    if (!t.field) return i("请选择字段", {
                        dialog: !0
                    }), !1;
                    if (!t.value && 8 != t.operator && 9 != t.operator && 10 != t.operator) return i("请填写值", {
                        dialog: !0
                    }), !1;
                    if (10 == t.operator && !t.start_date && !t.end_date) return void i("请填写值", {
                        dialog: !0
                    });
                    for (var a = {
                            fid: t.field.fid,
                            field_name: t.field.nick_name,
                            operator: t.operator,
                            value: t.value,
                            data_type: t.field.data_type,
                            start_date: t.start_date,
                            end_date: t.end_date
                        }, r = !1, n = 0, o = e.filterGroups.length; n < o; n++) {
                        var l = e.filterGroups[n];
                        a.fid == function (e) {
                            return e.filters[0] ? e.filters[0].fid : ""
                        }(l) && (l.filters.push(a), r = !0)
                    }
                    r || e.filterGroups.push({
                        condition_type: 0,
                        filters: [a]
                    }), e.newFilter = {
                        operator: 0,
                        value: ""
                    }
                }, e.filterchange = function (e) {
                    8 != e.operator && 9 != e.operator && 10 != e.operator || (e.value = ""), 10 != e.operator && (e.start_date = null, e.end_date = null)
                }, e.fieldChange = function (e) {
                    e.field && "date" == e.field.data_type ? (e.operator = 10, e.value = "", e.start_date = null, e.end_date = null) : (e.operator = 0, e.value = "")
                }, e.delFilter = function (t, a) {
                    if (t.filters.splice(a, 1), 0 == t.filters.length) {
                        var i = e.filterGroups.indexOf(t);
                        i > -1 && e.filterGroups.splice(i, 1)
                    }
                }, e.getCancelShareFields = function () {
                    var t = [];
                    return e.originCheckFields.map(function (a) {
                        e.editTbModel.col_filter.indexOf(a) < 0 && t.push(a)
                    }), t
                }, e.changeFilterIndex = function (t) {
                    e.filter.currentFilterIndex = t, 1 == t ? angular.element(".J-worktable-filter").find(".ngdialog-content").width(704) : angular.element(".J-worktable-filter").find(".ngdialog-content").width(420)
                }, e.changeRangeType = function () {
                    "all" == e.filter.rangeType && (e.fieldList.map(function (e) {
                        e.checked = !0
                    }), e.checkAllFields = !0, e.checkField = {})
                }, e.toggleCheck = function () {
                    e.checkAllFields ? e.fieldList.forEach(function (e) {
                        e.checked = !1
                    }) : e.fieldList.forEach(function (e) {
                        e.checked = !0
                    })
                }, e.refreshCheckStatus = function (t) {
                    var a = !0;
                    e.fieldList.forEach(function (e) {
                        (!e.checked && e.fid != t || e.checked && e.fid == t) && (a = !1)
                    }), e.checkAllFields = a
                }, e.cancel = function () {
                    a.closeAll()
                }, e.save = function () {
                    if (e.filterInfoBeforeCheck = angular.copy(e.filter), e.editTbModel.col_filter = [], e.isSaving = !0, "custom" == e.filter.rangeType) {
                        if (e.editTbModel.is_col_filter = 1, e.fieldList.forEach(function (t) {
                                t.checked === !0 && e.editTbModel.col_filter.push(t.fid)
                            }), 0 == e.editTbModel.col_filter.length) return i("至少选择一个字段"), void(e.isSaving = !1);
                        var a = p();
                        a.need ? t.account.tbShareFieldCheck(a.data).then(function (t) {
                            0 == t.status && (t.result && 0 == t.result.can_del ? (e.isSaving = !1, e.filter = e.filterInfoBeforeCheck, e.editTbModel.col_filter = e.colFilterBeforeCheck, g(t.result.fields)) : m())
                        }) : m()
                    } else e.editTbModel.is_col_filter = 0, m()
                },
                function () {
                    e.getFieldListLoading = !0, t.db.getField(e.editTbModel.tb_id).then(function (t) {
                        e.getFieldListLoading = !1, t && (angular.forEach(t.columns, function (e) {
                            e.title = e.nick_name
                        }), e.fieldList = t.columns, e.colFilterFields.length > 0 ? 0 === e.editTbModel.is_col_filter ? e.fieldList.forEach(function (e) {
                            e.checked = !0
                        }) : e.colFilterFields.forEach(function (t) {
                            e.fieldList.forEach(function (e) {
                                e.fid == t && (e.checked = !0)
                            })
                        }) : e.fieldList.forEach(function (e) {
                            e.checked = !0
                        }), e.checkAllFields = !0, e.fieldList.forEach(function (t) {
                            t.checked || (e.checkAllFields = !1)
                        }), e.tbList = [{
                            name: e.editTbModel.name,
                            tb_id: e.editTbModel.tb_id,
                            fields: bdp.utils.addSpecParamsToFields(e.fieldList)
                        }], o(function () {
                            e.$broadcast("initSql", e.editTbModel.tb_id)
                        }, 10))
                    })
                }(), l(["account.fieldsUsing", "where.addConditionTip", "where.filterErrorTip"], e)
        }
        angular.module("BC.controllers.dataSource")
        .controller("WorktableFilterCtrl", e), 
        e.$inject = ["$scope", "commonService", "ngDialog", "errHint", "filterOperatorMapWithTypeSpecial", "conditionType", "$timeout", "$jsTipTranslate", "$translate"]
    }(), 
    $(document).ready(function () {
        for (var e = "", t = document.cookie.split(";"), a = 0, i = t.length; a < i; a++) {
            var r = t[a].split("=");
            if (/domain/.test(r[0])) {
                e = r[1];
                break
            }
        }
        if (e && "personal" == e) {
            $("body").append('<link rel="stylesheet" type="text/css" href="https://s1.bdp.cn/static/js/personal/meiqia/meiqiaInit_bf61319.css">'), BDPLogger.log("feStatistics", {
                    category: "user_interact",
                    action: "meiqia",
                    opt_label: "init",
                    opt_value: 1
                }),
                function (e, t, a, i, r, n, o) {
                    e[r] = e[r] || function () {
                        (e[r].a = e[r].a || []).push(arguments)
                    }, n = t.createElement(a), o = t.getElementsByTagName(a)[0], n.async = !0, n.charset = "UTF-8", n.src = "//static.meiqia.com/dist/meiqia.js?v=" + (new Date).getUTCDate(), o.parentNode.insertBefore(n, o)
                }(window, document, "script", 0, "_MEIQIA"), _MEIQIA("entId", 26073), _MEIQIA("allSet", function () {
                    BDPLogger.log("feStatistics", {
                        category: "user_interact",
                        action: "meiqia",
                        opt_label: "init_success",
                        opt_value: 1
                    })
                })
        }
    }),
    function () {
        angular.module("BC.directives")
        .directive("wordcountResultFilter", ["ngDialog", "errHint", "$translate", function (e, t, a) {
            return {
                scope: {
                    oriWordCount: "=wordCount",
                    allWordCount: "=allWord",
                    reflashChart: "&reflashMethod"
                },
                restrict: "A",
                link: function (t, a, i, r) {
                    function n() {
                        t.wordCount.rangeType = t.oriWordCount.word_result_filter.range_type, t.wordCount.list = [];
                        var e = {},
                            a = t.oriWordCount.word_result_filter.range_list,
                            i = t.allWordCount.x[0].all_data;
                        t.wordCount.selectLen = a.length, angular.forEach(a, function (t, a) {
                            e[t] = !0
                        }), angular.forEach(i, function (a, i) {
                            t.wordCount.list.push({
                                name: a,
                                select: !!e[a]
                            })
                        })
                    }
                    a.on("click.wordcountResultFilter", function () {
                        n(), e.open({
                            template: "/static/partials/dialogTemplates/word-count-dialog.html",
                            className: "ngdialog-theme-default str-filter-model global-str",
                            scope: t
                        })
                    })
                },
                controller: ["$scope", function (e) {
                    function i(t) {
                        for (var a = e.wordCount.list, i = a.length - 1; i >= 0; i--) {
                            var r = a[i];
                            if (r.select != t && !r.hide_by_query) {
                                if (t && l()) return !1;
                                r.select = t, e.wordCount.selectLen = t ? e.wordCount.selectLen + 1 : e.wordCount.selectLen - 1
                            }
                        }
                    }

                    function r(t, a) {
                        if (a && l()) return !1;
                        t.select = a, e.wordCount.selectLen = a ? e.wordCount.selectLen + 1 : e.wordCount.selectLen - 1
                    }

                    function n() {
                        var t = o();
                        e.oriWordCount.word_result_filter = t, e.reflashChart({
                            not_need_redraw: !1,
                            only_refresh_data: !1
                        }, 0)
                    }

                    function o() {
                        var t = {
                            range_type: e.wordCount.rangeType,
                            range_list: []
                        };
                        return angular.forEach(e.wordCount.list, function (e, a) {
                            e.select && t.range_list.push(e.name)
                        }), t
                    }

                    function l() {
                        return e.wordCount.selectLen > 300 && (t(a.instant("error.tooManyFilterField")), !0)
                    }
                    e.wordCount = {
                        rangeType: void 0,
                        list: void 0,
                        selectLen: 0
                    }, e.changeAll = i, e.changeItem = r, e.complateEdit = n
                }]
            }
        }])
    }(), 
    angular.module("BC.services")
    .directive("advanceSort", ["ngDialog", "setAdvanceAggregatorName", "$jsTipTranslate", "$timeout", function (e, t, a, i) {
        return {
            scope: {
                chartOptions: "=",
                chartMeta: "=",
                drillLevel: "=",
                bdpChartObj: "=",
                chartMode: "@",
                saveChartFun: "&"
            },
            restrict: "EA",
            templateUrl: "/static/js/advance-sort/advance-sort.html",
            transclude: !0,
            link: function (r, n, o, l) {
                function s(e) {
                    var t = [];
                    return e.map(function (e) {
                        if ("y" === e.axis) {
                            var a = angular.copy(e);
                            a.sort_item_type = 1, t.push(a)
                        }
                    }), t
                }

                function d(e, t) {
                    return 0 == e ? "date" === t ? r.tips.date : r.tips.letter : 2 == e ? r.tips.custom : 3 == e ? r.tips.percentage : void 0
                }
                r.setAdvanceAggregatorName = t;
                var c = {
                    show: function (t, a, i) {
                        var r = t.tips.rowSummary,
                            n = "zh" == bdpChart.language ? "行总计" : "Row Total",
                            o = t.tips["chart.totalOfMeasures"],
                            l = "edit" == i.chartMode,
                            i = i,
                            s = [],
                            d = i.x,
                            u = i.y,
                            f = i.compare_axis,
                            p = i.y_optional || [],
                            g = i.chart_type;
                        if (s = s.concat(c.preHandleData(d, "x", t)), s = s.concat(c.preHandleData(f, "compare_axis", t)), s = s.concat(c.preHandleData(u, "y", t)), s = s.concat(c.preHandleData(p, "y_optional", t)), !l) {
                            var h = [];
                            if (u.forEach(function (e) {
                                    if (e.row_setting && !$.isEmptyObject(e.row_setting)) {
                                        var t = angular.copy(e.row_setting);
                                        t.name += "(" + n + ")", h.push(t)
                                    }
                                }), s = s.concat(c.preHandleData(h, "y", t)), i.tb_statistic && angular.isObject(i.tb_statistic.row_setting) && i.tb_statistic.row) {
                                var m = i.tb_statistic.row_setting;
                                m.name = m.nick_name || r, m.axis = "y", m.type = "asc", s.push(m)
                            }
                        }["C200", "C250", "C310"].indexOf(g) < 0 && i.x.length && "date" !== i.x[0].data_type && i.y.length >= 2 && s.push({
                            name: o,
                            data_type: "number",
                            axis: "y",
                            type: "asc",
                            fid: "sum",
                            uniq_id: "uniqIdForSum"
                        }), c.initScopeFuns(t, s, a, i, l), this.dia = e.open({
                            template: "/static/js/advance-sort/advance-sort-config.html",
                            className: "ngdialog-theme-default table-adv-wrap",
                            scope: t
                        })
                    },
                    initScopeFuns: function (t, a, r, n, o) {
                        var l = this,
                            s = t.bdpChartObj,
                            u = n.advanced_sort = n.advanced_sort || [];
                        c.initData(t, u, a, n, o), t.addAdvSortField = function (e) {
                            var a = angular.copy(t.fieldListInfo.splice(e, 1)[0]);
                            t.sortRuleInfo.push(a)
                        }, t.addAllAdvSortFields = function () {
                            t.fieldListInfo = [], a.forEach(function (e) {
                                var a = !1;
                                t.sortRuleInfo.forEach(function (t) {
                                    t.uniq_id === e.uniq_id && (a = !0)
                                }), a || t.sortRuleInfo.push(angular.copy(e))
                            })
                        }, t.clearAllRuleFields = function () {
                            t.fieldListInfo = angular.copy(a), t.sortRuleInfo = []
                        }, t.deleteRuleField = function (e) {
                            var a = t.sortRuleInfo.splice(e, 1);
                            t.fieldListInfo.push(a[0])
                        }, t.tableAdvSortOk = function () {
                            o ? (n.advanced_sort = angular.copy(t.sortRuleInfo), n.is_advanced_sort = 0 == n.advanced_sort.length ? 0 : 1, r({
                                closeDialog: !0,
                                is_advanced_sort: n.advanced_sort.length > 0 ? 1 : 0
                            })) : (t.chartOptions.optional.advanced_sort = angular.toJson(t.sortRuleInfo), t.chartOptions.optional.is_advanced_sort = t.sortRuleInfo.length > 0 ? 1 : 0, l.dia.close())
                        }, t.cancelsetAdvSort = function () {
                            t.clearAllRuleFields(), l.dia.close()
                        }, t.sortRuleFields = {
                            items: ".J-sortable-adv-sort",
                            start: function () {},
                            update: function (e, t) {},
                            stop: function (e, a) {
                                var i = a.item.sortable.index,
                                    r = a.item.sortable.dropindex,
                                    n = t.sortRuleInfo[r],
                                    o = t.sortRuleInfo[i];
                                t.sortRuleInfo[i] = o, t.sortRuleInfo[r] = n
                            }
                        }, t.showDropdown = function (e, a) {
                            a.showDropdown = !a.showDropdown;
                            var i = e.currentTarget.getBoundingClientRect(),
                                r = i.bottom,
                                n = i.left;
                            t.sortItemDropdownStyle = {
                                top: r,
                                left: n
                            }
                        }, t.changeSortItem = function (e, t, a) {
                            var i = e.sort_items;
                            i.sort_item_type = t, 0 == t || 3 == t ? (e.type = "asc", i.selectedName = d(t, e.data_type), delete i.filter_sort_list, delete i.aggregator_sort) : 1 == t ? (e.type = "asc", e.parent_uniq_id = a.parent_uniq_id, i.selectedName = a.name, i.aggregator_sort = {
                                uniq_id: a.uniq_id,
                                parent_uniq_id: a.parent_uniq_id
                            }, delete i.filter_sort_list) : 2 == t && (e.type = "custom", i.selectedName = d(t), i.filter_sort_list = [], delete i.aggregator_sort)
                        }, t.showEnumOrderInAdv = function (a) {
                            var i, r, o = t.$parent,
                                l = o.view;
                            "chart_edit" == l ? (i = o.tb_id, r = o.ct_id) : "dashboard" == l ? (i = n.tb_id, r = n.ct_id) : "custom_chart_edit" == l && (i = o.currentView.tb_id, r = o.currentView.ct_id), e.open({
                                template: "/static/partials/dialogTemplates/enum-order.html",
                                data: {
                                    fid: a.fid,
                                    tb_id: i,
                                    ct_id: r,
                                    isCustomOrder: !0,
                                    source: a.axis,
                                    fieldIndex: a.originIndex,
                                    drillLevel: t.drillLevel || 0,
                                    orderModule: "advanced_sort",
                                    uniqId: a.uniq_id,
                                    items: t.sortRuleInfo,
                                    meta: n
                                },
                                scope: t,
                                controller: "enumOrderCtrl",
                                className: "ngdialog-theme-default enum-order-dialog"
                            })
                        }, s && s.off("dashboard_click_sort").on("dashboard_click_sort", function () {
                            i(function () {
                                n.is_advanced_sort = 0
                            })
                        })
                    },
                    initData: function (e, t, a, i, r) {
                        var n = r ? i.chart_type : i.type;
                        if (e.metricFields = s(a), "C200" !== n && i.x.length && "date" === i.x[0].data_type)
                            for (var o = a.length - 1; o >= 0; o--) {
                                var l = a[o];
                                "y" === l.axis && a.splice(o, 1)
                            }
                        if (t.length < 1) e.sortRuleInfo = [], e.fieldListInfo = angular.copy(a) || [];
                        else {
                            for (var c = [], o = 0, u = a.length; o < u; o++) {
                                for (var l = a[o], f = l.fid, p = l.uniq_id, g = !1, h = l.axis, m = 0, _ = t.length; m < _; m++) {
                                    var b = t[m],
                                        v = b.fid,
                                        y = b.uniq_id,
                                        w = b.axis,
                                        D = b.type;
                                    if (h == w && (p && y === p || !p && v === f)) {
                                        g = !0, l.type = D, b.name = l.name, b.data_type = l.data_type, b.originIndex = l.originIndex, void 0 === b.sort_items && ("x" === w || "compare_axis" === w ? b.sort_items = {
                                            sort_item_type: 0
                                        } : "y" === w && (b.sort_items = {
                                            sort_item_type: 1,
                                            aggregator_sort: {
                                                uniq_id: b.uniq_id
                                            }
                                        }));
                                        break
                                    }
                                }
                                g || c.push(l)
                            }
                            e.fieldListInfo = angular.copy(c), e.sortRuleInfo = angular.copy(t), e.sortRuleInfo.map(function (t) {
                                if ("y" !== t.axis) {
                                    var a = t.sort_items.sort_item_type;
                                    if (0 == a) t.sort_items.selectedName = d(a, t.data_type);
                                    else if (1 == a) {
                                        var i = t.sort_items.aggregator_sort.uniq_id;
                                        "uniqIdForSum" === i ? t.sort_items.selectedName = e.tips["chart.totalOfMeasures"] : e.metricFields.forEach(function (e) {
                                            e.uniq_id === i && (t.sort_items.selectedName = e.name)
                                        })
                                    } else 2 == a && (t.sort_items.selectedName = d(a, t.data_type))
                                }
                            })
                        }
                    },
                    preHandleData: function (e, t, a) {
                        var i = [],
                            r = [];
                        if ($.isArray(e))
                            for (var n = 0, o = e.length; n < o; n++) {
                                var l = e[n],
                                    s = "x" === t || "compare_axis" === t ? l.name : l.name + a.setAdvanceAggregatorName(l),
                                    c = l.nick_name || s,
                                    u = {
                                        data_type: l.data_type,
                                        fid: l.fid,
                                        axis: "y_optional" == t ? "y" : t,
                                        name: c,
                                        originName: s,
                                        originIndex: n,
                                        parent_uniq_id: l.parent_uniq_id,
                                        type: "asc"
                                    };
                                "compare_axis" === t && "virtual" === l.data_type || "date" === l.data_type && "C200" !== a.chartMeta.chart_type || ("x" === t || "compare_axis" === t ? u.sort_items = {
                                    sort_item_type: 0,
                                    selectedName: d(0, l.data_type)
                                } : "y" === t && (u.sort_items = {
                                    sort_item_type: 1,
                                    aggregator_sort: {
                                        uniq_id: l.uniq_id,
                                        parent_uniq_id: l.parent_uniq_id
                                    }
                                }), l.uniq_id ? (u.uniq_id = l.uniq_id, $.inArray(l.uniq_id, i) == -1 && (i.push(l.uniq_id), r.push(u))) : r.push(u))
                            }
                        return r
                    }
                };
                r.showTableAdvSort = function (e) {
                    $.isEmptyObject(e.advanced_sort) && (e.advanced_sort = []), 
                    "edit" !== r.chartMode && (e.chart_type = e.type), 
                    e.chartMode = r.chartMode, 
                    c.show(r, r.saveChartFun, e)
                }, 
                r.canSetAdvancedSort = function (e) {
                    return e && bdpChart.helper.canSetAdvancedSort(e, e.chart_type || e.type)
                }, 
                a(["date", "letter", "custom", "percentage", "rowSummary", "chart.totalOfMeasures"], r)
            }
        }
    }]);